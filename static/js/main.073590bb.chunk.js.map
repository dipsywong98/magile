{"version":3,"sources":["../node_modules/peerjs/dist sync","GameAction.ts","types.ts","GameState.ts","components/Deck.tsx","constants.ts","utils.ts","GameReducer.ts","aiAction.ts","withGameNetwork.tsx","assets/index.ts","assets/angel_guard.png","assets/dark_magile.png","assets/earth_mage.png","assets/earth_missile.png","assets/fire_mage.png","assets/fire_missile.png","assets/hetero_ignite.png","assets/homo_ignite.png","assets/light_magile.png","assets/thunder_mage.png","assets/thunder_missile.png","assets/water_mage.png","assets/water_missile.png","assets/wind_mage.png","assets/wind_missile.png","components/Card.tsx","Game.tsx","components/GameRenderer.tsx","i18ns/index.ts","i18ns/en.tsx","i18ns/zh.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","GameActionType","ICard","IMode","ICardType","ICardColor","GameState","maxPlayer","minPlayer","turn","direction","points","drawDeck","stage","mode","trashDeck","playerDeck","playerHp","logs","lastAction","ignited","duel","GenericBoardGameState","ChooseCardFor","allColors","EARTH","WATER","FIRE","WIND","THUNDER","LIGHT","DARK","cardCount","EARTH_MAGE","WATER_MAGE","FIRE_MAGE","WIND_MAGE","THUNDER_MAGE","EARTH_MISSILE","WATER_MISSILE","FIRE_MISSILE","WIND_MISSILE","THUNDER_MISSILE","LIGHT_MAGILE","DARK_MAGILE","HOMO_IGNITE","HETERO_IGNITE","ANGEL_GUARD","basicDamage","count","HOMO","HETERO","getCardType","card","MAGE","MISSILE","MAGILE","IGNITE","areCardsOfTypeOrMagile","cards","type","reduce","prev","curr","cardType","getCardColor","NONE","isActionCard","includes","areCardsOfDifferentColor","seenColor","Set","filteredCards","filter","forEach","add","size","length","withDrawCard","playerId","state","players","undefined","shuffle","hand","slice","withEnsureHp1CardNotFunctionCard","compose","withDiscardCard","withInitGame","prevState","winner","fullDeck","Object","entries","flatMap","Array","fill","index","indexOf","splice","withPutToPlayed","withCardNumberValidation","_","withCardTypeValidation","map","withFirstPlayValidation","withPlayHomo","cardColor","color","areCardsOfColor","withPlayHetero","find","hasCardColorNone","stageColors","join","withPlayIgnite","withPlayAngleGuard","withStateChangedValidation","withIncrementTurn","nextPlayerId","withCheckWin","playerIdLose","findIndex","hp","withCheckHit","ableToResponse","withHit","igniteCount","hit","withCheckDiscardToHp","payload","withClearStage","GameReducer","action","peerId","nameDict","members","GameActionTypes","START","PLAY_CARD","nextState","playCard","withPlayCard","JSON","parse","stringify","DISCARD_CARD","step","TAKE_HIT","END","started","ready","sortDict","dict","sort","a","b","buildPlayCardAction","aiFirstCard","byColor","previousValue","currentValue","countByColor","byType","excludeMagile","k","record","countByTypeUniqueColor","console","log","aiAction","max","amountToDiscard","discards","push","Math","floor","random","aiDiscard","stageColor","homoIgnite","angelGuard","stageType","playableColors","has","delete","heteroIgnite","warn","aiPlayCard","Poker99Context","createContext","usePoker99","network","useContext","cardImages","angel_guard","dark_magile","earth_mage","earth_missile","fire_mage","fire_missile","hetero_ignite","homo_ignite","light_magile","thunder_mage","thunder_missile","water_mage","water_missile","wind_mage","wind_missile","useStyle","makeStyles","root","padding","width","height","borderRadius","cursor","userSelect","transition","transformOrigin","Card","style","onClick","disabled","selected","isDelete","classes","Paper","elevation","pointerEvents","backgroundImage","backgroundSize","position","className","fontFamily","margin","textShadow","top","right","CancelOutlined","red","fontSize","green","DURATION","PlaceHolder","maxWidth","useState","setWidth","useEffect","setTimeout","minWidth","Deck","hide","reveal","onCardsChoose","chooseCardFor","takeHit","myTurn","playedIndices","setPlayedIndices","hovering","setHovering","playGetCardAnimation","setPlayGetCardAnimation","discardingAnimation","setDiscardingAnimation","useReducer","dispatchSelected","handleCardClick","handlePlayCards","param","laterSetDiscardingAnimation","DISCARD","then","from","catch","error","withMaxWidth","children","noPad","onMouseEnter","onTouchStart","onMouseLeave","onTouchEnd","bottom","left","zIndex","transform","textAlign","display","Button","variant","Visibility","RESPOND_PLAY","title","window","confirm","Flag","marginLeft","PlayArrow","FIRST_PLAY","Delete","justifyContent","flexWrap","cardsToRender","j","i","getPlayedCards","Game","dispatch","dispatchAs","myPlayerId","myLocals","hideDeck","setHideDeck","setError","renderedDeckId","throttledRenderedId","setTrottledRenderedId","handleError","message","dispatchHelper","discardCard","handleCardChoose","maxHeight","reverse","s","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","GameRenderer","prevCardPayload","setPrevCardPayload","startAnimateCard","setStartAnimateCard","showAnimateCard","setShowAnimateCard","again","status","computeDamage","hint","backgroundColor","boxShadow","border","i18ns","en","gamenetI18n","magile","howToPlay","howToPlayContent","zh","App","withGamenetI18n","Component","WithGameNetwork","props","useBoardGameNetwork","myAis","n","clearTimeout","Provider","value","displayName","withGameNetwork","i18n","useGamenetI18n","gameAppState","fullPage","gameName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.073590bb.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 196;","// GameAction.ts\r\n\r\nimport { GameActionTypes, GenericBoardGameAction } from 'gamenet'\r\nimport { ICard, IMode } from './types'\r\nimport { NetworkAction } from 'smnet'\r\n\r\nexport enum GameActionType {\r\n  PLAY_CARD,\r\n  END,\r\n  DISCARD_CARD,\r\n  TAKE_HIT\r\n}\r\n\r\nexport interface PlayCardPayload {\r\n  cards: ICard[]\r\n  mode?: IMode\r\n}\r\n\r\nexport type GameAction = (({\r\n  type: GameActionType.DISCARD_CARD\r\n  payload: PlayCardPayload\r\n} | {\r\n  type: GameActionType.PLAY_CARD\r\n  payload: PlayCardPayload\r\n} | {\r\n  type: GameActionType.END\r\n} | {\r\n  type: GameActionType.TAKE_HIT\r\n} | {\r\n  type: GameActionTypes\r\n  payload: never\r\n}) & NetworkAction) | GenericBoardGameAction\r\n","import { GameState } from './GameState'\r\nimport { PlayCardPayload } from './GameAction'\r\n\r\nexport enum ICard {\r\n  EARTH_MAGE = 'earth_mage',\r\n  WATER_MAGE = 'water_mage',\r\n  FIRE_MAGE = 'fire_mage',\r\n  WIND_MAGE = 'wind_mage',\r\n  THUNDER_MAGE = 'thunder_mage',\r\n  EARTH_MISSILE = 'earth_missile',\r\n  WATER_MISSILE = 'water_missile',\r\n  FIRE_MISSILE = 'fire_missile',\r\n  WIND_MISSILE = 'wind_missile',\r\n  THUNDER_MISSILE = 'thunder_missile',\r\n  LIGHT_MAGILE = 'light_magile',\r\n  DARK_MAGILE = 'dark_magile',\r\n  HOMO_IGNITE = 'homo_ignite',\r\n  HETERO_IGNITE = 'hetero_ignite',\r\n  ANGEL_GUARD = 'angel_guard'\r\n}\r\n\r\nexport enum IMode {\r\n  HOMO,\r\n  HETERO\r\n}\r\n\r\nexport type IDeck = ICard[]\r\n\r\nexport type IStateMapper = (prevState: GameState) => GameState\r\n\r\nexport type IsCard = (card: ICard) => boolean\r\n\r\nexport type IPlayCard = (payload: PlayCardPayload, playerId: number) => IStateMapper\r\n\r\nexport enum ICardType {\r\n  MAGE='mage',\r\n  MISSILE='missile',\r\n  MAGILE='magile',\r\n  IGNITE='ignite',\r\n  ANGEL_GUARD='angel_guard'\r\n}\r\n\r\nexport enum ICardColor {\r\n  NONE= 'none',\r\n  EARTH= 'earth',\r\n  WATER= 'water',\r\n  FIRE= 'fire',\r\n  WIND= 'wind',\r\n  THUNDER= 'thunder',\r\n  LIGHT= 'light',\r\n  DARK= 'dark'\r\n}\r\n\r\nexport const allColors: ICardColor[] = [\r\n  ICardColor.EARTH,\r\n  ICardColor.WATER,\r\n  ICardColor.FIRE,\r\n  ICardColor.WIND,\r\n  ICardColor.THUNDER,\r\n  ICardColor.LIGHT,\r\n  ICardColor.DARK,\r\n]\r\n","// Poker99State.ts\r\n\r\nimport { GenericBoardGameState } from 'gamenet'\r\nimport { IDeck, IMode } from './types'\r\nimport { PlayCardPayload } from './GameAction'\r\n\r\nexport class GameState extends GenericBoardGameState {\r\n  [key: string]: unknown | undefined\r\n\r\n  maxPlayer = 8\r\n  minPlayer = 2\r\n  turn = 0\r\n  direction = 1\r\n  points = 0\r\n  drawDeck: IDeck = []\r\n  stage: IDeck = []\r\n  mode: IMode | null = null\r\n  trashDeck: IDeck = []\r\n  playerDeck: IDeck[] = []\r\n  playerHp: number[] = []\r\n  logs: string[] = []\r\n  lastAction: PlayCardPayload & { playerId: number } | null = null\r\n  ignited = false\r\n  duel = false\r\n}\r\n","import React, { FunctionComponent, ReactNode, useEffect, useReducer, useState } from 'react'\nimport { ICard, IMode } from '../types'\nimport { Card } from './Card'\nimport { Button } from '@material-ui/core'\nimport { Delete, Flag, PlayArrow, Visibility } from '@material-ui/icons'\nimport { PlayCardPayload } from '../GameAction'\nimport { Equal, NotEqual } from 'mdi-material-ui'\n\nconst DURATION = 0.3\n\nconst PlaceHolder: FunctionComponent<{ maxWidth: string, style?: Record<string, unknown> }> = ({ maxWidth, style }) => {\n  const [width, setWidth] = useState(maxWidth)\n  useEffect(() => {\n    setTimeout(() => {\n      setWidth('0')\n    }, 1)\n  }, [])\n  return (\n    <div style={{\n      maxWidth: width,\n      minWidth: width,\n      transition: `min-width ${DURATION}s ease-in-out`,\n      position: 'relative',\n      ...style\n    }}/>\n  )\n}\n\nexport enum ChooseCardFor {\n  FIRST_PLAY,\n  RESPOND_PLAY,\n  DISCARD\n}\n\nexport const Deck: FunctionComponent<{\n  cards: ICard[], hide: boolean, reveal: () => void, onCardsChoose: (payload: PlayCardPayload) => Promise<void>, chooseCardFor: ChooseCardFor, takeHit: () => Promise<void>, myTurn?: boolean\n}> = ({ cards, hide, reveal, onCardsChoose, chooseCardFor, takeHit, myTurn }) => {\n  const [playedIndices, setPlayedIndices] = useState<number[]>([])\n  const [hovering, setHovering] = useState<number | null>(null)\n  const [playGetCardAnimation, setPlayGetCardAnimation] = useState(false)\n  const [discardingAnimation, setDiscardingAnimation] = useState(false)\n  const [selected, dispatchSelected] = useReducer<(prev: Set<number>, action: { type: string, payload?: number }) => Set<number>>((prev, {\n    type,\n    payload\n  }) => {\n    switch (type) {\n      case 'add':\n        if (payload !== undefined) {\n          prev.add(payload)\n        }\n        return new Set(prev)\n      case 'delete':\n        if (payload !== undefined) {\n          prev.delete(payload)\n        }\n        return new Set(prev)\n      case 'clear':\n        return new Set()\n      default:\n        return prev\n    }\n  }, new Set<number>())\n  const handleCardClick = async (card: ICard, index: number) => {\n    if (selected.has(index)) {\n      dispatchSelected({ type: 'delete', payload: index })\n    } else {\n      dispatchSelected({ type: 'add', payload: index })\n    }\n  }\n  const handlePlayCards = (param: unknown) => {\n    const mode = param === IMode.HOMO || param === IMode.HETERO ? param : undefined\n    const laterSetDiscardingAnimation = chooseCardFor === ChooseCardFor.DISCARD\n    onCardsChoose({ cards: cards.filter((_, k) => selected.has(k)), mode })\n      .then(() => {\n        setDiscardingAnimation(laterSetDiscardingAnimation)\n        setHovering(null)\n        setPlayedIndices(Array.from(selected))\n        dispatchSelected({ type: 'clear' })\n        setTimeout(() => {\n          setPlayGetCardAnimation(true)\n        }, 1)\n        setTimeout(() => {\n          setPlayGetCardAnimation(false)\n          setPlayedIndices([])\n          setDiscardingAnimation(false)\n        }, 500)\n      })\n      .catch(e => {\n        console.error(e)\n      })\n  }\n  const getPlayedCards = () => {\n    const cardsToRender = []\n    let j = 0\n    for (let i = 0; i < cards.length; i++) {\n      if (playedIndices.includes(i)) {\n        cardsToRender.push(null)\n      } else {\n        cardsToRender.push(cards[j])\n        j++\n      }\n    }\n    return discardingAnimation ? [...cardsToRender, ...cards.slice(j)] : cardsToRender\n  }\n  const withMaxWidth = (children: ReactNode, index: number, noPad = false) => (\n    <div\n      style={{\n        padding: noPad ? 0 : '8px',\n        maxWidth: `calc(100vw / ${cards.length + 2})`,\n        transition: `max-width ${DURATION/3}s ease-in-out`\n      }}\n      onMouseEnter={() => setHovering(index)}\n      onTouchStart={() => setHovering(index)}\n      onMouseLeave={() => setHovering(null)}\n      onTouchEnd={() => setHovering(null)}>\n      {children}\n    </div>\n  )\n  return <div style={{\n    position: 'fixed',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 1,\n    transform: hide ? 'translateY(100%)' : 'translateY(50%)',\n    transition: `transform 0.3s ease-in-out`,\n    pointerEvents: 'none'\n  }}>\n    <div style={{\n      textAlign: 'center',\n      transform: 'translateY(-80px)',\n      margin: 'auto',\n      display: 'block',\n      pointerEvents: 'all'\n    }}>\n      {myTurn ? <>\n      {hide && <Button variant='contained' onClick={reveal}>\n        <Visibility/>\n      </Button>}\n      {!hide && chooseCardFor === ChooseCardFor.RESPOND_PLAY && <>\n        <Button variant='contained'\n          title='take hit'\n          color='secondary'\n          onClick={() => window.confirm('Are you sure you want to take hit?') && takeHit().catch(console.error)}\n        >\n          <Flag/>\n        </Button>\n        <Button style={{marginLeft: '8px'}} variant='contained'\n          title='play'\n          color='primary'\n          onClick={handlePlayCards}\n        >\n          <PlayArrow/>\n        </Button>\n      </>}\n      {!hide && chooseCardFor === ChooseCardFor.FIRST_PLAY && <>\n        <Button variant='contained'\n          title='homo'\n          color='primary'\n          onClick={() => handlePlayCards(IMode.HOMO)}\n        >\n          <Equal/>\n        </Button>\n        <Button style={{marginLeft: '8px'}} variant='contained'\n          title='hetero'\n          color='primary'\n          onClick={() => handlePlayCards(IMode.HETERO)}\n        >\n          <NotEqual/>\n        </Button>\n      </>}\n      {!hide && chooseCardFor === ChooseCardFor.DISCARD && <>\n        <Button variant='contained'\n          color='secondary'\n          title='trash'\n          onClick={handlePlayCards}\n        >\n          <Delete/>\n        </Button>\n      </>}\n      </>: 'not your turn'}\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'nowrap' }}>\n      {\n        getPlayedCards().map((card, index) => (\n          card === null\n            ? <PlaceHolder key={index} maxWidth={`calc(100vw / ${cards.length + 2} + 16px)`}/>\n            : withMaxWidth(<Card\n              card={card}\n              onClick={() => handleCardClick(card, index)}\n              disabled={hide}\n              style={{ transform: (hovering === index || selected.has(index)) ? 'translateY(-30%)' : 'translateY(-15%)' }}\n              selected={selected.has(index)}\n              isDelete={chooseCardFor === ChooseCardFor.DISCARD}\n            />, index)))\n      }\n      {playedIndices.length > 0 && !discardingAnimation && <div style={{\n        maxWidth: playGetCardAnimation ? `calc((100vw / ${cards.length + 2} + 16px) * ${playedIndices.length})` : '0',\n        transition: `max-width ${DURATION}s ease-in-out`,\n        display: 'flex',\n        flexWrap: 'nowrap'\n      }}>\n        {\n          cards.slice(cards.length - playedIndices.length).map((card, index) => (\n            withMaxWidth(\n              <Card\n                card={card}\n                onClick={() => handleCardClick(card, index)}\n                disabled={hide}\n                style={{ transform: !playGetCardAnimation ? 'translateX(100vw)' : undefined }}\n                selected={selected.has(index)}\n              />\n              , index + cards.length, false\n            )\n          ))\n        }\n      </div>}\n    </div>\n  </div>\n}\n","import { ICard } from './types'\r\n\r\nexport const cardCount = {\r\n  [ICard.EARTH_MAGE]: 9,\r\n  [ICard.WATER_MAGE]: 9,\r\n  [ICard.FIRE_MAGE]: 9,\r\n  [ICard.WIND_MAGE]: 9,\r\n  [ICard.THUNDER_MAGE]: 9,\r\n  [ICard.EARTH_MISSILE]: 9,\r\n  [ICard.WATER_MISSILE]: 9,\r\n  [ICard.FIRE_MISSILE]: 9,\r\n  [ICard.WIND_MISSILE]: 9,\r\n  [ICard.THUNDER_MISSILE]: 9,\r\n  [ICard.LIGHT_MAGILE]: 3,\r\n  [ICard.DARK_MAGILE]: 3,\r\n  [ICard.HOMO_IGNITE]: 3,\r\n  [ICard.HETERO_IGNITE]: 3,\r\n  [ICard.ANGEL_GUARD]: 6\r\n}\r\n","import { ICard, ICardColor, ICardType, IMode } from './types'\r\nimport { GameState } from './GameState'\r\n\r\nexport const basicDamage = (count: number, mode: IMode | null): number => {\r\n  switch (mode) {\r\n    case IMode.HOMO:\r\n      switch (count) {\r\n        case 1:\r\n        case 2:\r\n        case 3:\r\n        case 4:\r\n          return 1\r\n        case 5:\r\n        case 6:\r\n        case 7:\r\n          return 2\r\n        default:\r\n          return 3\r\n      }\r\n    case IMode.HETERO:\r\n      switch (count) {\r\n        case 1:\r\n        case 2:\r\n        case 3:\r\n        case 4:\r\n          return 1\r\n        case 5:\r\n        case 6:\r\n          return 2\r\n        default:\r\n          return 3\r\n      }\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n\r\nexport const computeDamage = (state: GameState) => {\r\n  const igniteCount = state.stage.filter(card => getCardType(card) === ICardType.IGNITE).length\r\n  const basic = basicDamage(state.stage.filter(card => getCardColor(card) !== ICardColor.NONE).length, state.mode)\r\n  return basic + igniteCount + (state.duel ? 1 : 0)\r\n}\r\n\r\nexport const getCardType = (card: ICard): ICardType => {\r\n  switch (card) {\r\n    case ICard.EARTH_MAGE:\r\n    case ICard.WATER_MAGE:\r\n    case ICard.FIRE_MAGE:\r\n    case ICard.WIND_MAGE:\r\n    case ICard.THUNDER_MAGE:\r\n      return ICardType.MAGE\r\n    case ICard.EARTH_MISSILE:\r\n    case ICard.WATER_MISSILE:\r\n    case ICard.FIRE_MISSILE:\r\n    case ICard.WIND_MISSILE:\r\n    case ICard.THUNDER_MISSILE:\r\n      return ICardType.MISSILE\r\n    case ICard.LIGHT_MAGILE:\r\n    case ICard.DARK_MAGILE:\r\n      return ICardType.MAGILE\r\n    case ICard.HETERO_IGNITE:\r\n    case ICard.HOMO_IGNITE:\r\n      return ICardType.IGNITE\r\n    case ICard.ANGEL_GUARD:\r\n      return ICardType.ANGEL_GUARD\r\n  }\r\n}\r\n\r\nexport const areCardsOfTypeOrMagile = (cards: ICard[], type: ICardType): boolean => {\r\n  return cards.reduce<boolean>((prev, curr) => {\r\n    const cardType = getCardType(curr)\r\n    return prev && (cardType === type || cardType === ICardType.MAGILE)\r\n  }, true)\r\n}\r\n\r\nexport const getCardColor = (card: ICard): ICardColor => {\r\n  switch (card) {\r\n    case ICard.EARTH_MAGE:\r\n    case ICard.EARTH_MISSILE:\r\n      return ICardColor.EARTH\r\n    case ICard.WATER_MAGE:\r\n    case ICard.WATER_MISSILE:\r\n      return ICardColor.WATER\r\n    case ICard.FIRE_MAGE:\r\n    case ICard.FIRE_MISSILE:\r\n      return ICardColor.FIRE\r\n    case ICard.WIND_MAGE:\r\n    case ICard.WIND_MISSILE:\r\n      return ICardColor.WIND\r\n    case ICard.THUNDER_MAGE:\r\n    case ICard.THUNDER_MISSILE:\r\n      return ICardColor.THUNDER\r\n    case ICard.LIGHT_MAGILE:\r\n      return ICardColor.LIGHT\r\n    case ICard.DARK_MAGILE:\r\n      return ICardColor.DARK\r\n    default:\r\n      return ICardColor.NONE\r\n  }\r\n}\r\n\r\nexport const isActionCard = (card: ICard) => {\r\n  return ![ICardType.MISSILE, ICardType.MAGE].includes(getCardType(card))\r\n}\r\n\r\nexport const areCardsOfColor = (cards: ICard[], color: ICardColor): boolean => {\r\n  return cards.reduce<boolean>((prev, curr) => {\r\n    return prev && getCardColor(curr) === color\r\n  }, true)\r\n}\r\n\r\nexport const areCardsOfDifferentColor = (cards: ICard[]): boolean => {\r\n  const seenColor = new Set()\r\n  const filteredCards = cards.filter((card) => getCardColor(card) !== ICardColor.NONE)\r\n  filteredCards.forEach((card) => {\r\n    seenColor.add(getCardColor(card))\r\n  })\r\n  return seenColor.size === filteredCards.length\r\n}\r\n\r\nexport const hasCardColorNone = (cards: ICard[]): boolean => {\r\n  return !!cards.find((card) => getCardColor(card) === ICardColor.NONE)\r\n}\r\n\r\nexport const canPlayCard = (state: GameState, card: ICard): boolean => {\r\n  const { mode, duel, ignited } = state\r\n  if (duel) {\r\n    if ([ICardType.MAGILE, ICardType.IGNITE, ICardType.ANGEL_GUARD].includes(getCardType(card))) {\r\n      return false\r\n    }\r\n  }\r\n  if(state.stage.length === 0){\r\n    return !isActionCard(card)\r\n  }\r\n  if (card === ICard.ANGEL_GUARD) {\r\n    return true\r\n  }\r\n  if (ignited) {\r\n    if (![ICardType.IGNITE, ICardType.ANGEL_GUARD].includes(getCardType(card))) {\r\n      return false\r\n    }\r\n  }\r\n  if(mode === IMode.HOMO) {\r\n    return card === ICard.HOMO_IGNITE || getCardColor(card) === getCardColor(state.stage[0])\r\n  }\r\n  if(mode === IMode.HETERO) {\r\n    return card === ICard.HETERO_IGNITE || (areCardsOfTypeOrMagile([card], getCardType(state.stage[0])) && areCardsOfDifferentColor([...state.stage, card]))\r\n  }\r\n  console.warn('canPlayCard EDGECASE!!!', state, card)\r\n  return false\r\n}\r\n\r\nexport const randInt = (max: number) => {\r\n  return Math.floor(Math.random()*max)\r\n}\r\n","import { NetworkReducer } from 'smnet'\r\nimport { GameState } from './GameState'\r\nimport { GameAction, GameActionType, PlayCardPayload } from './GameAction'\r\nimport { allColors, ICard, ICardColor, ICardType, IDeck, IMode, IPlayCard, IStateMapper } from './types'\r\nimport { compose, GameActionTypes, shuffle } from 'gamenet'\r\nimport { cardCount } from './constants'\r\nimport {\r\n  areCardsOfColor,\r\n  areCardsOfDifferentColor,\r\n  areCardsOfTypeOrMagile,\r\n  basicDamage,\r\n  getCardColor,\r\n  getCardType,\r\n  hasCardColorNone\r\n} from './utils'\r\n\r\nconst getFullDeck = (): IDeck => {\r\n  return Object.entries(cardCount).flatMap(([card, count]) => Array(count).fill(card))\r\n}\r\n\r\nconst withDrawCard: (playerId: number) => IStateMapper = playerId => state => {\r\n  if (state.playerDeck[playerId].length >= state.playerHp[playerId]) {\r\n    throw new Error(`cannot draw, ${state.players[playerId]} already has ${state.playerHp[playerId]} cards`)\r\n  }\r\n  const card = state.drawDeck[0]\r\n  if (card === undefined) {\r\n    return withDrawCard(playerId)({ ...state, drawDeck: shuffle(state.trashDeck), trashDeck: [] })\r\n  } else {\r\n    const hand = [...state.playerDeck[playerId], card]\r\n    const playerDeck = [...state.playerDeck]\r\n    playerDeck[playerId] = hand\r\n    if (hand.length < state.playerHp[playerId]) {\r\n      return withDrawCard(playerId)({ ...state, playerDeck, drawDeck: state.drawDeck.slice(1) })\r\n    } else {\r\n      return { ...state, playerDeck, drawDeck: state.drawDeck.slice(1) }\r\n    }\r\n  }\r\n}\r\n\r\nconst withEnsureHp1CardNotFunctionCard: (playerId: number) => IStateMapper = playerId => state => {\r\n  if (state.playerHp[playerId] === 1) {\r\n    const cardType = getCardType(state.playerDeck[playerId][0])\r\n    if (state.playerDeck[playerId].length === 1 && cardType !== ICardType.MAGE && cardType !== ICardType.MISSILE)\r\n      return compose(\r\n        withEnsureHp1CardNotFunctionCard(playerId),\r\n        withDrawCard(playerId),\r\n        withDiscardCard({ cards: state.playerDeck[playerId] }, playerId)\r\n      )(state)\r\n  }\r\n  return state\r\n}\r\n\r\nconst withInitGame: IStateMapper = (prevState: GameState) => {\r\n  prevState = {\r\n    ...prevState,\r\n    turn: 0,\r\n    direction: 1,\r\n    points: 0,\r\n    drawDeck: [],\r\n    stage: [],\r\n    mode: null,\r\n    trashDeck: [],\r\n    playerDeck: [],\r\n    playerHp: [],\r\n    logs: [],\r\n    lastAction: null,\r\n    ignited: false,\r\n    duel: false,\r\n    winner: null\r\n  }\r\n  const fullDeck = getFullDeck()\r\n  prevState.drawDeck = shuffle(fullDeck)\r\n  for (let id = 0; id < prevState.players.length; id++) {\r\n    prevState.playerDeck[id] = []\r\n    prevState.playerHp[id] = 7\r\n    prevState = withDrawCard(id)(prevState)\r\n  }\r\n  return { ...prevState }\r\n}\r\n\r\nconst withDiscardCard: IPlayCard = ({ cards }, playerId) => state => {\r\n  const trashDeck = [...state.trashDeck, ...cards]\r\n  const hand = [...state.playerDeck[playerId]]\r\n  cards.forEach((card) => {\r\n    const index = hand.indexOf(card)\r\n    if (index === -1) {\r\n      throw new Error(`${state.players[playerId]} doesnt own card ${card}`)\r\n    }\r\n    hand.splice(index, 1)\r\n  })\r\n  const playerDeck = [...state.playerDeck]\r\n  playerDeck[playerId] = hand\r\n  return { ...state, trashDeck, playerDeck }\r\n}\r\n\r\nconst withPutToPlayed: IPlayCard = ({ cards }) => (state) => {\r\n  return { ...state, stage: [...state.stage, ...cards] }\r\n}\r\n\r\nconst withCardNumberValidation: IPlayCard = (_, playerId) => (state) => {\r\n  if (state.playerDeck[playerId].length > state.playerHp[playerId]) {\r\n    throw new Error(`Player deck amount is greater than his hp, please discard`)\r\n  }\r\n  return state\r\n}\r\n\r\nconst withCardTypeValidation: IPlayCard = ({ cards }, playerId) => state => {\r\n  if (cards.length === 3) {\r\n    if (cards.map(card => getCardColor(card)).includes(ICardColor.NONE)) {\r\n      throw new Error('cannot mix ignite or angel card with mage, missiles and magiles')\r\n    }\r\n    if (state.duel) {\r\n      if (cards.map(card => getCardType(card)).includes(ICardType.MAGILE)) {\r\n        throw new Error('cannot play function card during duel')\r\n      }\r\n    }\r\n  } else if (cards.length === 1) {\r\n    if (state.duel) {\r\n      const cardType = getCardType(cards[0])\r\n      if ([ICardType.MAGILE, ICardType.IGNITE, ICardType.ANGEL_GUARD].includes(cardType)) {\r\n        throw new Error('cannot play function card during duel')\r\n      }\r\n    }\r\n  } else {\r\n    throw new Error('you can only play 1 card or 3 cards')\r\n  }\r\n  return state\r\n}\r\n\r\nconst withFirstPlayValidation: IPlayCard = ({ cards, mode }, playerId) => (state) => {\r\n  if (state.stage.length === 0) {\r\n    if (mode === null || mode === undefined) {\r\n      throw new Error('please specify homo transfer or hetero transfer as the first to transfer')\r\n    }\r\n    if (mode === IMode.HOMO && state.playerHp[(playerId + 1) % state.players.length] === 1) {\r\n      throw new Error('can only do hetero transfer when next player is 1 hp')\r\n    }\r\n    if (cards.length !== 1) {\r\n      throw new Error('please play one card as the first to transfer')\r\n    }\r\n    if (getCardType(cards[0]) !== ICardType.MAGE && getCardType(cards[0]) !== ICardType.MISSILE) {\r\n      throw new Error('cannot play function type as the first to transfer')\r\n    }\r\n    return { ...state, mode }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withPlayHomo: IPlayCard = ({ cards }) => state => {\r\n  if (state.mode === IMode.HOMO && !state.ignited) {\r\n    if (state.stage.length === 0) {\r\n      return { ...state }\r\n    }\r\n    const cardColor = getCardColor(cards[0])\r\n    if (cardColor !== ICardColor.NONE) {\r\n      if (!areCardsOfColor(cards, getCardColor(state.stage[0]))) {\r\n        throw new Error(`cannot play color other than ${cardColor} in this homo transfer`)\r\n      }\r\n      return { ...state }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withPlayHetero: IPlayCard = ({ cards }) => state => {\r\n  if (state.mode === IMode.HETERO && !state.ignited) {\r\n    if (state.stage.length === 0) {\r\n      return { ...state }\r\n    }\r\n    if (!hasCardColorNone(cards)) {\r\n      if (!areCardsOfDifferentColor([...state.stage, ...cards])) {\r\n        const stageColors = state.stage.map(card => getCardColor(card))\r\n        throw new Error(`Color ${cards.map(card => getCardColor(card)).filter(color => stageColors.includes(color)).join(', ')} were played. You may play ${allColors.filter(color => !stageColors.includes(color)).join(',')} during this hetero transfer`)\r\n      } else if (!areCardsOfTypeOrMagile(cards, getCardType(state.stage[0]))) {\r\n        if (state.duel) {\r\n          throw new Error(`You may play ${getCardType(state.stage[0])} only`)\r\n        } else {\r\n          throw new Error(`You may play ${getCardType(state.stage[0])} or magile only`)\r\n        }\r\n      } else {\r\n        return { ...state }\r\n      }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withPlayIgnite: IPlayCard = ({ cards }) => state => {\r\n  if (cards.length === 1) {\r\n    const card = cards[0]\r\n    if (card === ICard.HETERO_IGNITE) {\r\n      if (state.mode === IMode.HETERO) {\r\n        return { ...state, ignited: true }\r\n      } else {\r\n        throw new Error('cannot play hetero_ignite during homo transfer')\r\n      }\r\n    }\r\n    if (card === ICard.HOMO_IGNITE) {\r\n      if (state.mode === IMode.HOMO) {\r\n        return { ...state, ignited: true }\r\n      } else {\r\n        throw new Error('cannot play homo_ignite during hetero transfer')\r\n      }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withPlayAngleGuard: IPlayCard = ({ cards }) => state => {\r\n  if (cards.length === 1) {\r\n    if (cards[0] === ICard.ANGEL_GUARD) {\r\n      return { ...state }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withStateChangedValidation = (prevState: GameState): IPlayCard => () => state => {\r\n  if (prevState === state) {\r\n    throw new Error('invalid move')\r\n  }\r\n  return state\r\n}\r\n\r\nexport const withIncrementTurn: IStateMapper = prevState => {\r\n  const nextPlayerId = (prevState.turn + prevState.players.length + prevState.direction) % prevState.players.length\r\n  return { ...prevState, turn: nextPlayerId }\r\n}\r\n\r\nconst withPlayCard: (playerId: number, payload: PlayCardPayload) => IStateMapper = (playerId, payload) => prevState => {\r\n  if (prevState.turn !== playerId) {\r\n    throw new Error('not your turn')\r\n  }\r\n  const nextState = compose(\r\n    withCheckWin,\r\n    withCheckHit,\r\n    withIncrementTurn,\r\n    withEnsureHp1CardNotFunctionCard(playerId),\r\n    withDrawCard(playerId),\r\n    ...[\r\n      withPutToPlayed,\r\n      withDiscardCard,\r\n      withStateChangedValidation(prevState),\r\n      withPlayAngleGuard,\r\n      withPlayIgnite,\r\n      withPlayHetero,\r\n      withPlayHomo,\r\n      withCardTypeValidation,\r\n      withFirstPlayValidation,\r\n      withCardNumberValidation\r\n    ].map(playCard => playCard(payload, playerId))\r\n  )(prevState)\r\n  return { ...nextState, lastAction: { ...payload, playerId } }\r\n}\r\n\r\nexport const withCheckWin: IStateMapper = state => {\r\n  const playerIdLose = state.playerHp.findIndex(hp => hp <= 0)\r\n  if (playerIdLose !== -1) {\r\n    return { ...state, winner: playerIdLose }\r\n  }\r\n  return state\r\n}\r\n\r\nexport const withCheckHit: IStateMapper = prevState => {\r\n  if (ableToResponse(prevState)) {\r\n    return prevState\r\n  } else {\r\n    return withHit(prevState)\r\n  }\r\n}\r\n\r\nconst ableToResponse = (state: GameState): boolean => {\r\n  const { ignited, duel, turn, mode } = state\r\n  const hand = state.playerDeck[turn]\r\n  if (!duel && !!hand.find(card => card === ICard.ANGEL_GUARD)) {\r\n    return true\r\n  }\r\n  if (mode === IMode.HETERO) {\r\n    if (!duel && !!hand.find(card => card === ICard.HETERO_IGNITE)) {\r\n      return true\r\n    }\r\n    if (ignited) {\r\n      return hand.includes(ICard.HETERO_IGNITE)\r\n    }\r\n    return hand\r\n      .filter(card => getCardColor(card) !== ICardColor.NONE)\r\n      .filter(card => duel ? getCardType(card) !== ICardType.MAGILE : true)\r\n      .filter(card => areCardsOfTypeOrMagile([card], getCardType(state.stage[0])))\r\n      .filter(card => !state.stage.map(card => getCardColor(card)).includes(getCardColor(card))).length > 0\r\n  } else {\r\n    if (!duel && !!hand.find(card => card === ICard.HOMO_IGNITE)) {\r\n      return true\r\n    }\r\n    if (ignited) {\r\n      return hand.includes(ICard.HOMO_IGNITE)\r\n    }\r\n    return hand\r\n      .filter(card => getCardColor(card) === getCardColor(state.stage[0]))\r\n      .length > 0\r\n  }\r\n}\r\n\r\nconst withHit = (state: GameState): GameState => {\r\n  if (state.mode !== null) {\r\n    const { turn } = state\r\n    const igniteCount = state.stage.filter(card => getCardType(card) === ICardType.IGNITE).length\r\n    const basic = basicDamage(state.stage.filter(card => getCardColor(card) !== ICardColor.NONE).length, state.mode)\r\n    const hit = basic + igniteCount + (state.duel ? 1 : 0)\r\n    const playerHp = [...state.playerHp]\r\n    playerHp[turn] -= hit\r\n    return {\r\n      ...state,\r\n      playerHp,\r\n      ignited: false,\r\n      duel: state.duel || playerHp[turn] <= 3,\r\n      mode: null\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nexport const withLog: (log: string) => IStateMapper = log => prevState => {\r\n  return { ...prevState, logs: [...prevState.logs, log] }\r\n}\r\n\r\nconst withCheckDiscardToHp: IPlayCard = (payload, playerId) => state => {\r\n  if (state.playerDeck[playerId].length - payload.cards.length !== state.playerHp[playerId]) {\r\n    throw new Error(`should discard ${state.playerDeck[playerId].length - state.playerHp[playerId]} cards`)\r\n  }\r\n  return state\r\n}\r\n\r\nconst withClearStage: IStateMapper = state => {\r\n  return {\r\n    ...state,\r\n    stage: [],\r\n    trashDeck: [...state.stage],\r\n    lastAction: null\r\n  }\r\n}\r\n\r\nexport const GameReducer: NetworkReducer<GameState, GameAction> = (prevState, action) => {\r\n  const peerId = action.peerId\r\n  if (peerId === undefined) {\r\n    throw new Error('Expect peerId in action')\r\n  }\r\n  const playerId = (): number => {\r\n    const id = prevState.nameDict[prevState.members[peerId]]\r\n    if (id === undefined) {\r\n      throw new Error('game not started')\r\n    }\r\n    return id\r\n  }\r\n  switch (action.type) {\r\n    case GameActionTypes.START:\r\n      return withInitGame(prevState)\r\n    case GameActionType.PLAY_CARD:\r\n      return withPlayCard(playerId(), action.payload)(JSON.parse(JSON.stringify(prevState)))\r\n    case GameActionType.DISCARD_CARD:\r\n      return compose(withClearStage, ...[withDiscardCard, withCheckDiscardToHp].map(step => step(action.payload, playerId())))(JSON.parse(JSON.stringify(prevState)))\r\n    case GameActionType.TAKE_HIT:\r\n      return withCheckWin(withHit(prevState))\r\n    case GameActionType.END:\r\n      return { ...prevState, started: false, ready: {} }\r\n  }\r\n  return prevState\r\n}\r\n","import { GameState } from './GameState'\r\nimport { GameAction, GameActionType } from './GameAction'\r\nimport { getCardColor, getCardType, isActionCard, randInt } from './utils'\r\nimport { allColors, ICard, ICardColor, ICardType, IDeck, IMode } from './types'\r\n\r\nconst countByColor = (hand: IDeck): Record<ICardColor, number> => {\r\n  return hand\r\n    .map(card => getCardColor(card))\r\n    .filter(color => color !== ICardColor.NONE)\r\n    .reduce<Record<ICardColor, number>>(((previousValue, currentValue) => ({\r\n      ...previousValue,\r\n      [currentValue]: (previousValue[currentValue] ?? 0) + 1\r\n    })), {} as Record<ICardColor, number>)\r\n}\r\n\r\nconst countByTypeUniqueColor = (hand: IDeck, excludeMagile: boolean): Record<ICardType, number> => {\r\n  return hand\r\n    .filter(card => getCardColor(card) !== ICardColor.NONE)\r\n    .filter((card, k, cards) => cards.indexOf(card) === k)\r\n    .reduce<Record<ICardType, number>>(((record, card) => {\r\n      const type: ICardType = getCardType(card)\r\n      if (type === ICardType.MAGILE && !excludeMagile) {\r\n        return {\r\n          [ICardType.MISSILE]: (record[ICardType.MISSILE] ?? 0) + 1,\r\n          [ICardType.MAGE]: (record[ICardType.MAGE] ?? 0) + 1\r\n        } as Record<ICardType, number>\r\n      }\r\n      return {\r\n        ...record,\r\n        [type]: (record[type] ?? 0) + 1\r\n      }\r\n    }), {} as Record<ICardType, number>)\r\n}\r\n\r\nconst sortDict = <T extends string | number> (dict: Record<T, number>): Array<[T, number]> => {\r\n  return Object.entries<number>(dict).sort((a, b) => (b[1] - a[1])) as Array<[T, number]>\r\n}\r\n\r\nconst buildPlayCardAction = (cards: ICard[], mode?: IMode): GameAction => {\r\n  return {\r\n    type: GameActionType.PLAY_CARD,\r\n    payload: {\r\n      cards,\r\n      mode\r\n    }\r\n  }\r\n}\r\n\r\nconst aiDiscard = (state: GameState, turn: number): GameAction => {\r\n  const hand: ICard[] = [...state.playerDeck[turn]]\r\n  const amountToDiscard = hand.length - state.playerHp[turn]\r\n  const discards: ICard[] = []\r\n  if (state.duel) {\r\n    while (discards.length < amountToDiscard && hand.find(isActionCard)) {\r\n      discards.push(hand.splice(hand.findIndex(isActionCard), 1)[0])\r\n    }\r\n  }\r\n  while (discards.length < amountToDiscard) {\r\n    discards.push(hand.splice(randInt(hand.length), 1)[0])\r\n  }\r\n  return {\r\n    type: GameActionType.DISCARD_CARD,\r\n    payload: {\r\n      cards: discards\r\n    }\r\n  }\r\n}\r\n\r\nconst aiFirstCard = (state: GameState, turn: number): GameAction => {\r\n  const hand: ICard[] = [...state.playerDeck[turn]]\r\n  const byColor: Array<[ICardColor, number]> = sortDict(countByColor(hand))\r\n  const byType: Array<[ICardType, number]> = sortDict(countByTypeUniqueColor(hand, state.duel))\r\n  console.log({ byColor, byType })\r\n  const mode = byColor[0][1] <= byType[0][1] && hand.filter(card => getCardType(card) === ICardType.MAGILE).length < byType[0][1] ? IMode.HETERO : IMode.HOMO\r\n  if (mode === IMode.HOMO) {\r\n    return buildPlayCardAction([hand.find((card) => getCardColor(card) === byColor[0][0]) as ICard], mode)\r\n  } else {\r\n    return buildPlayCardAction([hand.find((card) => getCardType(card) === byType[0][0]) as ICard], mode)\r\n  }\r\n}\r\n\r\nconst aiPlayCard = (state: GameState, playerId: number): GameAction => {\r\n  const hand = state.playerDeck[playerId]\r\n  const { mode, ignited, duel } = state\r\n  if (mode === IMode.HOMO) {\r\n    if(!ignited) {\r\n      const stageColor = getCardColor(state.stage[0])\r\n      const cards = hand.filter(card => getCardColor(card) === stageColor)\r\n      if (cards.length > 3) {\r\n        return buildPlayCardAction(cards.slice(0, 3))\r\n      }\r\n      if (cards.length > 0) {\r\n        return buildPlayCardAction([cards[0]])\r\n      }\r\n    }\r\n    if(!duel) {\r\n      const homoIgnite = hand.find(card => card === ICard.HOMO_IGNITE)\r\n      if(homoIgnite) {\r\n        return buildPlayCardAction([homoIgnite])\r\n      }\r\n      const angelGuard = hand.find(card => card === ICard.ANGEL_GUARD)\r\n      if(angelGuard) {\r\n        return buildPlayCardAction([angelGuard])\r\n      }\r\n    }\r\n  } else {\r\n    if(!ignited) {\r\n      const stageColors = state.stage.map(card => getCardColor(card))\r\n      const stageType = getCardType(state.stage[0])\r\n      const playableColors = new Set(allColors.filter(color => !stageColors.includes(color)))\r\n      const cards = hand.filter(card => {\r\n        const cardColor = getCardColor(card)\r\n        if(getCardType(card) === stageType && playableColors.has(cardColor)) {\r\n          playableColors.delete(cardColor)\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n      console.log('playable colors', playableColors, cards)\r\n      if (cards.length > 3) {\r\n        return buildPlayCardAction(cards.slice(0, 3))\r\n      }\r\n      if (cards.length > 0) {\r\n        return buildPlayCardAction([cards[0]])\r\n      }\r\n    }\r\n    if(!duel) {\r\n      const heteroIgnite = hand.find(card => card === ICard.HETERO_IGNITE)\r\n      if(heteroIgnite) {\r\n        return buildPlayCardAction([heteroIgnite])\r\n      }\r\n      const angelGuard = hand.find(card => card === ICard.ANGEL_GUARD)\r\n      if(angelGuard) {\r\n        return buildPlayCardAction([angelGuard])\r\n      }\r\n    }\r\n  }\r\n  console.warn('AI PLAY CARD REACH EDGE CASE, TAKE HIT', state, playerId)\r\n  return {\r\n    type: GameActionType.TAKE_HIT\r\n  }\r\n}\r\n\r\nexport const aiAction = (state: GameState, turn: number): GameAction => {\r\n  if (state.playerDeck[turn].length > state.playerHp[turn]) {\r\n    return aiDiscard(state, turn)\r\n  }\r\n  if (state.stage.length === 0) {\r\n    return aiFirstCard(state, turn)\r\n  }\r\n  return aiPlayCard(state, turn)\r\n}\r\n","import React, { createContext, FunctionComponent, useContext, useEffect } from 'react'\r\nimport { BoardGameContextInterface, useBoardGameNetwork } from 'gamenet'\r\nimport { GameState } from './GameState'\r\nimport { GameReducer } from './GameReducer'\r\nimport { GameAction } from './GameAction'\r\nimport { aiAction } from './aiAction'\r\n\r\nconst Poker99Context = createContext<BoardGameContextInterface<GameState, GameAction> | null>(null)\r\n\r\nexport const withGameNetwork = (Component: FunctionComponent): FunctionComponent => {\r\n  const WithGameNetwork: FunctionComponent = props => {\r\n    const network = useBoardGameNetwork(GameReducer, new GameState())\r\n    const {myAis, state,dispatchAs} = network\r\n    useEffect(() => {\r\n      if (aiAction !== undefined && myAis.includes(state.players[state.turn]) && state.started && state.winner === null) {\r\n        const cb = (): void => {\r\n          const action = aiAction(state, state.turn)\r\n          // action.peerId = Object.keys(state.members).filter(peerId => state.members[peerId] === state.players[state.turn])[0]\r\n          dispatchAs(state.turn, action).catch(console.error)\r\n        }\r\n        const n = window.setTimeout(cb, 1000)\r\n        return () => {\r\n          window.clearTimeout(n)\r\n        }\r\n      }\r\n    }, [dispatchAs, myAis, state])\r\n    return (\r\n      <Poker99Context.Provider value={network}>\r\n        <Component {...props} />\r\n    </Poker99Context.Provider>\r\n  )\r\n  }\r\n  WithGameNetwork.displayName = 'WithGameNetwork'\r\n  return WithGameNetwork\r\n}\r\n\r\nexport const usePoker99 = (): BoardGameContextInterface<GameState, GameAction> => {\r\n  const network: BoardGameContextInterface<GameState, GameAction> | null = useContext(Poker99Context)\r\n  if (network === null) {\r\n    throw new Error('please wrap it using withGameNetwork before calling this hook')\r\n  }\r\n  return network\r\n}\r\n","import angel_guard from './angel_guard.png'\nimport dark_magile from './dark_magile.png'\nimport earth_mage from './earth_mage.png'\nimport earth_missile from './earth_missile.png'\nimport fire_mage from './fire_mage.png'\nimport fire_missile from './fire_missile.png'\nimport hetero_ignite from './hetero_ignite.png'\nimport homo_ignite from './homo_ignite.png'\nimport light_magile from './light_magile.png'\nimport thunder_mage from './thunder_mage.png'\nimport thunder_missile from './thunder_missile.png'\nimport water_mage from './water_mage.png'\nimport water_missile from './water_missile.png'\nimport wind_mage from './wind_mage.png'\nimport wind_missile from './wind_missile.png'\n\nexport const cardImages = {\n  angel_guard,\n  dark_magile,\n  earth_mage,\n  earth_missile,\n  fire_mage,\n  fire_missile,\n  hetero_ignite,\n  homo_ignite,\n  light_magile,\n  thunder_mage,\n  thunder_missile,\n  water_mage,\n  water_missile,\n  wind_mage,\n  wind_missile\n}\n","export default __webpack_public_path__ + \"static/media/angel_guard.16ea5f11.png\";","export default __webpack_public_path__ + \"static/media/dark_magile.1e723600.png\";","export default __webpack_public_path__ + \"static/media/earth_mage.e84ed39c.png\";","export default __webpack_public_path__ + \"static/media/earth_missile.c93568e4.png\";","export default __webpack_public_path__ + \"static/media/fire_mage.0e5240db.png\";","export default __webpack_public_path__ + \"static/media/fire_missile.6d251f43.png\";","export default __webpack_public_path__ + \"static/media/hetero_ignite.4942ab4f.png\";","export default __webpack_public_path__ + \"static/media/homo_ignite.0dedd4a2.png\";","export default __webpack_public_path__ + \"static/media/light_magile.787bb1b9.png\";","export default __webpack_public_path__ + \"static/media/thunder_mage.fea8f838.png\";","export default __webpack_public_path__ + \"static/media/thunder_missile.bb1203a2.png\";","export default __webpack_public_path__ + \"static/media/water_mage.c01f4c8a.png\";","export default __webpack_public_path__ + \"static/media/water_missile.fb44c368.png\";","export default __webpack_public_path__ + \"static/media/wind_mage.64b5492a.png\";","export default __webpack_public_path__ + \"static/media/wind_missile.c08191d4.png\";","import React, { FunctionComponent } from 'react'\r\nimport { ICard } from '../types'\r\nimport { makeStyles, Paper } from '@material-ui/core'\r\nimport { cardImages } from '../assets'\r\nimport { CheckCircleOutline } from 'mdi-material-ui'\r\nimport { green, red } from '@material-ui/core/colors'\r\nimport { CancelOutlined } from '@material-ui/icons'\r\n\r\nconst useStyle = makeStyles(() => ({\r\n  root: {\r\n    padding: '16px',\r\n    width: '110px',\r\n    height: '160px',\r\n    borderRadius: '8px',\r\n    cursor: 'pointer',\r\n    userSelect: 'none',\r\n    transition: 'transform 0.1s ease-in-out',\r\n    transformOrigin: 'center',\r\n    '&:hover': {\r\n      // transform: 'translateY(-50%)'\r\n    }\r\n  }\r\n}))\r\n\r\nexport const Card: FunctionComponent<{\r\n  card: ICard, onClick?: () => void, disabled?: boolean, style?: Record<string, unknown>, selected?: boolean, isDelete?: boolean\r\n}> = (\r\n  {\r\n    style,\r\n    card,\r\n    onClick,\r\n    disabled,\r\n    selected,\r\n    isDelete\r\n  }) => {\r\n  const classes = useStyle()\r\n\r\n  return (\r\n    <Paper\r\n      elevation={4}\r\n      style={{\r\n        pointerEvents: disabled ? 'none' : 'auto',\r\n        backgroundImage: `url(${cardImages[card]})`,\r\n        backgroundSize: 'cover',\r\n        position: 'relative',\r\n        ...style\r\n      }}\r\n      className={classes.root} onClick={!disabled ? onClick : undefined}>\r\n      <h2 style={{ fontFamily: 'Big Shoulders Inline Text, inherit', margin: 0, color: 'white', textShadow: '5px 3px 8px black' }}>\r\n        {card}\r\n      </h2>\r\n      {selected && <div style={{position: 'absolute', top: 0, right: 0}}>\r\n        {isDelete ? <CancelOutlined style={{ color: red[500] }} fontSize='large'/> : <CheckCircleOutline style={{ color: green[500] }} fontSize='large'/>}\r\n      </div>}\r\n      {/*<div>*/}\r\n      {/*  {selected ? 'yes' : 'no'}*/}\r\n      {/*  /!*  {hintText(card)}*!/*/}\r\n      {/*</div>*/}\r\n    </Paper>\r\n  )\r\n}\r\n","import React, { FunctionComponent, useEffect, useState } from 'react'\r\nimport { usePoker99 } from './withGameNetwork'\r\nimport { GameAction, GameActionType, PlayCardPayload } from './GameAction'\r\nimport { ChooseCardFor, Deck } from './components/Deck'\r\n// import { PlayCardAdditionalModal } from './components/PlayCardAdditionalModal'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core'\r\n\r\nexport const Game: FunctionComponent = () => {\r\n  const {\r\n    state,\r\n    dispatch,\r\n    dispatchAs,\r\n    myPlayerId,\r\n    myLocals,\r\n    hideDeck,\r\n    setHideDeck,\r\n    error,\r\n    setError,\r\n    renderedDeckId\r\n  } = usePoker99()\r\n  const [throttledRenderedId, setTrottledRenderedId] = useState(renderedDeckId)\r\n  const handleError = (e: Error): void => {\r\n    console.error('HANDLE ERROR')\r\n    setError(e.message)\r\n  }\r\n  const myTurn = state.turn === myPlayerId || myLocals.includes(state.players[state.turn])\r\n  const dispatchHelper = async (action: GameAction) => {\r\n    try{\r\n      if (state.turn === myPlayerId) {\r\n        await dispatch(action).then(() => setError(''))\r\n      } else if (myLocals.includes(state.players[state.turn])) {\r\n        await dispatchAs(state.turn, action).then(() => setError(''))\r\n      } else {\r\n        throw new Error('Not my turn')\r\n      }\r\n    } catch (e) {\r\n      handleError(e)\r\n      throw e\r\n    }\r\n  }\r\n  const playCard = async (payload: PlayCardPayload) => {\r\n    const action: GameAction = {\r\n      type: GameActionType.PLAY_CARD,\r\n      payload\r\n    }\r\n    await dispatchHelper(action).then(() => {\r\n      if (myLocals.length > 0) {\r\n        setHideDeck(true)\r\n      }\r\n    })\r\n  }\r\n  const discardCard = async (payload: PlayCardPayload) => {\r\n    const action: GameAction = {\r\n      type: GameActionType.DISCARD_CARD,\r\n      payload\r\n    }\r\n    await dispatchHelper(action)\r\n  }\r\n  const takeHit = async () => {\r\n    const action: GameAction = {\r\n      type: GameActionType.TAKE_HIT,\r\n    }\r\n    await dispatchHelper(action)\r\n  }\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setTrottledRenderedId(renderedDeckId)\r\n    }, 500)\r\n  }, [renderedDeckId])\r\n  const again = async (): Promise<void> => {\r\n    await dispatch({\r\n      type: GameActionType.END\r\n    }).catch(handleError)\r\n  }\r\n  let chooseCardFor = ChooseCardFor.RESPOND_PLAY\r\n  if(state.stage.length === 0) {\r\n    chooseCardFor = ChooseCardFor.FIRST_PLAY\r\n  }\r\n  if(throttledRenderedId !== undefined && throttledRenderedId !== null && state.playerDeck[throttledRenderedId].length > state.playerHp[throttledRenderedId]) {\r\n    chooseCardFor = ChooseCardFor.DISCARD\r\n  }\r\n  const handleCardChoose = async (payload: PlayCardPayload) => {\r\n    if(chooseCardFor === ChooseCardFor.DISCARD) {\r\n      await discardCard(payload)\r\n    } else {\r\n      await playCard(payload)\r\n    }\r\n  }\r\n  return (\r\n    <div style={{ pointerEvents: 'all', color: 'white' }}>\r\n      {state.started && myPlayerId !== undefined &&\r\n      <Deck\r\n        cards={state.playerDeck[throttledRenderedId ?? myPlayerId]}\r\n        onCardsChoose={handleCardChoose}\r\n        chooseCardFor={chooseCardFor}\r\n        hide={hideDeck}\r\n        reveal={() => setHideDeck(false)}\r\n        takeHit={takeHit}\r\n        myTurn={myTurn}\r\n      />}\r\n      <div style={{ maxHeight: '50%' }}>\r\n        {state.logs.slice().reverse().map((s, k) => <div key={k}>{s}</div>)}\r\n      </div>\r\n      <Dialog open={error !== ''} onClose={() => setError('')} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle>Error</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {error}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setError('')} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n","import React, { FunctionComponent, useEffect, useState } from 'react'\r\nimport { usePoker99 } from '../withGameNetwork'\r\nimport { GameActionType } from '../GameAction'\r\nimport { Card } from './Card'\r\nimport { IDeck, IMode } from '../types'\r\nimport { computeDamage } from '../utils'\r\nimport { Button } from '@material-ui/core'\r\n\r\nconst Name: FunctionComponent = (props) => (\r\n  <div {...props}/>\r\n)\r\n\r\nexport const GameRenderer = () => {\r\n  const { state, myPlayerId, dispatch } = usePoker99()\r\n  const [prevCardPayload, setPrevCardPayload] = useState<null | IDeck>(null)\r\n  const [startAnimateCard, setStartAnimateCard] = useState(false)\r\n  const [showAnimateCard, setShowAnimateCard] = useState(false)\r\n  useEffect(() => {\r\n    setShowAnimateCard(true)\r\n    setTimeout(() => {\r\n      setStartAnimateCard(true)\r\n    }, 1)\r\n    setTimeout(() => {\r\n      setPrevCardPayload(state.stage)\r\n      setStartAnimateCard(false)\r\n      setShowAnimateCard(false)\r\n    }, 300)\r\n  }, [state.lastAction])\r\n  const mp = (id: number): number => (id + state.playerHp.length) % state.playerHp.length\r\n  const center = {\r\n    top: '50vh',\r\n    left: '50vw'\r\n  }\r\n  const again = async (): Promise<void> => {\r\n    await dispatch({\r\n      type: GameActionType.END\r\n    }).catch(console.error)\r\n  }\r\n  const status = (() => {\r\n    if (state.started) {\r\n      if(state.winner !== null) {\r\n        return `Loser is ${state.players[state.winner]}`\r\n      }\r\n      if (state.playerDeck[state.turn].length > state.playerHp[state.turn]) {\r\n        return `${state.players[state.turn]} discard card til ${state.playerHp[state.turn]}`\r\n      }\r\n      if (state.stage.length === 0) {\r\n        return `${state.players[state.turn]} initializing transfer`\r\n      } else {\r\n        return `${state.players[state.turn]} responding to ${state.mode === IMode.HOMO ? 'homo' : 'hetero'} transfer. Current damage: ${computeDamage(state)}`\r\n      }\r\n    }\r\n    return undefined\r\n  })()\r\n  const hint = (() => {\r\n    if(state.started) {\r\n      if(state.winner !== null) {\r\n        return `Game Over`\r\n      }\r\n      if(state.duel) {\r\n        return 'DUEL! NO Function card and each hit will deduct 1 more hp!'\r\n      }\r\n      if(state.ignited) {\r\n        return 'IGNITED! Respond only with same ignited or angel guard!'\r\n      }\r\n    }\r\n    return undefined\r\n  })()\r\n  return (\r\n    !state.started\r\n      ? <div\r\n        style={{ backgroundColor: 'green', position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, color: 'white' }}\r\n      />\r\n      : <div\r\n        style={{\r\n          backgroundColor: 'green',\r\n          position: 'fixed',\r\n          top: 0,\r\n          left: 0,\r\n          right: 0,\r\n          bottom: 0,\r\n          color: 'white',\r\n          boxShadow: state.duel ? 'inset 0 0 100px #ff9d9d' : undefined,\r\n          transition: 'box-shadow 0.3s ease-in-out'\r\n        }}>\r\n      <div style={{display: 'flex', justifyContent: 'space-around', margin: 'auto'}}>\r\n        {\r\n          new Array(state.players.length).fill(0).map((_, k) => mp(k + (myPlayerId ?? 0))).filter(id => id !== (myPlayerId ?? 0)).map(id => (\r\n            <div style={{border: `solid ${state.turn === id ? 'red' : 'transparent'} 2px`, padding: '16px 32px'}}>\r\n              {state.players[id]} : {state.playerHp[id]}\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n        {/*{myPlayerId === undefined && <Name offset={0}/>}*/}\r\n        {prevCardPayload !== null &&\r\n        <div style={{ position: 'absolute', ...center }}>\r\n          <div style={{ transform: 'translate(-50%,-50%)', textAlign: 'center' }}>\r\n            {hint && <h3>{hint}</h3>}\r\n            <h1>{status}</h1>\r\n            {state.winner !== undefined && state.winner !== null && <div>\r\n              <Button variant=\"contained\" color='primary' onClick={again}>again</Button>\r\n            </div>}\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n              {prevCardPayload.map(card => <div style={{ padding: '8px' }}><Card card={card} disabled/></div>)}\r\n            </div>\r\n          </div>\r\n        </div>}\r\n        {showAnimateCard && state.lastAction !== null && <div style={{\r\n          display: 'flex',\r\n          position: 'absolute',\r\n          left: '50vw',\r\n          top: startAnimateCard ? '50vh' : state.lastAction.playerId === myPlayerId ? '100vh' : '-100%',\r\n          transition: ['top', 'bottom', 'left', 'right'].map(s => `${s} 0.2s ease-in-out`).join(',')\r\n        }}>\r\n          <div style={{ transform: 'translate(-50%,-50%)', display: 'flex' }}>\r\n            {state.lastAction.cards.map(card => <div style={{ padding: '8px' }}><Card card={card} disabled/></div>)}\r\n          </div>\r\n        </div>}\r\n        <h3 style={{ position: 'absolute', bottom: 0, right: '20px' }}>Draw Deck: {state.drawDeck.length}</h3>\r\n      </div>\r\n  )\r\n}\r\n","import { en } from './en'\r\nimport { zh } from './zh'\r\n\r\nexport const i18ns = {\r\n  en,\r\n  zh\r\n}\r\n","import { gamenetI18n } from 'gamenet-material'\r\nimport React from 'react'\r\n\r\nexport const en = {\r\n  ...gamenetI18n.en,\r\n  magile: 'Magile',\r\n  howToPlay: 'How To Play',\r\n  howToPlayContent: (\r\n    <div>\r\n      TBA\r\n    </div>\r\n  )\r\n}\r\n","import { gamenetI18n } from 'gamenet-material'\r\nimport React from 'react'\r\n\r\nexport const zh = {\r\n  ...gamenetI18n.zh,\r\n  magile: '魔法飛彈大作戰',\r\n  howToPlay: '玩法',\r\n  howToPlayContent: (\r\n    <div>\r\n      還沒有哦\r\n    </div>\r\n  )\r\n}\r\n","import React, { FunctionComponent } from 'react'\nimport { usePoker99, withGameNetwork } from './withGameNetwork'\nimport { GamePagesSlider, Home, LanguageButton, Room, useGamenetI18n, withGamenetI18n } from 'gamenet-material'\nimport { Game } from './Game'\nimport { GameRenderer } from './components/GameRenderer'\nimport { i18ns } from './i18ns'\nimport { DialogContent } from '@material-ui/core'\n\nconst App: FunctionComponent = withGamenetI18n({ i18ns })(withGameNetwork(() => {\n  const network = usePoker99()\n  const { i18n } = useGamenetI18n()\n  return (\n    <GamePagesSlider gameAppState={network.gameAppState} fullPage={[false, false, true]} GameRenderer={<GameRenderer/>}>\n      <Home {...network} gameName={i18n.magile}>\n        <DialogContent>\n          <h2>{i18n.howToPlay}</h2>\n          <div>{i18n.howToPlayContent}</div>\n        </DialogContent>\n      </Home>\n      <Room {...network} />\n      <Game/>\n      <div style={{ position: 'fixed', top: 0, right: 0, zIndex: 100 }}>\n        <LanguageButton/>\n      </div>\n    </GamePagesSlider>\n  )\n}))\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}