{"version":3,"sources":["../node_modules/peerjs/dist sync","GameAction.ts","types.ts","GameState.ts","components/Deck.tsx","constants.ts","utils.ts","GameReducer.ts","aiAction.ts","withGameNetwork.tsx","assets/index.ts","assets/angel_guard.png","assets/dark_magile.png","assets/earth_mage.png","assets/earth_missile.png","assets/fire_mage.png","assets/fire_missile.png","assets/hetero_ignite.png","assets/homo_ignite.png","assets/light_magile.png","assets/thunder_mage.png","assets/thunder_missile.png","assets/water_mage.png","assets/water_missile.png","assets/wind_mage.png","assets/wind_missile.png","components/Card.tsx","Game.tsx","components/GameRenderer.tsx","i18ns/index.ts","i18ns/en.tsx","i18ns/zh.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","GameActionType","ICard","IMode","ICardType","ICardColor","GameState","maxPlayer","minPlayer","turn","direction","points","drawDeck","stage","mode","trashDeck","playerDeck","playerHp","logs","lastAction","ignited","duel","GenericBoardGameState","ChooseCardFor","allColors","EARTH","WATER","FIRE","WIND","THUNDER","LIGHT","DARK","cardCount","EARTH_MAGE","WATER_MAGE","FIRE_MAGE","WIND_MAGE","THUNDER_MAGE","EARTH_MISSILE","WATER_MISSILE","FIRE_MISSILE","WIND_MISSILE","THUNDER_MISSILE","LIGHT_MAGILE","DARK_MAGILE","HOMO_IGNITE","HETERO_IGNITE","ANGEL_GUARD","basicDamage","count","HOMO","HETERO","getCardType","card","MAGE","MISSILE","MAGILE","IGNITE","areCardsOfTypeOrMagile","cards","type","reduce","prev","curr","cardType","getCardColor","NONE","isActionCard","includes","areCardsOfDifferentColor","seenColor","Set","filteredCards","filter","forEach","add","size","length","buildError","messageKey","values","variables","JSON","stringify","withDrawCard","playerId","state","player","players","undefined","shuffle","hand","slice","withEnsureHp1CardNotFunctionCard","compose","withDiscardCard","withInitGame","prevState","winner","fullDeck","Object","entries","flatMap","Array","fill","index","indexOf","splice","withPutToPlayed","withCardNumberValidation","_","withCardTypeValidation","map","withFirstPlayValidation","withPlayHomo","cardColor","color","areCardsOfColor","withPlayHetero","find","hasCardColorNone","stageColors","colorsPlayed","colorsCanPlay","type2","withPlayIgnite","withPlayAngleGuard","withStateChangedValidation","withIncrementTurn","nextPlayerId","withCheckWin","playerIdLose","findIndex","hp","withCheckHit","ableToResponse","withHit","igniteCount","hit","withCheckDiscardToHp","payload","withClearStage","GameReducer","action","peerId","nameDict","members","GameActionTypes","START","PLAY_CARD","nextState","playCard","withPlayCard","parse","DISCARD_CARD","step","TAKE_HIT","END","started","ready","sortDict","dict","sort","a","b","buildPlayCardAction","aiFirstCard","byColor","previousValue","currentValue","countByColor","byType","excludeMagile","k","record","countByTypeUniqueColor","nextPlayerHp","console","log","magileCount","aiAction","max","amountToDiscard","discards","push","Math","floor","random","aiDiscard","stageColor","homoIgnite","angelGuard","stageType","playableColors","has","delete","heteroIgnite","warn","aiPlayCard","Poker99Context","createContext","usePoker99","network","useContext","cardImages","angel_guard","dark_magile","earth_mage","earth_missile","fire_mage","fire_missile","hetero_ignite","homo_ignite","light_magile","thunder_mage","thunder_missile","water_mage","water_missile","wind_mage","wind_missile","useStyle","makeStyles","root","padding","width","height","borderRadius","cursor","userSelect","transition","transformOrigin","Card","style","onClick","disabled","selected","isDelete","classes","i18n","useGamenetI18n","Paper","elevation","pointerEvents","backgroundImage","backgroundSize","position","className","fontFamily","margin","textShadow","top","right","CancelOutlined","red","fontSize","green","DURATION","PlaceHolder","maxWidth","useState","setWidth","useEffect","setTimeout","minWidth","Deck","hide","reveal","onCardsChoose","chooseCardFor","takeHit","myTurn","playedIndices","setPlayedIndices","hovering","setHovering","playGetCardAnimation","setPlayGetCardAnimation","discardingAnimation","setDiscardingAnimation","useReducer","dispatchSelected","handleCardClick","handlePlayCards","param","laterSetDiscardingAnimation","DISCARD","then","from","catch","error","withMaxWidth","children","noPad","onMouseEnter","onTouchStart","onMouseLeave","onTouchEnd","bottom","left","zIndex","transform","textAlign","display","Button","variant","Visibility","RESPOND_PLAY","title","window","confirm","areYouSureYouWantToTakeHit","Flag","marginLeft","respond","PlayArrow","FIRST_PLAY","initializeHomoTransfer","initializeHeteroTransfer","trash","Delete","notYourTurn","justifyContent","flexWrap","cardsToRender","j","i","getPlayedCards","Game","dispatch","dispatchAs","myPlayerId","myLocals","hideDeck","setHideDeck","setError","renderedDeckId","throttledRenderedId","setTrottledRenderedId","handleError","message","varName","i18nKey","key","join","i18nSub","decodeError","dispatchHelper","discardCard","handleCardChoose","maxHeight","reverse","s","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","GameRenderer","prevCardPayload","setPrevCardPayload","startAnimateCard","setStartAnimateCard","showAnimateCard","setShowAnimateCard","again","status","loserIs$player","$playerDiscardCardTil$cardCount","$playerInitializingTransfer","$playerRespondTo$modeTransfer","damage","useMemo","computeDamage","hint","gameOver","duelHint","ignitedHint","backgroundColor","boxShadow","border","current$damage","marginRight","marginBottom","i18ns","en","gamenetI18n","gameName","howToPlay","howToPlayContent","zh","App","withGamenetI18n","Component","WithGameNetwork","props","useBoardGameNetwork","myAis","n","clearTimeout","Provider","value","displayName","withGameNetwork","gameAppState","fullPage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c5df673.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 196;","// GameAction.ts\r\n\r\nimport { GameActionTypes, GenericBoardGameAction } from 'gamenet'\r\nimport { ICard, IMode } from './types'\r\nimport { NetworkAction } from 'smnet'\r\n\r\nexport enum GameActionType {\r\n  PLAY_CARD,\r\n  END,\r\n  DISCARD_CARD,\r\n  TAKE_HIT\r\n}\r\n\r\nexport interface PlayCardPayload {\r\n  cards: ICard[]\r\n  mode?: IMode\r\n}\r\n\r\nexport type GameAction = (({\r\n  type: GameActionType.DISCARD_CARD\r\n  payload: PlayCardPayload\r\n} | {\r\n  type: GameActionType.PLAY_CARD\r\n  payload: PlayCardPayload\r\n} | {\r\n  type: GameActionType.END\r\n} | {\r\n  type: GameActionType.TAKE_HIT\r\n} | {\r\n  type: GameActionTypes\r\n  payload: never\r\n}) & NetworkAction) | GenericBoardGameAction\r\n","import { GameState } from './GameState'\r\nimport { PlayCardPayload } from './GameAction'\r\n\r\nexport enum ICard {\r\n  EARTH_MAGE = 'earth_mage',\r\n  WATER_MAGE = 'water_mage',\r\n  FIRE_MAGE = 'fire_mage',\r\n  WIND_MAGE = 'wind_mage',\r\n  THUNDER_MAGE = 'thunder_mage',\r\n  EARTH_MISSILE = 'earth_missile',\r\n  WATER_MISSILE = 'water_missile',\r\n  FIRE_MISSILE = 'fire_missile',\r\n  WIND_MISSILE = 'wind_missile',\r\n  THUNDER_MISSILE = 'thunder_missile',\r\n  LIGHT_MAGILE = 'light_magile',\r\n  DARK_MAGILE = 'dark_magile',\r\n  HOMO_IGNITE = 'homo_ignite',\r\n  HETERO_IGNITE = 'hetero_ignite',\r\n  ANGEL_GUARD = 'angel_guard'\r\n}\r\n\r\nexport enum IMode {\r\n  HOMO='homo',\r\n  HETERO='hetero'\r\n}\r\n\r\nexport type IDeck = ICard[]\r\n\r\nexport type IStateMapper = (prevState: GameState) => GameState\r\n\r\nexport type IsCard = (card: ICard) => boolean\r\n\r\nexport type IPlayCard = (payload: PlayCardPayload, playerId: number) => IStateMapper\r\n\r\nexport enum ICardType {\r\n  MAGE='mage',\r\n  MISSILE='missile',\r\n  MAGILE='magile',\r\n  IGNITE='ignite',\r\n  ANGEL_GUARD='angel_guard'\r\n}\r\n\r\nexport enum ICardColor {\r\n  NONE= 'none',\r\n  EARTH= 'earth',\r\n  WATER= 'water',\r\n  FIRE= 'fire',\r\n  WIND= 'wind',\r\n  THUNDER= 'thunder',\r\n  LIGHT= 'light',\r\n  DARK= 'dark'\r\n}\r\n\r\nexport const allColors: ICardColor[] = [\r\n  ICardColor.EARTH,\r\n  ICardColor.WATER,\r\n  ICardColor.FIRE,\r\n  ICardColor.WIND,\r\n  ICardColor.THUNDER,\r\n  ICardColor.LIGHT,\r\n  ICardColor.DARK,\r\n]\r\n","// Poker99State.ts\r\n\r\nimport { GenericBoardGameState } from 'gamenet'\r\nimport { IDeck, IMode } from './types'\r\nimport { PlayCardPayload } from './GameAction'\r\n\r\nexport class GameState extends GenericBoardGameState {\r\n  [key: string]: unknown | undefined\r\n\r\n  maxPlayer = 8\r\n  minPlayer = 2\r\n  turn = 0\r\n  direction = 1\r\n  points = 0\r\n  drawDeck: IDeck = []\r\n  stage: IDeck = []\r\n  mode: IMode | null = null\r\n  trashDeck: IDeck = []\r\n  playerDeck: IDeck[] = []\r\n  playerHp: number[] = []\r\n  logs: string[] = []\r\n  lastAction: PlayCardPayload & { playerId: number } | null = null\r\n  ignited = false\r\n  duel = false\r\n}\r\n","import React, { FunctionComponent, ReactNode, useEffect, useReducer, useState } from 'react'\nimport { ICard, IMode } from '../types'\nimport { Card } from './Card'\nimport { Button } from '@material-ui/core'\nimport { Delete, Flag, PlayArrow, Visibility } from '@material-ui/icons'\nimport { PlayCardPayload } from '../GameAction'\nimport { Equal, NotEqual } from 'mdi-material-ui'\nimport { useGamenetI18n } from 'gamenet-material'\n\nconst DURATION = 0.3\n\nconst PlaceHolder: FunctionComponent<{ maxWidth: string, style?: Record<string, unknown> }> = ({ maxWidth, style }) => {\n  const [width, setWidth] = useState(maxWidth)\n  useEffect(() => {\n    setTimeout(() => {\n      setWidth('0')\n    }, 1)\n  }, [])\n  return (\n    <div style={{\n      maxWidth: width,\n      minWidth: width,\n      transition: `min-width ${DURATION}s ease-in-out`,\n      position: 'relative',\n      ...style\n    }}/>\n  )\n}\n\nexport enum ChooseCardFor {\n  FIRST_PLAY,\n  RESPOND_PLAY,\n  DISCARD\n}\n\nexport const Deck: FunctionComponent<{\n  cards: ICard[], hide: boolean, reveal: () => void, onCardsChoose: (payload: PlayCardPayload) => Promise<void>, chooseCardFor: ChooseCardFor, takeHit: () => Promise<void>, myTurn?: boolean\n}> = ({ cards, hide, reveal, onCardsChoose, chooseCardFor, takeHit, myTurn }) => {\n  const [playedIndices, setPlayedIndices] = useState<number[]>([])\n  const [hovering, setHovering] = useState<number | null>(null)\n  const [playGetCardAnimation, setPlayGetCardAnimation] = useState(false)\n  const [discardingAnimation, setDiscardingAnimation] = useState(false)\n  const {i18n} = useGamenetI18n()\n  const [selected, dispatchSelected] = useReducer<(prev: Set<number>, action: { type: string, payload?: number }) => Set<number>>((prev, {\n    type,\n    payload\n  }) => {\n    switch (type) {\n      case 'add':\n        if (payload !== undefined) {\n          prev.add(payload)\n        }\n        return new Set(prev)\n      case 'delete':\n        if (payload !== undefined) {\n          prev.delete(payload)\n        }\n        return new Set(prev)\n      case 'clear':\n        return new Set()\n      default:\n        return prev\n    }\n  }, new Set<number>())\n  const handleCardClick = async (card: ICard, index: number) => {\n    if (selected.has(index)) {\n      dispatchSelected({ type: 'delete', payload: index })\n    } else {\n      dispatchSelected({ type: 'add', payload: index })\n    }\n  }\n  const handlePlayCards = (param: unknown) => {\n    const mode = param === IMode.HOMO || param === IMode.HETERO ? param : undefined\n    const laterSetDiscardingAnimation = chooseCardFor === ChooseCardFor.DISCARD\n    onCardsChoose({ cards: cards.filter((_, k) => selected.has(k)), mode })\n      .then(() => {\n        setDiscardingAnimation(laterSetDiscardingAnimation)\n        setHovering(null)\n        setPlayedIndices(Array.from(selected))\n        dispatchSelected({ type: 'clear' })\n        setTimeout(() => {\n          setPlayGetCardAnimation(true)\n        }, 1)\n        setTimeout(() => {\n          setPlayGetCardAnimation(false)\n          setPlayedIndices([])\n          setDiscardingAnimation(false)\n        }, 500)\n      })\n      .catch(e => {\n        console.error(e)\n      })\n  }\n  const getPlayedCards = () => {\n    const cardsToRender = []\n    let j = 0\n    for (let i = 0; i < cards.length; i++) {\n      if (playedIndices.includes(i)) {\n        cardsToRender.push(null)\n      } else {\n        cardsToRender.push(cards[j])\n        j++\n      }\n    }\n    return discardingAnimation ? [...cardsToRender, ...cards.slice(j)] : cardsToRender\n  }\n  const withMaxWidth = (children: ReactNode, index: number, noPad = false) => (\n    <div\n      style={{\n        padding: noPad ? 0 : '8px',\n        maxWidth: `calc(100vw / ${cards.length + 2})`,\n        transition: `max-width ${DURATION/3}s ease-in-out`\n      }}\n      onMouseEnter={() => setHovering(index)}\n      onTouchStart={() => setHovering(index)}\n      onMouseLeave={() => setHovering(null)}\n      onTouchEnd={() => setHovering(null)}>\n      {children}\n    </div>\n  )\n  return <div style={{\n    position: 'fixed',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 1,\n    transform: hide ? 'translateY(100%)' : 'translateY(40%)',\n    transition: `transform 0.3s ease-in-out`,\n    pointerEvents: 'none'\n  }}>\n    <div style={{\n      textAlign: 'center',\n      transform: 'translateY(-80px)',\n      margin: 'auto',\n      display: 'block',\n      pointerEvents: 'all'\n    }}>\n      {myTurn ? <>\n      {hide && <Button variant='contained' onClick={reveal}>\n        <Visibility/>\n      </Button>}\n      {!hide && chooseCardFor === ChooseCardFor.RESPOND_PLAY && <>\n        <Button variant='contained'\n          title={i18n.takeHit}\n          color='secondary'\n          onClick={() => window.confirm(i18n.areYouSureYouWantToTakeHit) && takeHit().catch(console.error)}\n        >\n          <Flag/>\n        </Button>\n        <Button style={{marginLeft: '8px'}} variant='contained'\n          title={i18n.respond}\n          color='primary'\n          onClick={handlePlayCards}\n        >\n          <PlayArrow/>\n        </Button>\n      </>}\n      {!hide && chooseCardFor === ChooseCardFor.FIRST_PLAY && <>\n        <Button variant='contained'\n          title={i18n.initializeHomoTransfer}\n          color='primary'\n          onClick={() => handlePlayCards(IMode.HOMO)}\n        >\n          <Equal/>\n        </Button>\n        <Button style={{marginLeft: '8px'}} variant='contained'\n          title={i18n.initializeHeteroTransfer}\n          color='primary'\n          onClick={() => handlePlayCards(IMode.HETERO)}\n        >\n          <NotEqual/>\n        </Button>\n      </>}\n      {!hide && chooseCardFor === ChooseCardFor.DISCARD && <>\n        <Button variant='contained'\n          color='secondary'\n          title={i18n.trash}\n          onClick={handlePlayCards}\n        >\n          <Delete/>\n        </Button>\n      </>}\n      </>: i18n.notYourTurn}\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'nowrap' }}>\n      {\n        getPlayedCards().map((card, index) => (\n          card === null\n            ? <PlaceHolder key={index} maxWidth={`calc(100vw / ${cards.length + 2} + 16px)`}/>\n            : withMaxWidth(<Card\n              card={card}\n              onClick={() => handleCardClick(card, index)}\n              disabled={hide}\n              style={{ transform: (hovering === index || selected.has(index)) ? 'translateY(-30%)' : undefined }}\n              selected={selected.has(index)}\n              isDelete={chooseCardFor === ChooseCardFor.DISCARD}\n            />, index)))\n      }\n      {playedIndices.length > 0 && !discardingAnimation && <div style={{\n        maxWidth: playGetCardAnimation ? `calc((100vw / ${cards.length + 2} + 16px) * ${playedIndices.length})` : '0',\n        transition: `max-width ${DURATION}s ease-in-out`,\n        display: 'flex',\n        flexWrap: 'nowrap'\n      }}>\n        {\n          cards.slice(cards.length - playedIndices.length).map((card, index) => (\n            withMaxWidth(\n              <Card\n                card={card}\n                onClick={() => handleCardClick(card, index)}\n                disabled={hide}\n                style={{ transform: !playGetCardAnimation ? 'translateX(100vw)' : undefined }}\n                selected={selected.has(index)}\n              />\n              , index + cards.length, false\n            )\n          ))\n        }\n      </div>}\n    </div>\n  </div>\n}\n","import { ICard } from './types'\r\n\r\nexport const cardCount = {\r\n  [ICard.EARTH_MAGE]: 9,\r\n  [ICard.WATER_MAGE]: 9,\r\n  [ICard.FIRE_MAGE]: 9,\r\n  [ICard.WIND_MAGE]: 9,\r\n  [ICard.THUNDER_MAGE]: 9,\r\n  [ICard.EARTH_MISSILE]: 9,\r\n  [ICard.WATER_MISSILE]: 9,\r\n  [ICard.FIRE_MISSILE]: 9,\r\n  [ICard.WIND_MISSILE]: 9,\r\n  [ICard.THUNDER_MISSILE]: 9,\r\n  [ICard.LIGHT_MAGILE]: 3,\r\n  [ICard.DARK_MAGILE]: 3,\r\n  [ICard.HOMO_IGNITE]: 3,\r\n  [ICard.HETERO_IGNITE]: 3,\r\n  [ICard.ANGEL_GUARD]: 6\r\n}\r\n","import { ICard, ICardColor, ICardType, IMode } from './types'\r\nimport { GameState } from './GameState'\r\nimport { i18nSub } from 'gamenet-material'\r\n\r\nexport const basicDamage = (count: number, mode: IMode | null): number => {\r\n  switch (mode) {\r\n    case IMode.HOMO:\r\n      switch (count) {\r\n        case 1:\r\n        case 2:\r\n        case 3:\r\n        case 4:\r\n          return 1\r\n        case 5:\r\n        case 6:\r\n        case 7:\r\n          return 2\r\n        default:\r\n          return 3\r\n      }\r\n    case IMode.HETERO:\r\n      switch (count) {\r\n        case 1:\r\n        case 2:\r\n        case 3:\r\n        case 4:\r\n          return 1\r\n        case 5:\r\n        case 6:\r\n          return 2\r\n        default:\r\n          return 3\r\n      }\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n\r\nexport const computeDamage = (state: GameState) => {\r\n  const igniteCount = state.stage.filter(card => getCardType(card) === ICardType.IGNITE).length\r\n  const basic = basicDamage(state.stage.filter(card => getCardColor(card) !== ICardColor.NONE).length, state.mode)\r\n  return basic + igniteCount + (state.duel ? 1 : 0)\r\n}\r\n\r\nexport const getCardType = (card: ICard): ICardType => {\r\n  switch (card) {\r\n    case ICard.EARTH_MAGE:\r\n    case ICard.WATER_MAGE:\r\n    case ICard.FIRE_MAGE:\r\n    case ICard.WIND_MAGE:\r\n    case ICard.THUNDER_MAGE:\r\n      return ICardType.MAGE\r\n    case ICard.EARTH_MISSILE:\r\n    case ICard.WATER_MISSILE:\r\n    case ICard.FIRE_MISSILE:\r\n    case ICard.WIND_MISSILE:\r\n    case ICard.THUNDER_MISSILE:\r\n      return ICardType.MISSILE\r\n    case ICard.LIGHT_MAGILE:\r\n    case ICard.DARK_MAGILE:\r\n      return ICardType.MAGILE\r\n    case ICard.HETERO_IGNITE:\r\n    case ICard.HOMO_IGNITE:\r\n      return ICardType.IGNITE\r\n    case ICard.ANGEL_GUARD:\r\n      return ICardType.ANGEL_GUARD\r\n  }\r\n}\r\n\r\nexport const areCardsOfTypeOrMagile = (cards: ICard[], type: ICardType): boolean => {\r\n  return cards.reduce<boolean>((prev, curr) => {\r\n    const cardType = getCardType(curr)\r\n    return prev && (cardType === type || cardType === ICardType.MAGILE)\r\n  }, true)\r\n}\r\n\r\nexport const getCardColor = (card: ICard): ICardColor => {\r\n  switch (card) {\r\n    case ICard.EARTH_MAGE:\r\n    case ICard.EARTH_MISSILE:\r\n      return ICardColor.EARTH\r\n    case ICard.WATER_MAGE:\r\n    case ICard.WATER_MISSILE:\r\n      return ICardColor.WATER\r\n    case ICard.FIRE_MAGE:\r\n    case ICard.FIRE_MISSILE:\r\n      return ICardColor.FIRE\r\n    case ICard.WIND_MAGE:\r\n    case ICard.WIND_MISSILE:\r\n      return ICardColor.WIND\r\n    case ICard.THUNDER_MAGE:\r\n    case ICard.THUNDER_MISSILE:\r\n      return ICardColor.THUNDER\r\n    case ICard.LIGHT_MAGILE:\r\n      return ICardColor.LIGHT\r\n    case ICard.DARK_MAGILE:\r\n      return ICardColor.DARK\r\n    default:\r\n      return ICardColor.NONE\r\n  }\r\n}\r\n\r\nexport const isActionCard = (card: ICard) => {\r\n  return ![ICardType.MISSILE, ICardType.MAGE].includes(getCardType(card))\r\n}\r\n\r\nexport const areCardsOfColor = (cards: ICard[], color: ICardColor): boolean => {\r\n  return cards.reduce<boolean>((prev, curr) => {\r\n    return prev && getCardColor(curr) === color\r\n  }, true)\r\n}\r\n\r\nexport const areCardsOfDifferentColor = (cards: ICard[]): boolean => {\r\n  const seenColor = new Set()\r\n  const filteredCards = cards.filter((card) => getCardColor(card) !== ICardColor.NONE)\r\n  filteredCards.forEach((card) => {\r\n    seenColor.add(getCardColor(card))\r\n  })\r\n  return seenColor.size === filteredCards.length\r\n}\r\n\r\nexport const hasCardColorNone = (cards: ICard[]): boolean => {\r\n  return !!cards.find((card) => getCardColor(card) === ICardColor.NONE)\r\n}\r\n\r\nexport const canPlayCard = (state: GameState, card: ICard): boolean => {\r\n  const { mode, duel, ignited } = state\r\n  if (duel) {\r\n    if ([ICardType.MAGILE, ICardType.IGNITE, ICardType.ANGEL_GUARD].includes(getCardType(card))) {\r\n      return false\r\n    }\r\n  }\r\n  if(state.stage.length === 0){\r\n    return !isActionCard(card)\r\n  }\r\n  if (card === ICard.ANGEL_GUARD) {\r\n    return true\r\n  }\r\n  if (ignited) {\r\n    if (![ICardType.IGNITE, ICardType.ANGEL_GUARD].includes(getCardType(card))) {\r\n      return false\r\n    }\r\n  }\r\n  if(mode === IMode.HOMO) {\r\n    return card === ICard.HOMO_IGNITE || getCardColor(card) === getCardColor(state.stage[0])\r\n  }\r\n  if(mode === IMode.HETERO) {\r\n    return card === ICard.HETERO_IGNITE || (areCardsOfTypeOrMagile([card], getCardType(state.stage[0])) && areCardsOfDifferentColor([...state.stage, card]))\r\n  }\r\n  console.warn('canPlayCard EDGECASE!!!', state, card)\r\n  return false\r\n}\r\n\r\nexport const randInt = (max: number) => {\r\n  return Math.floor(Math.random()*max)\r\n}\r\n\r\nexport const buildError = (messageKey: string, values?: Record<string, string>, variables?: Record<string, string | string[]>): Error => {\r\n  return new Error(JSON.stringify({messageKey, values: values ?? {}, variables}))\r\n}\r\n\r\nexport const decodeError = (error: Error, i18n: Record<string, unknown>): string => {\r\n  const {messageKey, values, variables} = JSON.parse(error.message)\r\n  Object.entries((variables??{}) as Record<string, string | string[]>).forEach(([varName, i18nKey]) => {\r\n    if(typeof i18nKey ==='string') {\r\n      values[varName] = i18n[i18nKey]\r\n    } else {\r\n      values[varName] = i18nKey.map(key => i18n[key]).join(', ')\r\n    }\r\n  })\r\n  return i18nSub(i18n[messageKey] as string, { ...values })\r\n}\r\n\r\n","import { NetworkReducer } from 'smnet'\r\nimport { GameState } from './GameState'\r\nimport { GameAction, GameActionType, PlayCardPayload } from './GameAction'\r\nimport { allColors, ICard, ICardColor, ICardType, IDeck, IMode, IPlayCard, IStateMapper } from './types'\r\nimport { compose, GameActionTypes, shuffle } from 'gamenet'\r\nimport { cardCount } from './constants'\r\nimport {\r\n  areCardsOfColor,\r\n  areCardsOfDifferentColor,\r\n  areCardsOfTypeOrMagile,\r\n  basicDamage, buildError,\r\n  getCardColor,\r\n  getCardType,\r\n  hasCardColorNone\r\n} from './utils'\r\n\r\nconst getFullDeck = (): IDeck => {\r\n  return Object.entries(cardCount).flatMap(([card, count]) => Array(count).fill(card))\r\n}\r\n\r\nconst withDrawCard: (playerId: number) => IStateMapper = playerId => state => {\r\n  if (state.playerDeck[playerId].length >= state.playerHp[playerId]) {\r\n    throw buildError('cannotDraw$playerAlreadyHas$countCards', {\r\n      player: state.players[playerId],\r\n      count: `${state.playerHp[playerId]}`\r\n    })\r\n  }\r\n  const card = state.drawDeck[0]\r\n  if (card === undefined) {\r\n    return withDrawCard(playerId)({ ...state, drawDeck: shuffle(state.trashDeck), trashDeck: [] })\r\n  } else {\r\n    const hand = [...state.playerDeck[playerId], card]\r\n    const playerDeck = [...state.playerDeck]\r\n    playerDeck[playerId] = hand\r\n    if (hand.length < state.playerHp[playerId]) {\r\n      return withDrawCard(playerId)({ ...state, playerDeck, drawDeck: state.drawDeck.slice(1) })\r\n    } else {\r\n      return { ...state, playerDeck, drawDeck: state.drawDeck.slice(1) }\r\n    }\r\n  }\r\n}\r\n\r\nconst withEnsureHp1CardNotFunctionCard: (playerId: number) => IStateMapper = playerId => state => {\r\n  if (state.playerHp[playerId] === 1) {\r\n    const cardType = getCardType(state.playerDeck[playerId][0])\r\n    if (state.playerDeck[playerId].length === 1 && cardType !== ICardType.MAGE && cardType !== ICardType.MISSILE)\r\n      return compose(\r\n        withEnsureHp1CardNotFunctionCard(playerId),\r\n        withDrawCard(playerId),\r\n        withDiscardCard({ cards: state.playerDeck[playerId] }, playerId)\r\n      )(state)\r\n  }\r\n  return state\r\n}\r\n\r\nconst withInitGame: IStateMapper = (prevState: GameState) => {\r\n  prevState = {\r\n    ...prevState,\r\n    turn: 0,\r\n    direction: 1,\r\n    points: 0,\r\n    drawDeck: [],\r\n    stage: [],\r\n    mode: null,\r\n    trashDeck: [],\r\n    playerDeck: [],\r\n    playerHp: [],\r\n    logs: [],\r\n    lastAction: null,\r\n    ignited: false,\r\n    duel: false,\r\n    winner: null\r\n  }\r\n  const fullDeck = getFullDeck()\r\n  prevState.drawDeck = shuffle(fullDeck)\r\n  for (let id = 0; id < prevState.players.length; id++) {\r\n    prevState.playerDeck[id] = []\r\n    prevState.playerHp[id] = 7\r\n    prevState = withDrawCard(id)(prevState)\r\n  }\r\n  return { ...prevState }\r\n}\r\n\r\nconst withDiscardCard: IPlayCard = ({ cards }, playerId) => state => {\r\n  const trashDeck = [...state.trashDeck, ...cards]\r\n  const hand = [...state.playerDeck[playerId]]\r\n  cards.forEach((card) => {\r\n    const index = hand.indexOf(card)\r\n    if (index === -1) {\r\n      throw buildError('$playerDoesNotOwnCard$card', { player: state.players[playerId] }, { card })\r\n    }\r\n    hand.splice(index, 1)\r\n  })\r\n  const playerDeck = [...state.playerDeck]\r\n  playerDeck[playerId] = hand\r\n  return { ...state, trashDeck, playerDeck }\r\n}\r\n\r\nconst withPutToPlayed: IPlayCard = ({ cards }) => (state) => {\r\n  return { ...state, stage: [...state.stage, ...cards] }\r\n}\r\n\r\nconst withCardNumberValidation: IPlayCard = (_, playerId) => (state) => {\r\n  if (state.playerDeck[playerId].length > state.playerHp[playerId]) {\r\n    throw buildError('playerCardMoreThanHp')\r\n  }\r\n  return state\r\n}\r\n\r\nconst withCardTypeValidation: IPlayCard = ({ cards }, playerId) => state => {\r\n  if (cards.length === 3) {\r\n    if (cards.map(card => getCardColor(card)).includes(ICardColor.NONE)) {\r\n      throw buildError('cannotMixIgniteAngelWithMagiles')\r\n    }\r\n    if (state.duel) {\r\n      if (cards.map(card => getCardType(card)).includes(ICardType.MAGILE)) {\r\n        throw buildError('cannotPlayFunctionDuringDuel')\r\n      }\r\n    }\r\n  } else if (cards.length === 1) {\r\n    if (state.duel) {\r\n      const cardType = getCardType(cards[0])\r\n      if ([ICardType.MAGILE, ICardType.IGNITE, ICardType.ANGEL_GUARD].includes(cardType)) {\r\n        throw buildError('cannotPlayFunctionDuringDuel')\r\n      }\r\n    }\r\n  } else {\r\n    throw buildError('canPlayOnly1Or3Cards')\r\n  }\r\n  return state\r\n}\r\n\r\nconst withFirstPlayValidation: IPlayCard = ({ cards, mode }, playerId) => (state) => {\r\n  if (state.stage.length === 0) {\r\n    if (mode === null || mode === undefined) {\r\n      throw buildError('specifyHomoOrHeteroAtFirstTransfer')\r\n    }\r\n    if (mode === IMode.HOMO && state.playerHp[(playerId + 1) % state.players.length] === 1) {\r\n      throw buildError('canOnlyDoHeteroWhenNextIs1hp')\r\n    }\r\n    if (cards.length !== 1) {\r\n      throw buildError('canOnlyPlay1CardWhenAtFirstTransfer')\r\n    }\r\n    if (getCardType(cards[0]) !== ICardType.MAGE && getCardType(cards[0]) !== ICardType.MISSILE) {\r\n      throw buildError('canOnlyPlayNonFunctionWhenAtFirstTransfer')\r\n    }\r\n    return { ...state, mode }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withPlayHomo: IPlayCard = ({ cards }) => state => {\r\n  if (state.mode === IMode.HOMO && !state.ignited) {\r\n    if (state.stage.length === 0) {\r\n      return { ...state }\r\n    }\r\n    const cardColor = getCardColor(cards[0])\r\n    if (cardColor !== ICardColor.NONE) {\r\n      if (!areCardsOfColor(cards, getCardColor(state.stage[0]))) {\r\n        throw buildError('canOnlyPlay$colorInThisHomoTransfer', {}, { color: cardColor })\r\n      }\r\n      return { ...state }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withPlayHetero: IPlayCard = ({ cards }) => state => {\r\n  if (state.mode === IMode.HETERO && !state.ignited) {\r\n    if (state.stage.length === 0) {\r\n      return { ...state }\r\n    }\r\n    if (!hasCardColorNone(cards)) {\r\n      const type = getCardType(state.stage[0])\r\n      if (!areCardsOfDifferentColor([...state.stage, ...cards])) {\r\n        const stageColors = state.stage.map(card => getCardColor(card))\r\n        const colorsPlayed = cards.map(card => getCardColor(card)).filter(color => stageColors.includes(color))\r\n        const colorsCanPlay = allColors.filter(color => !stageColors.includes(color))\r\n        throw buildError('$colorsPlayedAnd$colorsCanPlayInThisHetero$typeTransfer', {}, {\r\n          type,\r\n          type2: type,\r\n          colorsPlayed,\r\n          colorsCanPlay\r\n        })\r\n      } else {\r\n        if (!areCardsOfTypeOrMagile(cards, type)) {\r\n          if (state.duel) {\r\n            throw buildError('youMayPlay$typeOnly', {}, {type})\r\n          } else {\r\n            throw buildError('youMayPlay$typeOrMagileOnly', {}, {type})\r\n          }\r\n        } else {\r\n          return { ...state }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withPlayIgnite: IPlayCard = ({ cards }) => state => {\r\n  if (cards.length === 1) {\r\n    const card = cards[0]\r\n    if (card === ICard.HETERO_IGNITE) {\r\n      if (state.mode === IMode.HETERO) {\r\n        return { ...state, ignited: true }\r\n      } else {\r\n        throw buildError('cannotPlayHeteroIgniteDuringHomoTransfer')\r\n      }\r\n    }\r\n    if (card === ICard.HOMO_IGNITE) {\r\n      if (state.mode === IMode.HOMO) {\r\n        return { ...state, ignited: true }\r\n      } else {\r\n        throw buildError('cannotPlayHomoIgniteDuringHeteroTransfer')\r\n      }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withPlayAngleGuard: IPlayCard = ({ cards }) => state => {\r\n  if (cards.length === 1) {\r\n    if (cards[0] === ICard.ANGEL_GUARD) {\r\n      return { ...state }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withStateChangedValidation = (prevState: GameState): IPlayCard => () => state => {\r\n  if (prevState === state) {\r\n    throw buildError('invalidMove')\r\n  }\r\n  return state\r\n}\r\n\r\nexport const withIncrementTurn: IStateMapper = prevState => {\r\n  const nextPlayerId = (prevState.turn + prevState.players.length + prevState.direction) % prevState.players.length\r\n  return { ...prevState, turn: nextPlayerId }\r\n}\r\n\r\nconst withPlayCard: (playerId: number, payload: PlayCardPayload) => IStateMapper = (playerId, payload) => prevState => {\r\n  if (prevState.turn !== playerId) {\r\n    throw buildError('notYourTurn')\r\n  }\r\n  const nextState = compose(\r\n    withCheckWin,\r\n    withCheckHit,\r\n    withIncrementTurn,\r\n    withEnsureHp1CardNotFunctionCard(playerId),\r\n    withDrawCard(playerId),\r\n    ...[\r\n      withPutToPlayed,\r\n      withDiscardCard,\r\n      withStateChangedValidation(prevState),\r\n      withPlayAngleGuard,\r\n      withPlayIgnite,\r\n      withPlayHetero,\r\n      withPlayHomo,\r\n      withCardTypeValidation,\r\n      withFirstPlayValidation,\r\n      withCardNumberValidation\r\n    ].map(playCard => playCard(payload, playerId))\r\n  )(prevState)\r\n  return { ...nextState, lastAction: { ...payload, playerId } }\r\n}\r\n\r\nexport const withCheckWin: IStateMapper = state => {\r\n  const playerIdLose = state.playerHp.findIndex(hp => hp <= 0)\r\n  if (playerIdLose !== -1) {\r\n    return { ...state, winner: playerIdLose }\r\n  }\r\n  return state\r\n}\r\n\r\nexport const withCheckHit: IStateMapper = prevState => {\r\n  if (ableToResponse(prevState)) {\r\n    return prevState\r\n  } else {\r\n    return withHit(prevState)\r\n  }\r\n}\r\n\r\nconst ableToResponse = (state: GameState): boolean => {\r\n  const { ignited, duel, turn, mode } = state\r\n  const hand = state.playerDeck[turn]\r\n  if (!duel && !!hand.find(card => card === ICard.ANGEL_GUARD)) {\r\n    return true\r\n  }\r\n  if (mode === IMode.HETERO) {\r\n    if (!duel && !!hand.find(card => card === ICard.HETERO_IGNITE)) {\r\n      return true\r\n    }\r\n    if (ignited) {\r\n      return hand.includes(ICard.HETERO_IGNITE)\r\n    }\r\n    return hand\r\n      .filter(card => getCardColor(card) !== ICardColor.NONE)\r\n      .filter(card => duel ? getCardType(card) !== ICardType.MAGILE : true)\r\n      .filter(card => areCardsOfTypeOrMagile([card], getCardType(state.stage[0])))\r\n      .filter(card => !state.stage.map(card => getCardColor(card)).includes(getCardColor(card))).length > 0\r\n  } else {\r\n    if (!duel && !!hand.find(card => card === ICard.HOMO_IGNITE)) {\r\n      return true\r\n    }\r\n    if (ignited) {\r\n      return hand.includes(ICard.HOMO_IGNITE)\r\n    }\r\n    return hand\r\n      .filter(card => getCardColor(card) === getCardColor(state.stage[0]))\r\n      .length > 0\r\n  }\r\n}\r\n\r\nconst withHit = (state: GameState): GameState => {\r\n  if (state.mode !== null) {\r\n    const { turn } = state\r\n    const igniteCount = state.stage.filter(card => getCardType(card) === ICardType.IGNITE).length\r\n    const basic = basicDamage(state.stage.filter(card => getCardColor(card) !== ICardColor.NONE).length, state.mode)\r\n    const hit = basic + igniteCount + (state.duel ? 1 : 0)\r\n    const playerHp = [...state.playerHp]\r\n    playerHp[turn] -= hit\r\n    return {\r\n      ...state,\r\n      playerHp\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nexport const withLog: (log: string) => IStateMapper = log => prevState => {\r\n  return { ...prevState, logs: [...prevState.logs, log] }\r\n}\r\n\r\nconst withCheckDiscardToHp: IPlayCard = (payload, playerId) => state => {\r\n  if (state.playerDeck[playerId].length - payload.cards.length !== state.playerHp[playerId]) {\r\n    const count = `${state.playerDeck[playerId].length - state.playerHp[playerId]}`\r\n    throw buildError('shouldDiscard$countCards', {count})\r\n  }\r\n  return state\r\n}\r\n\r\nconst withClearStage: IStateMapper = state => {\r\n  return {\r\n    ...state,\r\n    stage: [],\r\n    trashDeck: [...state.stage],\r\n    lastAction: null,\r\n    ignited: false,\r\n    duel: state.duel || state.playerHp[state.turn] <= 3,\r\n    mode: null\r\n  }\r\n}\r\n\r\nexport const GameReducer: NetworkReducer<GameState, GameAction> = (prevState, action) => {\r\n  const peerId = action.peerId\r\n  if (peerId === undefined) {\r\n    throw new Error('Expect peerId in action')\r\n  }\r\n  const playerId = (): number => {\r\n    const id = prevState.nameDict[prevState.members[peerId]]\r\n    if (id === undefined) {\r\n      throw new Error('game not started')\r\n    }\r\n    return id\r\n  }\r\n  switch (action.type) {\r\n    case GameActionTypes.START:\r\n      return withInitGame(prevState)\r\n    case GameActionType.PLAY_CARD:\r\n      return withPlayCard(playerId(), action.payload)(JSON.parse(JSON.stringify(prevState)))\r\n    case GameActionType.DISCARD_CARD:\r\n      return compose(withClearStage, ...[withDiscardCard, withCheckDiscardToHp].map(step => step(action.payload, playerId())))(JSON.parse(JSON.stringify(prevState)))\r\n    case GameActionType.TAKE_HIT:\r\n      return withCheckWin(withHit(prevState))\r\n    case GameActionType.END:\r\n      return { ...prevState, started: false, ready: {} }\r\n  }\r\n  return prevState\r\n}\r\n","import { GameState } from './GameState'\r\nimport { GameAction, GameActionType } from './GameAction'\r\nimport { getCardColor, getCardType, isActionCard, randInt } from './utils'\r\nimport { allColors, ICard, ICardColor, ICardType, IDeck, IMode } from './types'\r\n\r\nconst countByColor = (hand: IDeck): Record<ICardColor, number> => {\r\n  return hand\r\n    .map(card => getCardColor(card))\r\n    .filter(color => color !== ICardColor.NONE)\r\n    .reduce<Record<ICardColor, number>>(((previousValue, currentValue) => ({\r\n      ...previousValue,\r\n      [currentValue]: (previousValue[currentValue] ?? 0) + 1\r\n    })), {} as Record<ICardColor, number>)\r\n}\r\n\r\nconst countByTypeUniqueColor = (hand: IDeck, excludeMagile: boolean): Record<ICardType, number> => {\r\n  return hand\r\n    .filter(card => getCardColor(card) !== ICardColor.NONE)\r\n    .filter((card, k, cards) => cards.indexOf(card) === k)\r\n    .reduce<Record<ICardType, number>>(((record, card) => {\r\n      const type: ICardType = getCardType(card)\r\n      if(type === ICardType.MAGILE && excludeMagile) {\r\n        return record\r\n      }\r\n      if (type === ICardType.MAGILE && !excludeMagile) {\r\n        return {\r\n          [ICardType.MISSILE]: (record[ICardType.MISSILE] ?? 0) + 1,\r\n          [ICardType.MAGE]: (record[ICardType.MAGE] ?? 0) + 1\r\n        } as Record<ICardType, number>\r\n      }\r\n      return {\r\n        ...record,\r\n        [type]: (record[type] ?? 0) + 1\r\n      }\r\n    }), {} as Record<ICardType, number>)\r\n}\r\n\r\nconst sortDict = <T extends string | number> (dict: Record<T, number>): Array<[T, number]> => {\r\n  return Object.entries<number>(dict).sort((a, b) => (b[1] - a[1])) as Array<[T, number]>\r\n}\r\n\r\nconst buildPlayCardAction = (cards: ICard[], mode?: IMode): GameAction => {\r\n  return {\r\n    type: GameActionType.PLAY_CARD,\r\n    payload: {\r\n      cards,\r\n      mode\r\n    }\r\n  }\r\n}\r\n\r\nconst aiDiscard = (state: GameState, turn: number): GameAction => {\r\n  const hand: ICard[] = [...state.playerDeck[turn]]\r\n  const amountToDiscard = hand.length - state.playerHp[turn]\r\n  const discards: ICard[] = []\r\n  if (state.duel) {\r\n    while (discards.length < amountToDiscard && hand.find(isActionCard)) {\r\n      discards.push(hand.splice(hand.findIndex(isActionCard), 1)[0])\r\n    }\r\n  }\r\n  while (discards.length < amountToDiscard) {\r\n    discards.push(hand.splice(randInt(hand.length), 1)[0])\r\n  }\r\n  return {\r\n    type: GameActionType.DISCARD_CARD,\r\n    payload: {\r\n      cards: discards\r\n    }\r\n  }\r\n}\r\n\r\nconst aiFirstCard = (state: GameState, turn: number): GameAction => {\r\n  const hand: ICard[] = [...state.playerDeck[turn]]\r\n  const byColor: Array<[ICardColor, number]> = sortDict(countByColor(hand))\r\n  const byType: Array<[ICardType, number]> = sortDict(countByTypeUniqueColor(hand, state.duel))\r\n  const nextPlayerHp = state.playerHp[(turn + 1) % state.playerHp.length]\r\n  console.log({ byColor, byType })\r\n  const magileCount = hand.filter(card => getCardType(card) === ICardType.MAGILE).length\r\n  const mode = nextPlayerHp !== 1 && !(byColor[0][1] + 1 <= byType[0][1] && magileCount < byType[0][1]) ? IMode.HOMO : IMode.HETERO\r\n  if (mode === IMode.HOMO) {\r\n    return buildPlayCardAction([hand.find((card) => getCardColor(card) === byColor[0][0]) as ICard], mode)\r\n  } else {\r\n    return buildPlayCardAction([hand.find((card) => getCardType(card) === byType[0][0]) as ICard], mode)\r\n  }\r\n}\r\n\r\nconst aiPlayCard = (state: GameState, playerId: number): GameAction => {\r\n  const hand = state.playerDeck[playerId]\r\n  const { mode, ignited, duel } = state\r\n  if (mode === IMode.HOMO) {\r\n    if(!ignited) {\r\n      const stageColor = getCardColor(state.stage[0])\r\n      const cards = hand.filter(card => getCardColor(card) === stageColor)\r\n      if (cards.length > 3) {\r\n        return buildPlayCardAction(cards.slice(0, 3))\r\n      }\r\n      if (cards.length > 0) {\r\n        return buildPlayCardAction([cards[0]])\r\n      }\r\n    }\r\n    if(!duel) {\r\n      const homoIgnite = hand.find(card => card === ICard.HOMO_IGNITE)\r\n      if(homoIgnite) {\r\n        return buildPlayCardAction([homoIgnite])\r\n      }\r\n      const angelGuard = hand.find(card => card === ICard.ANGEL_GUARD)\r\n      if(angelGuard) {\r\n        return buildPlayCardAction([angelGuard])\r\n      }\r\n    }\r\n  } else {\r\n    if(!ignited) {\r\n      const stageColors = state.stage.map(card => getCardColor(card))\r\n      const stageType = getCardType(state.stage[0])\r\n      const playableColors = new Set(allColors.filter(color => !stageColors.includes(color)))\r\n      const cards = hand.filter(card => {\r\n        const cardColor = getCardColor(card)\r\n        if(getCardType(card) === stageType && playableColors.has(cardColor)) {\r\n          playableColors.delete(cardColor)\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n      console.log('playable colors', playableColors, cards)\r\n      if (cards.length > 3) {\r\n        return buildPlayCardAction(cards.slice(0, 3))\r\n      }\r\n      if (cards.length > 0) {\r\n        return buildPlayCardAction([cards[0]])\r\n      }\r\n    }\r\n    if(!duel) {\r\n      const heteroIgnite = hand.find(card => card === ICard.HETERO_IGNITE)\r\n      if(heteroIgnite) {\r\n        return buildPlayCardAction([heteroIgnite])\r\n      }\r\n      const angelGuard = hand.find(card => card === ICard.ANGEL_GUARD)\r\n      if(angelGuard) {\r\n        return buildPlayCardAction([angelGuard])\r\n      }\r\n    }\r\n  }\r\n  console.warn('AI PLAY CARD REACH EDGE CASE, TAKE HIT', state, playerId)\r\n  return {\r\n    type: GameActionType.TAKE_HIT\r\n  }\r\n}\r\n\r\nexport const aiAction = (state: GameState, turn: number): GameAction => {\r\n  if (state.playerDeck[turn].length > state.playerHp[turn]) {\r\n    return aiDiscard(state, turn)\r\n  }\r\n  if (state.stage.length === 0) {\r\n    return aiFirstCard(state, turn)\r\n  }\r\n  return aiPlayCard(state, turn)\r\n}\r\n","import React, { createContext, FunctionComponent, useContext, useEffect } from 'react'\r\nimport { BoardGameContextInterface, useBoardGameNetwork } from 'gamenet'\r\nimport { GameState } from './GameState'\r\nimport { GameReducer } from './GameReducer'\r\nimport { GameAction } from './GameAction'\r\nimport { aiAction } from './aiAction'\r\n\r\nconst Poker99Context = createContext<BoardGameContextInterface<GameState, GameAction> | null>(null)\r\n\r\nexport const withGameNetwork = (Component: FunctionComponent): FunctionComponent => {\r\n  const WithGameNetwork: FunctionComponent = props => {\r\n    const network = useBoardGameNetwork(GameReducer, new GameState())\r\n    const {myAis, state,dispatchAs} = network\r\n    useEffect(() => {\r\n      if (aiAction !== undefined && myAis.includes(state.players[state.turn]) && state.started && state.winner === null) {\r\n        const cb = (): void => {\r\n          const action = aiAction(state, state.turn)\r\n          // action.peerId = Object.keys(state.members).filter(peerId => state.members[peerId] === state.players[state.turn])[0]\r\n          dispatchAs(state.turn, action).catch(console.error)\r\n        }\r\n        const n = window.setTimeout(cb, 1000)\r\n        return () => {\r\n          window.clearTimeout(n)\r\n        }\r\n      }\r\n    }, [dispatchAs, myAis, state])\r\n    return (\r\n      <Poker99Context.Provider value={network}>\r\n        <Component {...props} />\r\n    </Poker99Context.Provider>\r\n  )\r\n  }\r\n  WithGameNetwork.displayName = 'WithGameNetwork'\r\n  return WithGameNetwork\r\n}\r\n\r\nexport const usePoker99 = (): BoardGameContextInterface<GameState, GameAction> => {\r\n  const network: BoardGameContextInterface<GameState, GameAction> | null = useContext(Poker99Context)\r\n  if (network === null) {\r\n    throw new Error('please wrap it using withGameNetwork before calling this hook')\r\n  }\r\n  return network\r\n}\r\n","import angel_guard from './angel_guard.png'\nimport dark_magile from './dark_magile.png'\nimport earth_mage from './earth_mage.png'\nimport earth_missile from './earth_missile.png'\nimport fire_mage from './fire_mage.png'\nimport fire_missile from './fire_missile.png'\nimport hetero_ignite from './hetero_ignite.png'\nimport homo_ignite from './homo_ignite.png'\nimport light_magile from './light_magile.png'\nimport thunder_mage from './thunder_mage.png'\nimport thunder_missile from './thunder_missile.png'\nimport water_mage from './water_mage.png'\nimport water_missile from './water_missile.png'\nimport wind_mage from './wind_mage.png'\nimport wind_missile from './wind_missile.png'\n\nexport const cardImages = {\n  angel_guard,\n  dark_magile,\n  earth_mage,\n  earth_missile,\n  fire_mage,\n  fire_missile,\n  hetero_ignite,\n  homo_ignite,\n  light_magile,\n  thunder_mage,\n  thunder_missile,\n  water_mage,\n  water_missile,\n  wind_mage,\n  wind_missile\n}\n","export default __webpack_public_path__ + \"static/media/angel_guard.16ea5f11.png\";","export default __webpack_public_path__ + \"static/media/dark_magile.1e723600.png\";","export default __webpack_public_path__ + \"static/media/earth_mage.e84ed39c.png\";","export default __webpack_public_path__ + \"static/media/earth_missile.c93568e4.png\";","export default __webpack_public_path__ + \"static/media/fire_mage.0e5240db.png\";","export default __webpack_public_path__ + \"static/media/fire_missile.6d251f43.png\";","export default __webpack_public_path__ + \"static/media/hetero_ignite.4942ab4f.png\";","export default __webpack_public_path__ + \"static/media/homo_ignite.0dedd4a2.png\";","export default __webpack_public_path__ + \"static/media/light_magile.787bb1b9.png\";","export default __webpack_public_path__ + \"static/media/thunder_mage.fea8f838.png\";","export default __webpack_public_path__ + \"static/media/thunder_missile.bb1203a2.png\";","export default __webpack_public_path__ + \"static/media/water_mage.c01f4c8a.png\";","export default __webpack_public_path__ + \"static/media/water_missile.fb44c368.png\";","export default __webpack_public_path__ + \"static/media/wind_mage.64b5492a.png\";","export default __webpack_public_path__ + \"static/media/wind_missile.c08191d4.png\";","import React, { FunctionComponent } from 'react'\r\nimport { ICard } from '../types'\r\nimport { makeStyles, Paper } from '@material-ui/core'\r\nimport { cardImages } from '../assets'\r\nimport { CheckCircleOutline } from 'mdi-material-ui'\r\nimport { green, red } from '@material-ui/core/colors'\r\nimport { CancelOutlined } from '@material-ui/icons'\r\nimport { useGamenetI18n } from 'gamenet-material'\r\n\r\nconst useStyle = makeStyles(() => ({\r\n  root: {\r\n    padding: '16px',\r\n    width: '110px',\r\n    height: '160px',\r\n    borderRadius: '8px',\r\n    cursor: 'pointer',\r\n    userSelect: 'none',\r\n    transition: 'transform 0.1s ease-in-out',\r\n    transformOrigin: 'center',\r\n    '&:hover': {\r\n      // transform: 'translateY(-50%)'\r\n    }\r\n  }\r\n}))\r\n\r\nexport const Card: FunctionComponent<{\r\n  card: ICard, onClick?: () => void, disabled?: boolean, style?: Record<string, unknown>, selected?: boolean, isDelete?: boolean\r\n}> = (\r\n  {\r\n    style,\r\n    card,\r\n    onClick,\r\n    disabled,\r\n    selected,\r\n    isDelete\r\n  }) => {\r\n  const classes = useStyle()\r\n  const {i18n} = useGamenetI18n()\r\n\r\n  return (\r\n    <Paper\r\n      elevation={4}\r\n      style={{\r\n        pointerEvents: disabled ? 'none' : 'auto',\r\n        backgroundImage: `url(${cardImages[card]})`,\r\n        backgroundSize: 'cover',\r\n        position: 'relative',\r\n        ...style\r\n      }}\r\n      className={classes.root} onClick={!disabled ? onClick : undefined}>\r\n      <h2 style={{ fontFamily: 'Big Shoulders Inline Text, inherit', margin: 0, color: 'white', textShadow: '5px 3px 8px black' }}>\r\n        {i18n[card]}\r\n      </h2>\r\n      {selected && <div style={{position: 'absolute', top: 0, right: 0}}>\r\n        {isDelete ? <CancelOutlined style={{ color: red[500] }} fontSize='large'/> : <CheckCircleOutline style={{ color: green[500] }} fontSize='large'/>}\r\n      </div>}\r\n    </Paper>\r\n  )\r\n}\r\n","import React, { FunctionComponent, useEffect, useState } from 'react'\r\nimport { usePoker99 } from './withGameNetwork'\r\nimport { GameAction, GameActionType, PlayCardPayload } from './GameAction'\r\nimport { ChooseCardFor, Deck } from './components/Deck'\r\n// import { PlayCardAdditionalModal } from './components/PlayCardAdditionalModal'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core'\r\nimport { decodeError } from './utils'\r\nimport { useGamenetI18n } from 'gamenet-material'\r\n\r\nexport const Game: FunctionComponent = () => {\r\n  const {\r\n    state,\r\n    dispatch,\r\n    dispatchAs,\r\n    myPlayerId,\r\n    myLocals,\r\n    hideDeck,\r\n    setHideDeck,\r\n    error,\r\n    setError,\r\n    renderedDeckId\r\n  } = usePoker99()\r\n  const [throttledRenderedId, setTrottledRenderedId] = useState(renderedDeckId)\r\n  const {i18n} = useGamenetI18n()\r\n  const handleError = (e: Error): void => {\r\n    console.error('HANDLE ERROR')\r\n    try {\r\n      setError(decodeError(e, i18n))\r\n    } catch {\r\n      setError(e.message)\r\n    }\r\n  }\r\n  const myTurn = state.turn === myPlayerId || myLocals.includes(state.players[state.turn])\r\n  const dispatchHelper = async (action: GameAction) => {\r\n    try{\r\n      if (state.turn === myPlayerId) {\r\n        await dispatch(action).then(() => setError(''))\r\n      } else if (myLocals.includes(state.players[state.turn])) {\r\n        await dispatchAs(state.turn, action).then(() => setError(''))\r\n      } else {\r\n        throw new Error('Not my turn')\r\n      }\r\n    } catch (e) {\r\n      handleError(e)\r\n      throw e\r\n    }\r\n  }\r\n  const playCard = async (payload: PlayCardPayload) => {\r\n    const action: GameAction = {\r\n      type: GameActionType.PLAY_CARD,\r\n      payload\r\n    }\r\n    await dispatchHelper(action).then(() => {\r\n      if (myLocals.length > 0) {\r\n        setHideDeck(true)\r\n      }\r\n    })\r\n  }\r\n  const discardCard = async (payload: PlayCardPayload) => {\r\n    const action: GameAction = {\r\n      type: GameActionType.DISCARD_CARD,\r\n      payload\r\n    }\r\n    await dispatchHelper(action)\r\n  }\r\n  const takeHit = async () => {\r\n    const action: GameAction = {\r\n      type: GameActionType.TAKE_HIT,\r\n    }\r\n    await dispatchHelper(action)\r\n  }\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setTrottledRenderedId(renderedDeckId)\r\n    }, 500)\r\n  }, [renderedDeckId])\r\n  const again = async (): Promise<void> => {\r\n    await dispatch({\r\n      type: GameActionType.END\r\n    }).catch(handleError)\r\n  }\r\n  let chooseCardFor = ChooseCardFor.RESPOND_PLAY\r\n  if(state.stage.length === 0) {\r\n    chooseCardFor = ChooseCardFor.FIRST_PLAY\r\n  }\r\n  if(throttledRenderedId !== undefined && throttledRenderedId !== null && state.playerDeck[throttledRenderedId].length > state.playerHp[throttledRenderedId]) {\r\n    chooseCardFor = ChooseCardFor.DISCARD\r\n  }\r\n  const handleCardChoose = async (payload: PlayCardPayload) => {\r\n    if(chooseCardFor === ChooseCardFor.DISCARD) {\r\n      await discardCard(payload)\r\n    } else {\r\n      await playCard(payload)\r\n    }\r\n  }\r\n  return (\r\n    <div style={{ pointerEvents: 'all', color: 'white' }}>\r\n      {state.started && myPlayerId !== undefined &&\r\n      <Deck\r\n        cards={state.playerDeck[throttledRenderedId ?? myPlayerId]}\r\n        onCardsChoose={handleCardChoose}\r\n        chooseCardFor={chooseCardFor}\r\n        hide={hideDeck}\r\n        reveal={() => setHideDeck(false)}\r\n        takeHit={takeHit}\r\n        myTurn={myTurn}\r\n      />}\r\n      <div style={{ maxHeight: '50%' }}>\r\n        {state.logs.slice().reverse().map((s, k) => <div key={k}>{s}</div>)}\r\n      </div>\r\n      <Dialog open={error !== ''} onClose={() => setError('')} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle>Error</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {error}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setError('')} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n","import React, { FunctionComponent, useEffect, useMemo, useState } from 'react'\r\nimport { usePoker99 } from '../withGameNetwork'\r\nimport { GameActionType } from '../GameAction'\r\nimport { Card } from './Card'\r\nimport { IDeck, IMode } from '../types'\r\nimport { computeDamage } from '../utils'\r\nimport { Button } from '@material-ui/core'\r\nimport { i18nSub, useGamenetI18n } from 'gamenet-material'\r\n\r\nconst Name: FunctionComponent = (props) => (\r\n  <div {...props}/>\r\n)\r\n\r\nexport const GameRenderer = () => {\r\n  const { state, myPlayerId, dispatch } = usePoker99()\r\n  const [prevCardPayload, setPrevCardPayload] = useState<null | IDeck>(null)\r\n  const [startAnimateCard, setStartAnimateCard] = useState(false)\r\n  const [showAnimateCard, setShowAnimateCard] = useState(false)\r\n  const {i18n} = useGamenetI18n()\r\n  useEffect(() => {\r\n    setShowAnimateCard(true)\r\n    setTimeout(() => {\r\n      setStartAnimateCard(true)\r\n    }, 1)\r\n    setTimeout(() => {\r\n      setPrevCardPayload(state.stage)\r\n      setStartAnimateCard(false)\r\n      setShowAnimateCard(false)\r\n    }, 300)\r\n  }, [state.lastAction])\r\n  const mp = (id: number): number => (id + state.playerHp.length) % state.playerHp.length\r\n  const center = {\r\n    top: '50vh',\r\n    left: '50vw'\r\n  }\r\n  const again = async (): Promise<void> => {\r\n    await dispatch({\r\n      type: GameActionType.END\r\n    }).catch(console.error)\r\n  }\r\n  const status = (() => {\r\n    if (state.started) {\r\n      if(state.winner !== null) {\r\n        const player = state.players[state.winner]\r\n        return i18nSub(i18n.loserIs$player, {player})\r\n      }\r\n      const player = state.players[state.turn]\r\n      if (state.playerDeck[state.turn].length > state.playerHp[state.turn]) {\r\n        return i18nSub(i18n.$playerDiscardCardTil$cardCount, {player, cardCount: `${state.playerHp[state.turn]}`})\r\n      }\r\n      if (state.stage.length === 0) {\r\n        return i18nSub(i18n.$playerInitializingTransfer, {player})\r\n      } else {\r\n        const mode = i18n[state.mode ?? IMode.HOMO]\r\n        return i18nSub(i18n.$playerRespondTo$modeTransfer, {player, mode})\r\n      }\r\n    }\r\n    return undefined\r\n  })()\r\n  const damage = useMemo(() => `${computeDamage(state)}`, [state])\r\n  const hint = (() => {\r\n    if(state.started) {\r\n      if(state.winner !== null) {\r\n        return i18n.gameOver\r\n      }\r\n      if(state.duel) {\r\n        return i18n.duelHint\r\n      }\r\n      if(state.ignited) {\r\n        return i18n.ignitedHint\r\n      }\r\n    }\r\n    return undefined\r\n  })()\r\n  return (\r\n    !state.started\r\n      ? <div\r\n        style={{ backgroundColor: 'green', position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, color: 'white' }}\r\n      />\r\n      : <div\r\n        style={{\r\n          backgroundColor: 'green',\r\n          position: 'fixed',\r\n          top: 0,\r\n          left: 0,\r\n          right: 0,\r\n          bottom: 0,\r\n          color: 'white',\r\n          boxShadow: state.duel ? 'inset 0 0 100px #ff9d9d' : undefined,\r\n          transition: 'box-shadow 0.3s ease-in-out'\r\n        }}>\r\n      <div style={{display: 'flex', justifyContent: 'space-around', margin: 'auto'}}>\r\n        {\r\n          new Array(state.players.length).fill(0).map((_, k) => mp(k + (myPlayerId ?? 0))).filter(id => id !== (myPlayerId ?? 0)).map(id => (\r\n            <div style={{border: `solid ${state.turn === id ? 'red' : 'transparent'} 2px`, padding: '16px 32px'}}>\r\n              {state.players[id]} : {state.playerHp[id]}\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n        {/*{myPlayerId === undefined && <Name offset={0}/>}*/}\r\n        {prevCardPayload !== null &&\r\n        <div style={{ position: 'absolute', ...center }}>\r\n          <div style={{ transform: 'translate(-50%,-100%)', textAlign: 'center' }}>\r\n            {hint && <h3>{hint}</h3>}\r\n            <h1>{status}</h1>\r\n            {state.winner !== undefined && state.winner !== null && <div>\r\n              <Button variant=\"contained\" color='primary' onClick={again}>{i18n.again}</Button>\r\n            </div>}\r\n            <h3>{i18nSub(i18n.current$damage, {damage})}</h3>\r\n            <div style={{ display: 'flex', justifyContent: 'center', maxWidth: 'calc(100vw - 32px)', flexWrap: 'wrap', marginRight: 'auto', marginLeft: 'auto', marginBottom: '70px' }}>\r\n              {prevCardPayload.map(card => <div style={{ padding: '8px', maxHeight: '70px' }}><Card card={card} disabled/></div>)}\r\n            </div>\r\n          </div>\r\n        </div>}\r\n        {showAnimateCard && state.lastAction !== null && <div style={{\r\n          display: 'flex',\r\n          position: 'absolute',\r\n          left: '50vw',\r\n          top: startAnimateCard ? '50vh' : state.lastAction.playerId === myPlayerId ? '100vh' : '-100%',\r\n          transition: ['top', 'bottom', 'left', 'right'].map(s => `${s} 0.2s ease-in-out`).join(',')\r\n        }}>\r\n          <div style={{ transform: 'translate(-50%,-50%)', display: 'flex' }}>\r\n            {state.lastAction.cards.map(card => <div style={{ padding: '8px' }}><Card card={card} disabled/></div>)}\r\n          </div>\r\n        </div>}\r\n        <h3 style={{ position: 'absolute', bottom: 0, right: '20px' }}>{i18n.drawDeck}: {state.drawDeck.length}</h3>\r\n      </div>\r\n  )\r\n}\r\n","import { en } from './en'\r\nimport { zh } from './zh'\r\n\r\nexport const i18ns = {\r\n  en,\r\n  zh\r\n}\r\n","import { gamenetI18n } from 'gamenet-material'\r\nimport React from 'react'\r\nimport { ICard, ICardColor, ICardType, IMode } from '../types'\r\n\r\nexport const en = {\r\n  ...gamenetI18n.en,\r\n  gameName: 'Magile',\r\n  howToPlay: 'How To Play',\r\n  howToPlayContent: (\r\n    <div>\r\n      TBA\r\n    </div>\r\n  ),\r\n  [IMode.HOMO]: 'Homo',\r\n  [IMode.HETERO]: 'Hetero',\r\n  [ICardType.MAGE]: 'Mage',\r\n  [ICardType.MISSILE]: 'Missile',\r\n  [ICardType.MAGILE]: 'Magile',\r\n  [ICardType.IGNITE]: 'Ignite',\r\n  [ICardType.ANGEL_GUARD]: 'Angel Guard',\r\n  [ICardColor.NONE]: 'None',\r\n  [ICardColor.EARTH]: 'Earth',\r\n  [ICardColor.WATER]: 'Water',\r\n  [ICardColor.FIRE]: 'Fire',\r\n  [ICardColor.WIND]: 'Wind',\r\n  [ICardColor.THUNDER]: 'Thunder',\r\n  [ICardColor.LIGHT]: 'Light',\r\n  [ICardColor.DARK]: 'Dark',\r\n  [ICard.EARTH_MAGE]: 'Earth Mage',\r\n  [ICard.WATER_MAGE]: 'Water Mage',\r\n  [ICard.FIRE_MAGE]: 'Fire Mage',\r\n  [ICard.WIND_MAGE]: 'Wind Mage',\r\n  [ICard.THUNDER_MAGE]: 'Thunder Mage',\r\n  [ICard.EARTH_MISSILE]: 'Earth Missile',\r\n  [ICard.WATER_MISSILE]: 'Water Missile',\r\n  [ICard.FIRE_MISSILE]: 'Fire Missile',\r\n  [ICard.WIND_MISSILE]: 'Wind Missile',\r\n  [ICard.THUNDER_MISSILE]: 'Thunder Missile',\r\n  [ICard.LIGHT_MAGILE]: 'Light Magile',\r\n  [ICard.DARK_MAGILE]: 'Dark Magile',\r\n  [ICard.HOMO_IGNITE]: 'Homo Ignite',\r\n  [ICard.HETERO_IGNITE]: 'Hetero Ignite',\r\n  [ICard.ANGEL_GUARD]: 'Angel Guard',\r\n  gameOver: 'Game Over',\r\n  duelHint: 'DUEL! NO Function card and each hit will deduct 1 more hp!',\r\n  igniteHint: 'IGNITED! Respond only with same ignited or angel guard!',\r\n  loserIs$player: 'Loser is {{player}}',\r\n  $playerDiscardCardTil$cardCount: '{{player}} discard card til {{cardCount}}',\r\n  $playerInitializingTransfer: '{{player}} initializing transfer',\r\n  $playerRespondTo$modeTransfer: '{{player}} responding to {{mode}} transfer.',\r\n  current$damage: 'Current damage: {{damage}}',\r\n  again: 'Again',\r\n  drawDeck: 'Draw Deck',\r\n  notYourTurn: 'Not Your Turn',\r\n  takeHit: 'Take Hit',\r\n  areYouSureYouWantToTakeHit: 'Are you sure you want to take hit?',\r\n  respond: 'Respond',\r\n  initializeHomoTransfer: 'Initialize Homo Transfer',\r\n  initializeHeteroTransfer: 'Initialize Hetero Transfer',\r\n  trash: 'Trash',\r\n  cannotDraw$playerAlreadyHas$countCards: `cannot draw, {{player}} already has {{count}} cards`,\r\n  $playerDoesNotOwnCard$card: '{{player}} doesnt own card {{card}}',\r\n  playerCardMoreThanHp: 'Player has card more than his hp, please discard',\r\n  cannotMixIgniteAngelWithMagiles: 'cannot mix ignite or angel card with mage, missiles and magiles',\r\n  cannotPlayFunctionDuringDuel: 'cannot play function card during duel',\r\n  canPlayOnly1Or3Cards: 'you can only play 1 card or 3 cards',\r\n  specifyHomoOrHeteroAtFirstTransfer: 'please specify homo transfer or hetero transfer as the first to transfer',\r\n  canOnlyDoHeteroWhenNextIs1hp: 'can only do hetero transfer when next player is 1 hp',\r\n  canOnlyPlay1CardWhenAtFirstTransfer: 'please play one card as the first to transfer',\r\n  canOnlyPlayNonFunctionWhenAtFirstTransfer: 'cannot play function type as the first to transfer',\r\n  canOnlyPlay$colorInThisHomoTransfer: 'cannot play color other than {{color}} in this homo transfer',\r\n  $colorsPlayedAnd$colorsCanPlayInThisHetero$typeTransfer: '{{colorsPlayed}} {{type}} played. You may play {{colorsCanPlay}} {{type2}} in this hetero transfer',\r\n  youMayPlay$typeOnly: 'You may play {{type}} only',\r\n  youMayPlay$typeOrMagileOnly: 'You may play {{type}} or Magile only',\r\n  cannotPlayHomoIgniteDuringHeteroTransfer: 'Cannot Play Homo Ignite during Hetero transfer',\r\n  cannotPlayHeteroIgniteDuringHomoTransfer: 'Cannot Play Hetero Ignite during Homo transfer',\r\n  invalidMove: 'invalidMove',\r\n  shouldDiscard$countCards: 'should discard {{count}} cards'\r\n}\r\n","import { gamenetI18n } from 'gamenet-material'\r\nimport React from 'react'\r\nimport { ICard, ICardColor, ICardType, IMode } from '../types'\r\n\r\nexport const zh = {\r\n  ...gamenetI18n.zh,\r\n  gameName: '魔法飛彈大作戰',\r\n  howToPlay: '玩法',\r\n  howToPlayContent: (\r\n    <div>\r\n      還沒有哦\r\n    </div>\r\n  ),\r\n  [IMode.HOMO]: '同系',\r\n  [IMode.HETERO]: '異系',\r\n  [ICardType.MAGE]: '魔彈',\r\n  [ICardType.MISSILE]: '飛彈',\r\n  [ICardType.MAGILE]: '魔法飛彈',\r\n  [ICardType.IGNITE]: '引爆',\r\n  [ICardType.ANGEL_GUARD]: '天使的庇護',\r\n  [ICardColor.NONE]: '無屬性',\r\n  [ICardColor.EARTH]: '地系',\r\n  [ICardColor.WATER]: '水系',\r\n  [ICardColor.FIRE]: '火系',\r\n  [ICardColor.WIND]: '風系',\r\n  [ICardColor.THUNDER]: '雷系',\r\n  [ICardColor.LIGHT]: '光系',\r\n  [ICardColor.DARK]: '暗系',\r\n  [ICard.EARTH_MAGE]: '地系魔彈',\r\n  [ICard.WATER_MAGE]: '水系魔彈',\r\n  [ICard.FIRE_MAGE]: '火系魔彈',\r\n  [ICard.WIND_MAGE]: '風系魔彈',\r\n  [ICard.THUNDER_MAGE]: '雷系魔彈',\r\n  [ICard.EARTH_MISSILE]: '地系飛彈',\r\n  [ICard.WATER_MISSILE]: '水系飛彈',\r\n  [ICard.FIRE_MISSILE]: '火系飛彈',\r\n  [ICard.WIND_MISSILE]: '風系飛彈',\r\n  [ICard.THUNDER_MISSILE]: '雷系飛彈',\r\n  [ICard.LIGHT_MAGILE]: '光系魔法飛彈',\r\n  [ICard.DARK_MAGILE]: '暗系魔法飛彈',\r\n  [ICard.HOMO_IGNITE]: '同系引爆',\r\n  [ICard.HETERO_IGNITE]: '異系引爆',\r\n  [ICard.ANGEL_GUARD]: '天使的庇護',\r\n  gameOver: '遊戲結束',\r\n  duelHint: '大決戰! 功能卡失效，每次傷害+1!',\r\n  igniteHint: '引爆! 只可以用同一種引爆或天使的庇護作響應!',\r\n  loserIs$player: '輸家是{{player}}',\r\n  $playerDiscardCardTil$cardCount: '{{player}}棄牌至{{cardCount}}張',\r\n  $playerInitializingTransfer: '{{player}}開始傳遞',\r\n  $playerRespondTo$modeTransfer: '{{player}}響應{{mode}}傳遞',\r\n  current$damage: '目前累積傷害: {{damage}}',\r\n  again: '再玩一次',\r\n  drawDeck: '抽牌區',\r\n  notYourTurn: '不是你的回合哦~',\r\n  takeHit: '用生命值硬接',\r\n  areYouSureYouWantToTakeHit: '你確定要用生命值硬接?',\r\n  respond: '響應',\r\n  initializeHomoTransfer: '發動同系傳遞',\r\n  initializeHeteroTransfer: '發動異系傳遞',\r\n  trash: '棄卡',\r\n  cannotDraw$playerAlreadyHas$countCards: `不能抽卡, {{player}}已經有{{count}}張卡`,\r\n  $playerDoesNotOwnCard$card: '{{player}}沒有{{card}}',\r\n  playerCardMoreThanHp: '玩家有多於他血量的卡，請棄卡',\r\n  cannotMixIgniteAngelWithMagiles: '引爆和天使卡不能與其他卡混用',\r\n  cannotPlayFunctionDuringDuel: '大決戰期間不能用功能卡',\r\n  canPlayOnly1Or3Cards: '你只能打出一張或三張卡',\r\n  specifyHomoOrHeteroAtFirstTransfer: '發動傳遞時請指明同系或異系傳遞',\r\n  canOnlyDoHeteroWhenNextIs1hp: '當下家只有1血時只能發動異系傳遞',\r\n  canOnlyPlay1CardWhenAtFirstTransfer: '發動傳遞時只能打出一張卡',\r\n  canOnlyPlayNonFunctionWhenAtFirstTransfer: '發動傳遞時不能打出功能卡',\r\n  canOnlyPlay$colorInThisHomoTransfer: '此同系傳遞只能打出{{color}}',\r\n  $colorsPlayedAnd$colorsCanPlayInThisHetero$typeTransfer: '{{colorsPlayed}}{{type}}已經有人打出。這場異系傳遞你可以打出{{colorsCanPlay}}{{type2}}',\r\n  youMayPlay$typeOnly: '你只能打出{{type}}',\r\n  youMayPlay$typeOrMagileOnly: '你只能打出{{type}}或者魔法飛彈',\r\n  cannotPlayHomoIgniteDuringHeteroTransfer: '異系傳遞不能打出同系引爆',\r\n  cannotPlayHeteroIgniteDuringHomoTransfer: '同系傳遞不能打出異系引爆',\r\n  invalidMove: '不允許的行動',\r\n  shouldDiscard$countCards: '請棄{{count}}張卡'\r\n}\r\n","import React, { FunctionComponent } from 'react'\nimport { usePoker99, withGameNetwork } from './withGameNetwork'\nimport { GamePagesSlider, Home, LanguageButton, Room, useGamenetI18n, withGamenetI18n } from 'gamenet-material'\nimport { Game } from './Game'\nimport { GameRenderer } from './components/GameRenderer'\nimport { i18ns } from './i18ns'\nimport { DialogContent } from '@material-ui/core'\n\nconst App: FunctionComponent = withGamenetI18n({ i18ns })(withGameNetwork(() => {\n  const network = usePoker99()\n  const { i18n } = useGamenetI18n()\n  return (\n    <GamePagesSlider gameAppState={network.gameAppState} fullPage={[false, false, true]} GameRenderer={<GameRenderer/>}>\n      <Home {...network} gameName={i18n.gameName}>\n        <DialogContent>\n          <h2>{i18n.howToPlay}</h2>\n          <div>{i18n.howToPlayContent}</div>\n        </DialogContent>\n      </Home>\n      <Room {...network} />\n      <Game/>\n      <div style={{ position: 'fixed', top: 0, right: 0, zIndex: 100 }}>\n        <LanguageButton/>\n      </div>\n    </GamePagesSlider>\n  )\n}))\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}