{"version":3,"sources":["../node_modules/peerjs/dist sync","GameAction.ts","types.ts","GameState.ts","components/Deck.tsx","constants.ts","utils.ts","GameReducer.ts","aiAction.ts","withGameNetwork.tsx","assets/index.ts","assets/angel_guard.png","assets/dark_magile.png","assets/earth_mage.png","assets/earth_missile.png","assets/fire_mage.png","assets/fire_missile.png","assets/hetero_ignite.png","assets/homo_ignite.png","assets/light_magile.png","assets/thunder_mage.png","assets/thunder_missile.png","assets/water_mage.png","assets/water_missile.png","assets/wind_mage.png","assets/wind_missile.png","components/Card.tsx","Game.tsx","DamageTable.tsx","DamageTableToggleButton.tsx","components/GameRenderer.tsx","i18ns/howToPlay.en.tsx","i18ns/en.tsx","i18ns/howToPlay.zh.tsx","i18ns/index.ts","i18ns/zh.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","GameActionType","ICard","IMode","ICardType","ICardColor","GameState","maxPlayer","minPlayer","turn","direction","points","drawDeck","stage","mode","trashDeck","playerDeck","playerHp","logs","lastAction","ignited","duel","GenericBoardGameState","ChooseCardFor","allColors","EARTH","WATER","FIRE","WIND","THUNDER","LIGHT","DARK","cardCount","EARTH_MAGE","WATER_MAGE","FIRE_MAGE","WIND_MAGE","THUNDER_MAGE","EARTH_MISSILE","WATER_MISSILE","FIRE_MISSILE","WIND_MISSILE","THUNDER_MISSILE","LIGHT_MAGILE","DARK_MAGILE","HOMO_IGNITE","HETERO_IGNITE","ANGEL_GUARD","computeDamage","state","igniteCount","filter","card","getCardType","IGNITE","length","count","HOMO","HETERO","basicDamage","getCardColor","NONE","Math","max","MAGE","MISSILE","MAGILE","areCardsOfTypeOrMagile","cards","type","reduce","prev","curr","cardType","isActionCard","includes","areCardsOfDifferentColor","seenColor","Set","filteredCards","forEach","add","size","buildError","messageKey","values","variables","JSON","stringify","withDrawCard","playerId","player","players","undefined","shuffle","hand","slice","withEnsureDuelNotFunctionCard","compose","withDiscardCard","withInitGame","prevState","winner","fullDeck","Object","entries","flatMap","Array","fill","index","indexOf","splice","withPutToPlayed","withCardNumberValidation","_","withCardTypeValidation","map","withFirstPlayValidation","withPlayHomo","cardColor","color","areCardsOfColor","withPlayHetero","find","hasCardColorNone","stageColors","colorsPlayed","colorsCanPlay","type2","withPlayIgnite","withPlayAngleGuard","withStateChangedValidation","withIncrementTurn","nextPlayerId","withCheckWin","playerIdLose","findIndex","hp","withCheckHit","ableToResponse","withHit","hit","withCheckDiscardToHp","payload","withClearStage","GameReducer","action","peerId","nameDict","members","GameActionTypes","START","PLAY_CARD","nextState","playCard","withPlayCard","parse","DISCARD_CARD","step","TAKE_HIT","END","started","ready","sortDict","dict","sort","a","b","buildPlayCardAction","aiFirstCard","byColor","excludeMagile","previousValue","currentValue","countByColor","byType","k","record","countByTypeUniqueColor","nextPlayerHp","console","log","magileCount","aiAction","amountToDiscard","discards","push","floor","random","aiDiscard","stageColor","homoIgnite","angelGuard","stageType","playableColors","has","delete","heteroIgnite","warn","aiPlayCard","Poker99Context","createContext","usePoker99","network","useContext","cardImages","angel_guard","dark_magile","earth_mage","earth_missile","fire_mage","fire_missile","hetero_ignite","homo_ignite","light_magile","thunder_mage","thunder_missile","water_mage","water_missile","wind_mage","wind_missile","useStyle","makeStyles","root","padding","width","height","borderRadius","cursor","userSelect","transition","transformOrigin","Card","style","onClick","disabled","selected","isDelete","classes","i18n","useGamenetI18n","Paper","elevation","pointerEvents","backgroundImage","backgroundSize","position","textAlign","className","fontFamily","margin","textShadow","top","right","CancelOutlined","red","fontSize","green","DURATION","PlaceHolder","maxWidth","useState","setWidth","useEffect","setTimeout","minWidth","Deck","hide","reveal","onCardsChoose","chooseCardFor","takeHit","myTurn","playedIndices","setPlayedIndices","hovering","setHovering","playGetCardAnimation","setPlayGetCardAnimation","discardingAnimation","setDiscardingAnimation","useReducer","dispatchSelected","handleCardClick","handlePlayCards","param","laterSetDiscardingAnimation","DISCARD","then","from","catch","error","withMaxWidth","children","noPad","onMouseEnter","onTouchStart","onMouseLeave","onTouchEnd","bottom","left","zIndex","transform","display","Button","variant","Visibility","RESPOND_PLAY","title","window","confirm","areYouSureYouWantToTakeHit","Flag","marginLeft","respond","PlayArrow","FIRST_PLAY","initializeHomoTransfer","initializeHeteroTransfer","trash","Delete","notYourTurn","justifyContent","flexWrap","cardsToRender","j","i","getPlayedCards","Game","dispatch","dispatchAs","myPlayerId","myLocals","hideDeck","setHideDeck","setError","renderedDeckId","throttledRenderedId","setTrottledRenderedId","handleError","message","varName","i18nKey","key","join","i18nSub","decodeError","dispatchHelper","discardCard","handleCardChoose","maxHeight","reverse","s","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","DamageTable","TableContainer","component","Table","TableHead","TableRow","TableCell","damage","TableBody","rowSpan","homo","hetero","DamageTableToggleButton","setOpen","IconButton","damageTable","damageTableHint","close","GameRenderer","prevCardPayload","setPrevCardPayload","startAnimateCard","setStartAnimateCard","showAnimateCard","setShowAnimateCard","again","status","loserIs$player","$playerDiscardCardTil$cardCount","$playerInitializingTransfer","$playerRespondTo$modeTransfer","useMemo","hint","gameOver","duelHint","ignitedHint","backgroundColor","boxShadow","border","current$damage","marginRight","marginBottom","howToPlay","en","gamenetI18n","gameName","howToPlayContent","i18ns","zh","App","withGamenetI18n","Component","WithGameNetwork","props","useBoardGameNetwork","myAis","n","clearTimeout","Provider","value","displayName","withGameNetwork","gameAppState","fullPage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1ae82be.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 199;","// GameAction.ts\r\n\r\nimport { GameActionTypes, GenericBoardGameAction } from 'gamenet'\r\nimport { ICard, IMode } from './types'\r\nimport { NetworkAction } from 'smnet'\r\n\r\nexport enum GameActionType {\r\n  PLAY_CARD,\r\n  END,\r\n  DISCARD_CARD,\r\n  TAKE_HIT\r\n}\r\n\r\nexport interface PlayCardPayload {\r\n  cards: ICard[]\r\n  mode?: IMode\r\n}\r\n\r\nexport type GameAction = (({\r\n  type: GameActionType.DISCARD_CARD\r\n  payload: PlayCardPayload\r\n} | {\r\n  type: GameActionType.PLAY_CARD\r\n  payload: PlayCardPayload\r\n} | {\r\n  type: GameActionType.END\r\n} | {\r\n  type: GameActionType.TAKE_HIT\r\n} | {\r\n  type: GameActionTypes\r\n  payload: never\r\n}) & NetworkAction) | GenericBoardGameAction\r\n","import { GameState } from './GameState'\r\nimport { PlayCardPayload } from './GameAction'\r\n\r\nexport enum ICard {\r\n  EARTH_MAGE = 'earth_mage',\r\n  WATER_MAGE = 'water_mage',\r\n  FIRE_MAGE = 'fire_mage',\r\n  WIND_MAGE = 'wind_mage',\r\n  THUNDER_MAGE = 'thunder_mage',\r\n  EARTH_MISSILE = 'earth_missile',\r\n  WATER_MISSILE = 'water_missile',\r\n  FIRE_MISSILE = 'fire_missile',\r\n  WIND_MISSILE = 'wind_missile',\r\n  THUNDER_MISSILE = 'thunder_missile',\r\n  LIGHT_MAGILE = 'light_magile',\r\n  DARK_MAGILE = 'dark_magile',\r\n  HOMO_IGNITE = 'homo_ignite',\r\n  HETERO_IGNITE = 'hetero_ignite',\r\n  ANGEL_GUARD = 'angel_guard'\r\n}\r\n\r\nexport enum IMode {\r\n  HOMO='homo',\r\n  HETERO='hetero'\r\n}\r\n\r\nexport type IDeck = ICard[]\r\n\r\nexport type IStateMapper = (prevState: GameState) => GameState\r\n\r\nexport type IsCard = (card: ICard) => boolean\r\n\r\nexport type IPlayCard = (payload: PlayCardPayload, playerId: number) => IStateMapper\r\n\r\nexport enum ICardType {\r\n  MAGE='mage',\r\n  MISSILE='missile',\r\n  MAGILE='magile',\r\n  IGNITE='ignite',\r\n  ANGEL_GUARD='angel_guard'\r\n}\r\n\r\nexport enum ICardColor {\r\n  NONE= 'none',\r\n  EARTH= 'earth',\r\n  WATER= 'water',\r\n  FIRE= 'fire',\r\n  WIND= 'wind',\r\n  THUNDER= 'thunder',\r\n  LIGHT= 'light',\r\n  DARK= 'dark'\r\n}\r\n\r\nexport const allColors: ICardColor[] = [\r\n  ICardColor.EARTH,\r\n  ICardColor.WATER,\r\n  ICardColor.FIRE,\r\n  ICardColor.WIND,\r\n  ICardColor.THUNDER,\r\n  ICardColor.LIGHT,\r\n  ICardColor.DARK,\r\n]\r\n","// Poker99State.ts\r\n\r\nimport { GenericBoardGameState } from 'gamenet'\r\nimport { IDeck, IMode } from './types'\r\nimport { PlayCardPayload } from './GameAction'\r\n\r\nexport class GameState extends GenericBoardGameState {\r\n  [key: string]: unknown | undefined\r\n\r\n  maxPlayer = 8\r\n  minPlayer = 2\r\n  turn = 0\r\n  direction = 1\r\n  points = 0\r\n  drawDeck: IDeck = []\r\n  stage: IDeck = []\r\n  mode: IMode | null = null\r\n  trashDeck: IDeck = []\r\n  playerDeck: IDeck[] = []\r\n  playerHp: number[] = []\r\n  logs: string[] = []\r\n  lastAction: PlayCardPayload & { playerId: number } | null = null\r\n  ignited = false\r\n  duel = false\r\n}\r\n","import React, { FunctionComponent, ReactNode, useEffect, useReducer, useState } from 'react'\nimport { ICard, IMode } from '../types'\nimport { Card } from './Card'\nimport { Button } from '@material-ui/core'\nimport { Delete, Flag, PlayArrow, Visibility } from '@material-ui/icons'\nimport { PlayCardPayload } from '../GameAction'\nimport { Equal, NotEqual } from 'mdi-material-ui'\nimport { useGamenetI18n } from 'gamenet-material'\n\nconst DURATION = 0.3\n\nconst PlaceHolder: FunctionComponent<{ maxWidth: string, style?: Record<string, unknown> }> = ({ maxWidth, style }) => {\n  const [width, setWidth] = useState(maxWidth)\n  useEffect(() => {\n    setTimeout(() => {\n      setWidth('0')\n    }, 1)\n  }, [])\n  return (\n    <div style={{\n      maxWidth: width,\n      minWidth: width,\n      transition: `min-width ${DURATION}s ease-in-out`,\n      position: 'relative',\n      ...style\n    }}/>\n  )\n}\n\nexport enum ChooseCardFor {\n  FIRST_PLAY,\n  RESPOND_PLAY,\n  DISCARD\n}\n\nexport const Deck: FunctionComponent<{\n  cards: ICard[], hide: boolean, reveal: () => void, onCardsChoose: (payload: PlayCardPayload) => Promise<void>, chooseCardFor: ChooseCardFor, takeHit: () => Promise<void>, myTurn?: boolean\n}> = ({ cards, hide, reveal, onCardsChoose, chooseCardFor, takeHit, myTurn }) => {\n  const [playedIndices, setPlayedIndices] = useState<number[]>([])\n  const [hovering, setHovering] = useState<number | null>(null)\n  const [playGetCardAnimation, setPlayGetCardAnimation] = useState(false)\n  const [discardingAnimation, setDiscardingAnimation] = useState(false)\n  const {i18n} = useGamenetI18n()\n  const [selected, dispatchSelected] = useReducer<(prev: Set<number>, action: { type: string, payload?: number }) => Set<number>>((prev, {\n    type,\n    payload\n  }) => {\n    switch (type) {\n      case 'add':\n        if (payload !== undefined) {\n          prev.add(payload)\n        }\n        return new Set(prev)\n      case 'delete':\n        if (payload !== undefined) {\n          prev.delete(payload)\n        }\n        return new Set(prev)\n      case 'clear':\n        return new Set()\n      default:\n        return prev\n    }\n  }, new Set<number>())\n  const handleCardClick = async (card: ICard, index: number) => {\n    if (selected.has(index)) {\n      dispatchSelected({ type: 'delete', payload: index })\n    } else {\n      dispatchSelected({ type: 'add', payload: index })\n    }\n  }\n  const handlePlayCards = (param: unknown) => {\n    const mode = param === IMode.HOMO || param === IMode.HETERO ? param : undefined\n    const laterSetDiscardingAnimation = chooseCardFor === ChooseCardFor.DISCARD\n    onCardsChoose({ cards: cards.filter((_, k) => selected.has(k)), mode })\n      .then(() => {\n        setDiscardingAnimation(laterSetDiscardingAnimation)\n        setHovering(null)\n        setPlayedIndices(Array.from(selected))\n        dispatchSelected({ type: 'clear' })\n        setTimeout(() => {\n          setPlayGetCardAnimation(true)\n        }, 1)\n        setTimeout(() => {\n          setPlayGetCardAnimation(false)\n          setPlayedIndices([])\n          setDiscardingAnimation(false)\n        }, 500)\n      })\n      .catch(e => {\n        console.error(e)\n      })\n  }\n  const getPlayedCards = () => {\n    const cardsToRender = []\n    let j = 0\n    for (let i = 0; i < cards.length; i++) {\n      if (playedIndices.includes(i)) {\n        cardsToRender.push(null)\n      } else {\n        cardsToRender.push(cards[j])\n        j++\n      }\n    }\n    return discardingAnimation ? [...cardsToRender, ...cards.slice(j)] : cardsToRender\n  }\n  const withMaxWidth = (children: ReactNode, index: number, noPad = false) => (\n    <div\n      style={{\n        padding: noPad ? 0 : '8px',\n        maxWidth: `calc(100vw / ${cards.length + 2})`,\n        transition: `max-width ${DURATION/3}s ease-in-out`\n      }}\n      onMouseEnter={() => setHovering(index)}\n      onTouchStart={() => setHovering(index)}\n      onMouseLeave={() => setHovering(null)}\n      onTouchEnd={() => setHovering(null)}>\n      {children}\n    </div>\n  )\n  return <div style={{\n    position: 'fixed',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 1,\n    transform: hide ? 'translateY(100%)' : 'translateY(40%)',\n    transition: `transform 0.3s ease-in-out`,\n    pointerEvents: 'none'\n  }}>\n    <div style={{\n      textAlign: 'center',\n      transform: 'translateY(-80px)',\n      margin: 'auto',\n      display: 'block',\n      pointerEvents: 'all'\n    }}>\n      {myTurn ? <>\n      {hide && <Button variant='contained' onClick={reveal}>\n        <Visibility/>\n      </Button>}\n      {!hide && chooseCardFor === ChooseCardFor.RESPOND_PLAY && <>\n        <Button variant='contained'\n          title={i18n.takeHit}\n          color='secondary'\n          onClick={() => window.confirm(i18n.areYouSureYouWantToTakeHit) && takeHit().catch(console.error)}\n        >\n          <Flag/>\n        </Button>\n        <Button style={{marginLeft: '8px'}} variant='contained'\n          title={i18n.respond}\n          color='primary'\n          onClick={handlePlayCards}\n        >\n          <PlayArrow/>\n        </Button>\n      </>}\n      {!hide && chooseCardFor === ChooseCardFor.FIRST_PLAY && <>\n        <Button variant='contained'\n          title={i18n.initializeHomoTransfer}\n          color='primary'\n          onClick={() => handlePlayCards(IMode.HOMO)}\n        >\n          <Equal/>\n        </Button>\n        <Button style={{marginLeft: '8px'}} variant='contained'\n          title={i18n.initializeHeteroTransfer}\n          color='primary'\n          onClick={() => handlePlayCards(IMode.HETERO)}\n        >\n          <NotEqual/>\n        </Button>\n      </>}\n      {!hide && chooseCardFor === ChooseCardFor.DISCARD && <>\n        <Button variant='contained'\n          color='secondary'\n          title={i18n.trash}\n          onClick={handlePlayCards}\n        >\n          <Delete/>\n        </Button>\n      </>}\n      </>: i18n.notYourTurn}\n    </div>\n    <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'nowrap' }}>\n      {\n        getPlayedCards().map((card, index) => (\n          card === null\n            ? <PlaceHolder key={index} maxWidth={`calc(100vw / ${cards.length + 2} + 16px)`}/>\n            : withMaxWidth(<Card\n              card={card}\n              onClick={() => handleCardClick(card, index)}\n              disabled={hide}\n              style={{ transform: (hovering === index || selected.has(index)) ? 'translateY(-30%)' : undefined }}\n              selected={selected.has(index)}\n              isDelete={chooseCardFor === ChooseCardFor.DISCARD}\n            />, index)))\n      }\n      {playedIndices.length > 0 && !discardingAnimation && <div style={{\n        maxWidth: playGetCardAnimation ? `calc((100vw / ${cards.length + 2} + 16px) * ${playedIndices.length})` : '0',\n        transition: `max-width ${DURATION}s ease-in-out`,\n        display: 'flex',\n        flexWrap: 'nowrap'\n      }}>\n        {\n          cards.slice(cards.length - playedIndices.length).map((card, index) => (\n            withMaxWidth(\n              <Card\n                card={card}\n                onClick={() => handleCardClick(card, index)}\n                disabled={hide}\n                style={{ transform: !playGetCardAnimation ? 'translateX(100vw)' : undefined }}\n                selected={selected.has(index)}\n              />\n              , index + cards.length, false\n            )\n          ))\n        }\n      </div>}\n    </div>\n  </div>\n}\n","import { ICard } from './types'\r\n\r\nexport const cardCount = {\r\n  [ICard.EARTH_MAGE]: 9,\r\n  [ICard.WATER_MAGE]: 9,\r\n  [ICard.FIRE_MAGE]: 9,\r\n  [ICard.WIND_MAGE]: 9,\r\n  [ICard.THUNDER_MAGE]: 9,\r\n  [ICard.EARTH_MISSILE]: 9,\r\n  [ICard.WATER_MISSILE]: 9,\r\n  [ICard.FIRE_MISSILE]: 9,\r\n  [ICard.WIND_MISSILE]: 9,\r\n  [ICard.THUNDER_MISSILE]: 9,\r\n  [ICard.LIGHT_MAGILE]: 3,\r\n  [ICard.DARK_MAGILE]: 3,\r\n  [ICard.HOMO_IGNITE]: 3,\r\n  [ICard.HETERO_IGNITE]: 3,\r\n  [ICard.ANGEL_GUARD]: 6\r\n}\r\n","import { ICard, ICardColor, ICardType, IMode } from './types'\r\nimport { GameState } from './GameState'\r\nimport { i18nSub } from 'gamenet-material'\r\n\r\nexport const basicDamage = (count: number, mode: IMode | null): number => {\r\n  switch (mode) {\r\n    case IMode.HOMO:\r\n      switch (count) {\r\n        case 1:\r\n        case 2:\r\n        case 3:\r\n        case 4:\r\n          return 1\r\n        case 5:\r\n        case 6:\r\n        case 7:\r\n          return 2\r\n        default:\r\n          return 3\r\n      }\r\n    case IMode.HETERO:\r\n      switch (count) {\r\n        case 1:\r\n        case 2:\r\n        case 3:\r\n        case 4:\r\n          return 1\r\n        case 5:\r\n        case 6:\r\n          return 2\r\n        default:\r\n          return 3\r\n      }\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n\r\nexport const computeDamage = (state: GameState) => {\r\n  const igniteCount = state.stage.filter(card => getCardType(card) === ICardType.IGNITE).length\r\n  const basic = basicDamage(state.stage.filter(card => getCardColor(card) !== ICardColor.NONE).length, state.mode)\r\n  return basic + Math.max(igniteCount - 1, 0) + (state.duel ? 1 : 0)\r\n}\r\n\r\nexport const getCardType = (card: ICard): ICardType => {\r\n  switch (card) {\r\n    case ICard.EARTH_MAGE:\r\n    case ICard.WATER_MAGE:\r\n    case ICard.FIRE_MAGE:\r\n    case ICard.WIND_MAGE:\r\n    case ICard.THUNDER_MAGE:\r\n      return ICardType.MAGE\r\n    case ICard.EARTH_MISSILE:\r\n    case ICard.WATER_MISSILE:\r\n    case ICard.FIRE_MISSILE:\r\n    case ICard.WIND_MISSILE:\r\n    case ICard.THUNDER_MISSILE:\r\n      return ICardType.MISSILE\r\n    case ICard.LIGHT_MAGILE:\r\n    case ICard.DARK_MAGILE:\r\n      return ICardType.MAGILE\r\n    case ICard.HETERO_IGNITE:\r\n    case ICard.HOMO_IGNITE:\r\n      return ICardType.IGNITE\r\n    case ICard.ANGEL_GUARD:\r\n      return ICardType.ANGEL_GUARD\r\n  }\r\n}\r\n\r\nexport const areCardsOfTypeOrMagile = (cards: ICard[], type: ICardType): boolean => {\r\n  return cards.reduce<boolean>((prev, curr) => {\r\n    const cardType = getCardType(curr)\r\n    return prev && (cardType === type || cardType === ICardType.MAGILE)\r\n  }, true)\r\n}\r\n\r\nexport const getCardColor = (card: ICard): ICardColor => {\r\n  switch (card) {\r\n    case ICard.EARTH_MAGE:\r\n    case ICard.EARTH_MISSILE:\r\n      return ICardColor.EARTH\r\n    case ICard.WATER_MAGE:\r\n    case ICard.WATER_MISSILE:\r\n      return ICardColor.WATER\r\n    case ICard.FIRE_MAGE:\r\n    case ICard.FIRE_MISSILE:\r\n      return ICardColor.FIRE\r\n    case ICard.WIND_MAGE:\r\n    case ICard.WIND_MISSILE:\r\n      return ICardColor.WIND\r\n    case ICard.THUNDER_MAGE:\r\n    case ICard.THUNDER_MISSILE:\r\n      return ICardColor.THUNDER\r\n    case ICard.LIGHT_MAGILE:\r\n      return ICardColor.LIGHT\r\n    case ICard.DARK_MAGILE:\r\n      return ICardColor.DARK\r\n    default:\r\n      return ICardColor.NONE\r\n  }\r\n}\r\n\r\nexport const isActionCard = (card: ICard) => {\r\n  return ![ICardType.MISSILE, ICardType.MAGE].includes(getCardType(card))\r\n}\r\n\r\nexport const areCardsOfColor = (cards: ICard[], color: ICardColor): boolean => {\r\n  return cards.reduce<boolean>((prev, curr) => {\r\n    return prev && getCardColor(curr) === color\r\n  }, true)\r\n}\r\n\r\nexport const areCardsOfDifferentColor = (cards: ICard[]): boolean => {\r\n  const seenColor = new Set()\r\n  const filteredCards = cards.filter((card) => getCardColor(card) !== ICardColor.NONE)\r\n  filteredCards.forEach((card) => {\r\n    seenColor.add(getCardColor(card))\r\n  })\r\n  return seenColor.size === filteredCards.length\r\n}\r\n\r\nexport const hasCardColorNone = (cards: ICard[]): boolean => {\r\n  return !!cards.find((card) => getCardColor(card) === ICardColor.NONE)\r\n}\r\n\r\nexport const canPlayCard = (state: GameState, card: ICard): boolean => {\r\n  const { mode, duel, ignited } = state\r\n  if (duel) {\r\n    if ([ICardType.MAGILE, ICardType.IGNITE, ICardType.ANGEL_GUARD].includes(getCardType(card))) {\r\n      return false\r\n    }\r\n  }\r\n  if (state.stage.length === 0) {\r\n    return !isActionCard(card)\r\n  }\r\n  if (card === ICard.ANGEL_GUARD) {\r\n    return true\r\n  }\r\n  if (ignited) {\r\n    if (![ICardType.IGNITE, ICardType.ANGEL_GUARD].includes(getCardType(card))) {\r\n      return false\r\n    }\r\n  }\r\n  if (mode === IMode.HOMO) {\r\n    return card === ICard.HOMO_IGNITE || getCardColor(card) === getCardColor(state.stage[0])\r\n  }\r\n  if (mode === IMode.HETERO) {\r\n    return card === ICard.HETERO_IGNITE || (areCardsOfTypeOrMagile([card], getCardType(state.stage[0])) && areCardsOfDifferentColor([...state.stage, card]))\r\n  }\r\n  console.warn('canPlayCard EDGECASE!!!', state, card)\r\n  return false\r\n}\r\n\r\nexport const randInt = (max: number) => {\r\n  return Math.floor(Math.random() * max)\r\n}\r\n\r\nexport const buildError = (messageKey: string, values?: Record<string, string>, variables?: Record<string, string | string[]>): Error => {\r\n  return new Error(JSON.stringify({ messageKey, values: values ?? {}, variables }))\r\n}\r\n\r\nexport const decodeError = (error: Error, i18n: Record<string, unknown>): string => {\r\n  const { messageKey, values, variables } = JSON.parse(error.message)\r\n  Object.entries((variables ?? {}) as Record<string, string | string[]>).forEach(([varName, i18nKey]) => {\r\n    if (typeof i18nKey === 'string') {\r\n      values[varName] = i18n[i18nKey]\r\n    } else {\r\n      values[varName] = i18nKey.map(key => i18n[key]).join(', ')\r\n    }\r\n  })\r\n  return i18nSub(i18n[messageKey] as string, { ...values })\r\n}\r\n\r\n","import { NetworkReducer } from 'smnet'\r\nimport { GameState } from './GameState'\r\nimport { GameAction, GameActionType, PlayCardPayload } from './GameAction'\r\nimport { allColors, ICard, ICardColor, ICardType, IDeck, IMode, IPlayCard, IStateMapper } from './types'\r\nimport { compose, GameActionTypes, shuffle } from 'gamenet'\r\nimport { cardCount } from './constants'\r\nimport {\r\n  areCardsOfColor,\r\n  areCardsOfDifferentColor,\r\n  areCardsOfTypeOrMagile,\r\n  buildError,\r\n  computeDamage,\r\n  getCardColor,\r\n  getCardType,\r\n  hasCardColorNone, isActionCard\r\n} from './utils'\r\n\r\nconst getFullDeck = (): IDeck => {\r\n  return Object.entries(cardCount).flatMap(([card, count]) => Array(count).fill(card))\r\n}\r\n\r\nconst withDrawCard: (playerId: number) => IStateMapper = playerId => state => {\r\n  if (state.playerDeck[playerId].length >= state.playerHp[playerId]) {\r\n    throw buildError('cannotDraw$playerAlreadyHas$countCards', {\r\n      player: state.players[playerId],\r\n      count: `${state.playerHp[playerId]}`\r\n    })\r\n  }\r\n  const card = state.drawDeck[0]\r\n  if (card === undefined) {\r\n    return withDrawCard(playerId)({ ...state, drawDeck: shuffle(state.trashDeck), trashDeck: [] })\r\n  } else {\r\n    const hand = [...state.playerDeck[playerId], card]\r\n    const playerDeck = [...state.playerDeck]\r\n    playerDeck[playerId] = hand\r\n    if (hand.length < state.playerHp[playerId]) {\r\n      return withDrawCard(playerId)({ ...state, playerDeck, drawDeck: state.drawDeck.slice(1) })\r\n    } else {\r\n      return { ...state, playerDeck, drawDeck: state.drawDeck.slice(1) }\r\n    }\r\n  }\r\n}\r\n\r\nconst withEnsureDuelNotFunctionCard: (playerId: number) => IStateMapper = playerId => state => {\r\n  if (state.duel) {\r\n    const hand = state.playerDeck[playerId]\r\n    if (hand.filter(isActionCard).length === hand.length)\r\n      return compose(\r\n        withEnsureDuelNotFunctionCard(playerId),\r\n        withDrawCard(playerId),\r\n        withDiscardCard({ cards: hand }, playerId)\r\n      )(state)\r\n  }\r\n  return state\r\n}\r\n\r\nconst withInitGame: IStateMapper = (prevState: GameState) => {\r\n  prevState = {\r\n    ...prevState,\r\n    turn: 0,\r\n    direction: 1,\r\n    points: 0,\r\n    drawDeck: [],\r\n    stage: [],\r\n    mode: null,\r\n    trashDeck: [],\r\n    playerDeck: [],\r\n    playerHp: [],\r\n    logs: [],\r\n    lastAction: null,\r\n    ignited: false,\r\n    duel: false,\r\n    winner: null\r\n  }\r\n  const fullDeck = getFullDeck()\r\n  prevState.drawDeck = shuffle(fullDeck)\r\n  for (let id = 0; id < prevState.players.length; id++) {\r\n    prevState.playerDeck[id] = []\r\n    prevState.playerHp[id] = 7\r\n    prevState = withDrawCard(id)(prevState)\r\n  }\r\n  return { ...prevState }\r\n}\r\n\r\nconst withDiscardCard: IPlayCard = ({ cards }, playerId) => state => {\r\n  const trashDeck = [...state.trashDeck, ...cards]\r\n  const hand = [...state.playerDeck[playerId]]\r\n  cards.forEach((card) => {\r\n    const index = hand.indexOf(card)\r\n    if (index === -1) {\r\n      throw buildError('$playerDoesNotOwnCard$card', { player: state.players[playerId] }, { card })\r\n    }\r\n    hand.splice(index, 1)\r\n  })\r\n  const playerDeck = [...state.playerDeck]\r\n  playerDeck[playerId] = hand\r\n  return { ...state, trashDeck, playerDeck }\r\n}\r\n\r\nconst withPutToPlayed: IPlayCard = ({ cards }) => (state) => {\r\n  return { ...state, stage: [...state.stage, ...cards] }\r\n}\r\n\r\nconst withCardNumberValidation: IPlayCard = (_, playerId) => (state) => {\r\n  if (state.playerDeck[playerId].length > state.playerHp[playerId]) {\r\n    throw buildError('playerCardMoreThanHp')\r\n  }\r\n  return state\r\n}\r\n\r\nconst withCardTypeValidation: IPlayCard = ({ cards }, playerId) => state => {\r\n  if (cards.length === 3) {\r\n    if (cards.map(card => getCardColor(card)).includes(ICardColor.NONE)) {\r\n      throw buildError('cannotMixIgniteAngelWithMagiles')\r\n    }\r\n    if (state.duel) {\r\n      if (cards.map(card => getCardType(card)).includes(ICardType.MAGILE)) {\r\n        throw buildError('cannotPlayFunctionDuringDuel')\r\n      }\r\n    }\r\n  } else if (cards.length === 1) {\r\n    if (state.duel) {\r\n      const cardType = getCardType(cards[0])\r\n      if ([ICardType.MAGILE, ICardType.IGNITE, ICardType.ANGEL_GUARD].includes(cardType)) {\r\n        throw buildError('cannotPlayFunctionDuringDuel')\r\n      }\r\n    }\r\n  } else {\r\n    throw buildError('canPlayOnly1Or3Cards')\r\n  }\r\n  return state\r\n}\r\n\r\nconst withFirstPlayValidation: IPlayCard = ({ cards, mode }, playerId) => (state) => {\r\n  if (state.stage.length === 0) {\r\n    if (mode === null || mode === undefined) {\r\n      throw buildError('specifyHomoOrHeteroAtFirstTransfer')\r\n    }\r\n    if (mode === IMode.HOMO && state.playerHp[(playerId + 1) % state.players.length] === 1) {\r\n      throw buildError('canOnlyDoHeteroWhenNextIs1hp')\r\n    }\r\n    if (cards.length !== 1) {\r\n      throw buildError('canOnlyPlay1CardWhenAtFirstTransfer')\r\n    }\r\n    if (getCardType(cards[0]) !== ICardType.MAGE && getCardType(cards[0]) !== ICardType.MISSILE) {\r\n      throw buildError('canOnlyPlayNonFunctionWhenAtFirstTransfer')\r\n    }\r\n    return { ...state, mode }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withPlayHomo: IPlayCard = ({ cards }) => state => {\r\n  if (state.mode === IMode.HOMO && !state.ignited) {\r\n    if (state.stage.length === 0) {\r\n      return { ...state }\r\n    }\r\n    const cardColor = getCardColor(cards[0])\r\n    if (cardColor !== ICardColor.NONE) {\r\n      if (!areCardsOfColor(cards, getCardColor(state.stage[0]))) {\r\n        throw buildError('canOnlyPlay$colorInThisHomoTransfer', {}, { color: cardColor })\r\n      }\r\n      return { ...state }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withPlayHetero: IPlayCard = ({ cards }) => state => {\r\n  if (state.mode === IMode.HETERO && !state.ignited) {\r\n    if (state.stage.length === 0) {\r\n      return { ...state }\r\n    }\r\n    if (!hasCardColorNone(cards)) {\r\n      const type = getCardType(state.stage[0])\r\n      if (!areCardsOfDifferentColor([...state.stage, ...cards])) {\r\n        const stageColors = state.stage.map(card => getCardColor(card))\r\n        const colorsPlayed = cards.map(card => getCardColor(card)).filter(color => stageColors.includes(color))\r\n        const colorsCanPlay = allColors.filter(color => !stageColors.includes(color))\r\n        throw buildError('$colorsPlayedAnd$colorsCanPlayInThisHetero$typeTransfer', {}, {\r\n          type,\r\n          type2: type,\r\n          colorsPlayed,\r\n          colorsCanPlay\r\n        })\r\n      } else {\r\n        if (!areCardsOfTypeOrMagile(cards, type)) {\r\n          if (state.duel) {\r\n            throw buildError('youMayPlay$typeOnly', {}, { type })\r\n          } else {\r\n            throw buildError('youMayPlay$typeOrMagileOnly', {}, { type })\r\n          }\r\n        } else {\r\n          return { ...state }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withPlayIgnite: IPlayCard = ({ cards }) => state => {\r\n  if (cards.length === 1) {\r\n    const card = cards[0]\r\n    if (card === ICard.HETERO_IGNITE) {\r\n      if (state.mode === IMode.HETERO) {\r\n        return { ...state, ignited: true }\r\n      } else {\r\n        throw buildError('cannotPlayHeteroIgniteDuringHomoTransfer')\r\n      }\r\n    }\r\n    if (card === ICard.HOMO_IGNITE) {\r\n      if (state.mode === IMode.HOMO) {\r\n        return { ...state, ignited: true }\r\n      } else {\r\n        throw buildError('cannotPlayHomoIgniteDuringHeteroTransfer')\r\n      }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withPlayAngleGuard: IPlayCard = ({ cards }) => state => {\r\n  if (cards.length === 1) {\r\n    if (cards[0] === ICard.ANGEL_GUARD) {\r\n      return { ...state }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nconst withStateChangedValidation = (prevState: GameState): IPlayCard => () => state => {\r\n  if (prevState === state) {\r\n    throw buildError('invalidMove')\r\n  }\r\n  return state\r\n}\r\n\r\nexport const withIncrementTurn: IStateMapper = prevState => {\r\n  const nextPlayerId = (prevState.turn + prevState.players.length + prevState.direction) % prevState.players.length\r\n  return { ...prevState, turn: nextPlayerId }\r\n}\r\n\r\nconst withPlayCard: (playerId: number, payload: PlayCardPayload) => IStateMapper = (playerId, payload) => prevState => {\r\n  if (prevState.turn !== playerId) {\r\n    throw buildError('notYourTurn')\r\n  }\r\n  const nextState = compose(\r\n    withCheckWin,\r\n    withCheckHit,\r\n    withIncrementTurn,\r\n    withEnsureDuelNotFunctionCard(playerId),\r\n    withDrawCard(playerId),\r\n    ...[\r\n      withPutToPlayed,\r\n      withDiscardCard,\r\n      withStateChangedValidation(prevState),\r\n      withPlayAngleGuard,\r\n      withPlayIgnite,\r\n      withPlayHetero,\r\n      withPlayHomo,\r\n      withCardTypeValidation,\r\n      withFirstPlayValidation,\r\n      withCardNumberValidation\r\n    ].map(playCard => playCard(payload, playerId))\r\n  )(prevState)\r\n  return { ...nextState, lastAction: { ...payload, playerId } }\r\n}\r\n\r\nexport const withCheckWin: IStateMapper = state => {\r\n  const playerIdLose = state.playerHp.findIndex(hp => hp <= 0)\r\n  if (playerIdLose !== -1) {\r\n    return { ...state, winner: playerIdLose }\r\n  }\r\n  return state\r\n}\r\n\r\nexport const withCheckHit: IStateMapper = prevState => {\r\n  if (ableToResponse(prevState)) {\r\n    return prevState\r\n  } else {\r\n    return withHit(prevState)\r\n  }\r\n}\r\n\r\nconst ableToResponse = (state: GameState): boolean => {\r\n  const { ignited, duel, turn, mode } = state\r\n  const hand = state.playerDeck[turn]\r\n  if (!duel && !!hand.find(card => card === ICard.ANGEL_GUARD)) {\r\n    return true\r\n  }\r\n  if (mode === IMode.HETERO) {\r\n    if (!duel && !!hand.find(card => card === ICard.HETERO_IGNITE)) {\r\n      return true\r\n    }\r\n    if (ignited) {\r\n      return hand.includes(ICard.HETERO_IGNITE)\r\n    }\r\n    return hand\r\n      .filter(card => getCardColor(card) !== ICardColor.NONE)\r\n      .filter(card => duel ? getCardType(card) !== ICardType.MAGILE : true)\r\n      .filter(card => areCardsOfTypeOrMagile([card], getCardType(state.stage[0])))\r\n      .filter(card => !state.stage.map(card => getCardColor(card)).includes(getCardColor(card))).length > 0\r\n  } else {\r\n    if (!duel && !!hand.find(card => card === ICard.HOMO_IGNITE)) {\r\n      return true\r\n    }\r\n    if (ignited) {\r\n      return hand.includes(ICard.HOMO_IGNITE)\r\n    }\r\n    return hand\r\n      .filter(card => getCardColor(card) === getCardColor(state.stage[0]))\r\n      .length > 0\r\n  }\r\n}\r\n\r\nconst withHit = (state: GameState): GameState => {\r\n  if (state.mode !== null) {\r\n    const { turn } = state\r\n    const hit = computeDamage(state)\r\n    const playerHp = [...state.playerHp]\r\n    playerHp[turn] -= hit\r\n    return {\r\n      ...state,\r\n      playerHp\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nexport const withLog: (log: string) => IStateMapper = log => prevState => {\r\n  return { ...prevState, logs: [...prevState.logs, log] }\r\n}\r\n\r\nconst withCheckDiscardToHp: IPlayCard = (payload, playerId) => state => {\r\n  if (state.playerDeck[playerId].length - payload.cards.length !== state.playerHp[playerId]) {\r\n    const count = `${state.playerDeck[playerId].length - state.playerHp[playerId]}`\r\n    throw buildError('shouldDiscard$countCards', { count })\r\n  }\r\n  return state\r\n}\r\n\r\nconst withClearStage: IStateMapper = state => {\r\n  return {\r\n    ...state,\r\n    stage: [],\r\n    trashDeck: [...state.stage],\r\n    lastAction: null,\r\n    ignited: false,\r\n    duel: state.duel || state.playerHp[state.turn] <= 3,\r\n    mode: null\r\n  }\r\n}\r\n\r\nexport const GameReducer: NetworkReducer<GameState, GameAction> = (prevState, action) => {\r\n  const peerId = action.peerId\r\n  if (peerId === undefined) {\r\n    throw new Error('Expect peerId in action')\r\n  }\r\n  const playerId = (): number => {\r\n    const id = prevState.nameDict[prevState.members[peerId]]\r\n    if (id === undefined) {\r\n      throw new Error('game not started')\r\n    }\r\n    return id\r\n  }\r\n  switch (action.type) {\r\n    case GameActionTypes.START:\r\n      return withInitGame(prevState)\r\n    case GameActionType.PLAY_CARD:\r\n      return withPlayCard(playerId(), action.payload)(JSON.parse(JSON.stringify(prevState)))\r\n    case GameActionType.DISCARD_CARD:\r\n      return compose(withEnsureDuelNotFunctionCard(playerId()), withClearStage, ...[withDiscardCard, withCheckDiscardToHp].map(step => step(action.payload, playerId())))(JSON.parse(JSON.stringify(prevState)))\r\n    case GameActionType.TAKE_HIT:\r\n      return withCheckWin(withHit(prevState))\r\n    case GameActionType.END:\r\n      return { ...prevState, started: false, ready: {} }\r\n  }\r\n  return prevState\r\n}\r\n","import { GameState } from './GameState'\r\nimport { GameAction, GameActionType } from './GameAction'\r\nimport { getCardColor, getCardType, isActionCard, randInt } from './utils'\r\nimport { allColors, ICard, ICardColor, ICardType, IDeck, IMode } from './types'\r\n\r\nconst countByColor = (hand: IDeck, excludeMagile: boolean): Record<ICardColor, number> => {\r\n  return hand\r\n    .map(card => getCardColor(card))\r\n    .filter(color => color !== ICardColor.NONE)\r\n    .filter(color => !excludeMagile || ![ICardColor.LIGHT, ICardColor.DARK].includes(color))\r\n    .reduce<Record<ICardColor, number>>(((previousValue, currentValue) => ({\r\n      ...previousValue,\r\n      [currentValue]: (previousValue[currentValue] ?? 0) + 1\r\n    })), {} as Record<ICardColor, number>)\r\n}\r\n\r\nconst countByTypeUniqueColor = (hand: IDeck, excludeMagile: boolean): Record<ICardType, number> => {\r\n  return hand\r\n    .filter(card => getCardColor(card) !== ICardColor.NONE)\r\n    .filter((card, k, cards) => cards.indexOf(card) === k)\r\n    .reduce<Record<ICardType, number>>(((record, card) => {\r\n      const type: ICardType = getCardType(card)\r\n      if(type === ICardType.MAGILE && excludeMagile) {\r\n        return record\r\n      }\r\n      if (type === ICardType.MAGILE && !excludeMagile) {\r\n        return {\r\n          [ICardType.MISSILE]: (record[ICardType.MISSILE] ?? 0) + 1,\r\n          [ICardType.MAGE]: (record[ICardType.MAGE] ?? 0) + 1\r\n        } as Record<ICardType, number>\r\n      }\r\n      return {\r\n        ...record,\r\n        [type]: (record[type] ?? 0) + 1\r\n      }\r\n    }), {} as Record<ICardType, number>)\r\n}\r\n\r\nconst sortDict = <T extends string | number> (dict: Record<T, number>): Array<[T, number]> => {\r\n  return Object.entries<number>(dict).sort((a, b) => (b[1] - a[1])) as Array<[T, number]>\r\n}\r\n\r\nconst buildPlayCardAction = (cards: ICard[], mode?: IMode): GameAction => {\r\n  return {\r\n    type: GameActionType.PLAY_CARD,\r\n    payload: {\r\n      cards,\r\n      mode\r\n    }\r\n  }\r\n}\r\n\r\nconst aiDiscard = (state: GameState, turn: number): GameAction => {\r\n  const hand: ICard[] = [...state.playerDeck[turn]]\r\n  const amountToDiscard = hand.length - state.playerHp[turn]\r\n  const discards: ICard[] = []\r\n  if (state.duel) {\r\n    while (discards.length < amountToDiscard && hand.find(isActionCard)) {\r\n      discards.push(hand.splice(hand.findIndex(isActionCard), 1)[0])\r\n    }\r\n  }\r\n  while (discards.length < amountToDiscard) {\r\n    discards.push(hand.splice(randInt(hand.length), 1)[0])\r\n  }\r\n  return {\r\n    type: GameActionType.DISCARD_CARD,\r\n    payload: {\r\n      cards: discards\r\n    }\r\n  }\r\n}\r\n\r\nconst aiFirstCard = (state: GameState, turn: number): GameAction => {\r\n  const hand: ICard[] = [...state.playerDeck[turn]]\r\n  const byColor: Array<[ICardColor, number]> = sortDict(countByColor(hand, true))\r\n  const byType: Array<[ICardType, number]> = sortDict(countByTypeUniqueColor(hand, state.duel))\r\n  const nextPlayerHp = state.playerHp[(turn + 1) % state.playerHp.length]\r\n  console.log({ byColor, byType })\r\n  const magileCount = hand.filter(card => getCardType(card) === ICardType.MAGILE).length\r\n  const mode = nextPlayerHp !== 1 && !(byColor[0][1] + 1 <= byType[0][1] && magileCount < byType[0][1]) ? IMode.HOMO : IMode.HETERO\r\n  if (mode === IMode.HOMO) {\r\n    return buildPlayCardAction([hand.find((card) => getCardColor(card) === byColor[0][0]) as ICard], mode)\r\n  } else {\r\n    return buildPlayCardAction([hand.find((card) => getCardType(card) === byType[0][0]) as ICard], mode)\r\n  }\r\n}\r\n\r\nconst aiPlayCard = (state: GameState, playerId: number): GameAction => {\r\n  const hand = state.playerDeck[playerId]\r\n  const { mode, ignited, duel } = state\r\n  if (mode === IMode.HOMO) {\r\n    if(!ignited) {\r\n      const stageColor = getCardColor(state.stage[0])\r\n      const cards = hand.filter(card => getCardColor(card) === stageColor)\r\n      if (cards.length > 3) {\r\n        return buildPlayCardAction(cards.slice(0, 3))\r\n      }\r\n      if (cards.length > 0) {\r\n        return buildPlayCardAction([cards[0]])\r\n      }\r\n    }\r\n    if(!duel) {\r\n      const homoIgnite = hand.find(card => card === ICard.HOMO_IGNITE)\r\n      if(homoIgnite) {\r\n        return buildPlayCardAction([homoIgnite])\r\n      }\r\n      const angelGuard = hand.find(card => card === ICard.ANGEL_GUARD)\r\n      if(angelGuard) {\r\n        return buildPlayCardAction([angelGuard])\r\n      }\r\n    }\r\n  } else {\r\n    if(!ignited) {\r\n      const stageColors = state.stage.map(card => getCardColor(card))\r\n      const stageType = getCardType(state.stage[0])\r\n      const playableColors = new Set(allColors.filter(color => !stageColors.includes(color)))\r\n      const cards = hand.filter(card => {\r\n        const cardColor = getCardColor(card)\r\n        if(getCardType(card) === stageType && playableColors.has(cardColor)) {\r\n          playableColors.delete(cardColor)\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n      console.log('playable colors', playableColors, cards)\r\n      if (cards.length > 3) {\r\n        return buildPlayCardAction(cards.slice(0, 3))\r\n      }\r\n      if (cards.length > 0) {\r\n        return buildPlayCardAction([cards[0]])\r\n      }\r\n    }\r\n    if(!duel) {\r\n      const heteroIgnite = hand.find(card => card === ICard.HETERO_IGNITE)\r\n      if(heteroIgnite) {\r\n        return buildPlayCardAction([heteroIgnite])\r\n      }\r\n      const angelGuard = hand.find(card => card === ICard.ANGEL_GUARD)\r\n      if(angelGuard) {\r\n        return buildPlayCardAction([angelGuard])\r\n      }\r\n    }\r\n  }\r\n  console.warn('AI PLAY CARD REACH EDGE CASE, TAKE HIT', state, playerId)\r\n  return {\r\n    type: GameActionType.TAKE_HIT\r\n  }\r\n}\r\n\r\nexport const aiAction = (state: GameState, turn: number): GameAction => {\r\n  if (state.playerDeck[turn].length > state.playerHp[turn]) {\r\n    return aiDiscard(state, turn)\r\n  }\r\n  if (state.stage.length === 0) {\r\n    return aiFirstCard(state, turn)\r\n  }\r\n  return aiPlayCard(state, turn)\r\n}\r\n","import React, { createContext, FunctionComponent, useContext, useEffect } from 'react'\r\nimport { BoardGameContextInterface, useBoardGameNetwork } from 'gamenet'\r\nimport { GameState } from './GameState'\r\nimport { GameReducer } from './GameReducer'\r\nimport { GameAction } from './GameAction'\r\nimport { aiAction } from './aiAction'\r\n\r\nconst Poker99Context = createContext<BoardGameContextInterface<GameState, GameAction> | null>(null)\r\n\r\nexport const withGameNetwork = (Component: FunctionComponent): FunctionComponent => {\r\n  const WithGameNetwork: FunctionComponent = props => {\r\n    const network = useBoardGameNetwork(GameReducer, new GameState())\r\n    const {myAis, state,dispatchAs} = network\r\n    useEffect(() => {\r\n      if (aiAction !== undefined && myAis.includes(state.players[state.turn]) && state.started && state.winner === null) {\r\n        const cb = (): void => {\r\n          const action = aiAction(state, state.turn)\r\n          // action.peerId = Object.keys(state.members).filter(peerId => state.members[peerId] === state.players[state.turn])[0]\r\n          dispatchAs(state.turn, action).catch(console.error)\r\n        }\r\n        const n = window.setTimeout(cb, 1000)\r\n        return () => {\r\n          window.clearTimeout(n)\r\n        }\r\n      }\r\n    }, [dispatchAs, myAis, state])\r\n    return (\r\n      <Poker99Context.Provider value={network}>\r\n        <Component {...props} />\r\n    </Poker99Context.Provider>\r\n  )\r\n  }\r\n  WithGameNetwork.displayName = 'WithGameNetwork'\r\n  return WithGameNetwork\r\n}\r\n\r\nexport const usePoker99 = (): BoardGameContextInterface<GameState, GameAction> => {\r\n  const network: BoardGameContextInterface<GameState, GameAction> | null = useContext(Poker99Context)\r\n  if (network === null) {\r\n    throw new Error('please wrap it using withGameNetwork before calling this hook')\r\n  }\r\n  return network\r\n}\r\n","import angel_guard from './angel_guard.png'\nimport dark_magile from './dark_magile.png'\nimport earth_mage from './earth_mage.png'\nimport earth_missile from './earth_missile.png'\nimport fire_mage from './fire_mage.png'\nimport fire_missile from './fire_missile.png'\nimport hetero_ignite from './hetero_ignite.png'\nimport homo_ignite from './homo_ignite.png'\nimport light_magile from './light_magile.png'\nimport thunder_mage from './thunder_mage.png'\nimport thunder_missile from './thunder_missile.png'\nimport water_mage from './water_mage.png'\nimport water_missile from './water_missile.png'\nimport wind_mage from './wind_mage.png'\nimport wind_missile from './wind_missile.png'\n\nexport const cardImages = {\n  angel_guard,\n  dark_magile,\n  earth_mage,\n  earth_missile,\n  fire_mage,\n  fire_missile,\n  hetero_ignite,\n  homo_ignite,\n  light_magile,\n  thunder_mage,\n  thunder_missile,\n  water_mage,\n  water_missile,\n  wind_mage,\n  wind_missile\n}\n","export default __webpack_public_path__ + \"static/media/angel_guard.16ea5f11.png\";","export default __webpack_public_path__ + \"static/media/dark_magile.1e723600.png\";","export default __webpack_public_path__ + \"static/media/earth_mage.e84ed39c.png\";","export default __webpack_public_path__ + \"static/media/earth_missile.c93568e4.png\";","export default __webpack_public_path__ + \"static/media/fire_mage.0e5240db.png\";","export default __webpack_public_path__ + \"static/media/fire_missile.6d251f43.png\";","export default __webpack_public_path__ + \"static/media/hetero_ignite.4942ab4f.png\";","export default __webpack_public_path__ + \"static/media/homo_ignite.0dedd4a2.png\";","export default __webpack_public_path__ + \"static/media/light_magile.787bb1b9.png\";","export default __webpack_public_path__ + \"static/media/thunder_mage.fea8f838.png\";","export default __webpack_public_path__ + \"static/media/thunder_missile.bb1203a2.png\";","export default __webpack_public_path__ + \"static/media/water_mage.c01f4c8a.png\";","export default __webpack_public_path__ + \"static/media/water_missile.fb44c368.png\";","export default __webpack_public_path__ + \"static/media/wind_mage.64b5492a.png\";","export default __webpack_public_path__ + \"static/media/wind_missile.c08191d4.png\";","import React, { FunctionComponent } from 'react'\r\nimport { ICard } from '../types'\r\nimport { makeStyles, Paper } from '@material-ui/core'\r\nimport { cardImages } from '../assets'\r\nimport { CheckCircleOutline } from 'mdi-material-ui'\r\nimport { green, red } from '@material-ui/core/colors'\r\nimport { CancelOutlined } from '@material-ui/icons'\r\nimport { useGamenetI18n } from 'gamenet-material'\r\n\r\nconst useStyle = makeStyles(() => ({\r\n  root: {\r\n    padding: '16px',\r\n    width: '110px',\r\n    height: '160px',\r\n    borderRadius: '8px',\r\n    cursor: 'pointer',\r\n    userSelect: 'none',\r\n    transition: 'transform 0.1s ease-in-out',\r\n    transformOrigin: 'center',\r\n    '&:hover': {\r\n      // transform: 'translateY(-50%)'\r\n    }\r\n  }\r\n}))\r\n\r\nexport const Card: FunctionComponent<{\r\n  card: ICard, onClick?: () => void, disabled?: boolean, style?: Record<string, unknown>, selected?: boolean, isDelete?: boolean\r\n}> = (\r\n  {\r\n    style,\r\n    card,\r\n    onClick,\r\n    disabled,\r\n    selected,\r\n    isDelete\r\n  }) => {\r\n  const classes = useStyle()\r\n  const {i18n} = useGamenetI18n()\r\n\r\n  return (\r\n    <Paper\r\n      elevation={4}\r\n      style={{\r\n        pointerEvents: disabled ? 'none' : 'auto',\r\n        backgroundImage: `url(${cardImages[card]})`,\r\n        backgroundSize: 'cover',\r\n        position: 'relative',\r\n        textAlign: 'left',\r\n        ...style\r\n      }}\r\n      className={classes.root} onClick={!disabled ? onClick : undefined}>\r\n      <h2 style={{ fontFamily: 'Big Shoulders Inline Text, inherit', margin: 0, color: 'white', textShadow: '5px 3px 8px black' }}>\r\n        {i18n[card]}\r\n      </h2>\r\n      {selected && <div style={{position: 'absolute', top: 0, right: 0}}>\r\n        {isDelete ? <CancelOutlined style={{ color: red[500] }} fontSize='large'/> : <CheckCircleOutline style={{ color: green[500] }} fontSize='large'/>}\r\n      </div>}\r\n    </Paper>\r\n  )\r\n}\r\n","import React, { FunctionComponent, useEffect, useState } from 'react'\r\nimport { usePoker99 } from './withGameNetwork'\r\nimport { GameAction, GameActionType, PlayCardPayload } from './GameAction'\r\nimport { ChooseCardFor, Deck } from './components/Deck'\r\n// import { PlayCardAdditionalModal } from './components/PlayCardAdditionalModal'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core'\r\nimport { decodeError } from './utils'\r\nimport { useGamenetI18n } from 'gamenet-material'\r\n\r\nexport const Game: FunctionComponent = () => {\r\n  const {\r\n    state,\r\n    dispatch,\r\n    dispatchAs,\r\n    myPlayerId,\r\n    myLocals,\r\n    hideDeck,\r\n    setHideDeck,\r\n    error,\r\n    setError,\r\n    renderedDeckId\r\n  } = usePoker99()\r\n  const [throttledRenderedId, setTrottledRenderedId] = useState(renderedDeckId)\r\n  const {i18n} = useGamenetI18n()\r\n  const handleError = (e: Error): void => {\r\n    console.error('HANDLE ERROR')\r\n    try {\r\n      setError(decodeError(e, i18n))\r\n    } catch {\r\n      setError(e.message)\r\n    }\r\n  }\r\n  const myTurn = state.turn === myPlayerId || myLocals.includes(state.players[state.turn])\r\n  const dispatchHelper = async (action: GameAction) => {\r\n    try{\r\n      if (state.turn === myPlayerId) {\r\n        await dispatch(action).then(() => setError(''))\r\n      } else if (myLocals.includes(state.players[state.turn])) {\r\n        await dispatchAs(state.turn, action).then(() => setError(''))\r\n      } else {\r\n        throw new Error('Not my turn')\r\n      }\r\n    } catch (e) {\r\n      handleError(e)\r\n      throw e\r\n    }\r\n  }\r\n  const playCard = async (payload: PlayCardPayload) => {\r\n    const action: GameAction = {\r\n      type: GameActionType.PLAY_CARD,\r\n      payload\r\n    }\r\n    await dispatchHelper(action).then(() => {\r\n      if (myLocals.length > 0) {\r\n        setHideDeck(true)\r\n      }\r\n    })\r\n  }\r\n  const discardCard = async (payload: PlayCardPayload) => {\r\n    const action: GameAction = {\r\n      type: GameActionType.DISCARD_CARD,\r\n      payload\r\n    }\r\n    await dispatchHelper(action)\r\n  }\r\n  const takeHit = async () => {\r\n    const action: GameAction = {\r\n      type: GameActionType.TAKE_HIT,\r\n    }\r\n    await dispatchHelper(action)\r\n  }\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setTrottledRenderedId(renderedDeckId)\r\n    }, 500)\r\n  }, [renderedDeckId])\r\n  const again = async (): Promise<void> => {\r\n    await dispatch({\r\n      type: GameActionType.END\r\n    }).catch(handleError)\r\n  }\r\n  let chooseCardFor = ChooseCardFor.RESPOND_PLAY\r\n  if(state.stage.length === 0) {\r\n    chooseCardFor = ChooseCardFor.FIRST_PLAY\r\n  }\r\n  if(throttledRenderedId !== undefined && throttledRenderedId !== null && state.playerDeck[throttledRenderedId].length > state.playerHp[throttledRenderedId]) {\r\n    chooseCardFor = ChooseCardFor.DISCARD\r\n  }\r\n  const handleCardChoose = async (payload: PlayCardPayload) => {\r\n    if(chooseCardFor === ChooseCardFor.DISCARD) {\r\n      await discardCard(payload)\r\n    } else {\r\n      await playCard(payload)\r\n    }\r\n  }\r\n  return (\r\n    <div style={{ pointerEvents: 'all', color: 'white' }}>\r\n      {state.started && myPlayerId !== undefined &&\r\n      <Deck\r\n        cards={state.playerDeck[throttledRenderedId ?? myPlayerId]}\r\n        onCardsChoose={handleCardChoose}\r\n        chooseCardFor={chooseCardFor}\r\n        hide={hideDeck}\r\n        reveal={() => setHideDeck(false)}\r\n        takeHit={takeHit}\r\n        myTurn={myTurn}\r\n      />}\r\n      <div style={{ maxHeight: '50%' }}>\r\n        {state.logs.slice().reverse().map((s, k) => <div key={k}>{s}</div>)}\r\n      </div>\r\n      <Dialog open={error !== ''} onClose={() => setError('')} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle>Error</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {error}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setError('')} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n","import React, { FunctionComponent } from 'react'\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core'\nimport { useGamenetI18n } from 'gamenet-material'\n\nexport const DamageTable: FunctionComponent = () => {\n  const { i18n } = useGamenetI18n()\n  return (\n    <TableContainer component={Paper}>\n      <Table style={{ width: '100%' }} size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>{i18n.mode}</TableCell>\n            <TableCell>{i18n.count}</TableCell>\n            <TableCell>{i18n.damage}</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <TableCell rowSpan={3}>{i18n.homo}</TableCell>\n            <TableCell>1 - 4</TableCell>\n            <TableCell>1</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>5 - 7</TableCell>\n            <TableCell>2</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>8+</TableCell>\n            <TableCell>3</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell rowSpan={3}>{i18n.hetero}</TableCell>\n            <TableCell>1 - 4</TableCell>\n            <TableCell>1</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>5 - 6</TableCell>\n            <TableCell>2</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>7</TableCell>\n            <TableCell>3</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n","import { FunctionComponent, useState } from 'react'\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  IconButton\n} from '@material-ui/core'\nimport { Information } from 'mdi-material-ui'\nimport React from 'react'\nimport { useGamenetI18n } from 'gamenet-material'\nimport { DamageTable } from './DamageTable'\n\n\nexport const DamageTableToggleButton: FunctionComponent = () => {\n  const [open, setOpen] = useState(false)\n  const { i18n } = useGamenetI18n()\n  return (\n    <div style={{ position: 'fixed', left: 0, bottom: 0 }}>\n      <IconButton onClick={() => setOpen(true)}>\n        <Information/>\n      </IconButton>\n      <Dialog open={open} onClose={() => setOpen(false)} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle>{i18n.damageTable}</DialogTitle>\n        <DialogContent>\n          <DamageTable/>\n          <DialogContentText>\n            {i18n.damageTableHint}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpen(false)} color=\"primary\">\n            {i18n.close}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n","import React, { FunctionComponent, useEffect, useMemo, useState } from 'react'\r\nimport { usePoker99 } from '../withGameNetwork'\r\nimport { GameActionType } from '../GameAction'\r\nimport { Card } from './Card'\r\nimport { IDeck, IMode } from '../types'\r\nimport { computeDamage } from '../utils'\r\nimport { Button } from '@material-ui/core'\r\nimport { i18nSub, useGamenetI18n } from 'gamenet-material'\r\nimport { DamageTableToggleButton } from '../DamageTableToggleButton'\r\n\r\nexport const GameRenderer = () => {\r\n  const { state, myPlayerId, dispatch } = usePoker99()\r\n  const [prevCardPayload, setPrevCardPayload] = useState<null | IDeck>(null)\r\n  const [startAnimateCard, setStartAnimateCard] = useState(false)\r\n  const [showAnimateCard, setShowAnimateCard] = useState(false)\r\n  const {i18n} = useGamenetI18n()\r\n  useEffect(() => {\r\n    setShowAnimateCard(true)\r\n    setTimeout(() => {\r\n      setStartAnimateCard(true)\r\n    }, 1)\r\n    setTimeout(() => {\r\n      setPrevCardPayload(state.stage)\r\n      setStartAnimateCard(false)\r\n      setShowAnimateCard(false)\r\n    }, 300)\r\n  }, [state.lastAction])\r\n  const mp = (id: number): number => (id + state.playerHp.length) % state.playerHp.length\r\n  const center = {\r\n    top: '50vh',\r\n    left: '50vw'\r\n  }\r\n  const again = async (): Promise<void> => {\r\n    await dispatch({\r\n      type: GameActionType.END\r\n    }).catch(console.error)\r\n  }\r\n  const status = (() => {\r\n    if (state.started) {\r\n      if(state.winner !== null) {\r\n        const player = state.players[state.winner]\r\n        return i18nSub(i18n.loserIs$player, {player})\r\n      }\r\n      const player = state.players[state.turn]\r\n      if (state.playerDeck[state.turn].length > state.playerHp[state.turn]) {\r\n        return i18nSub(i18n.$playerDiscardCardTil$cardCount, {player, cardCount: `${state.playerHp[state.turn]}`})\r\n      }\r\n      if (state.stage.length === 0) {\r\n        return i18nSub(i18n.$playerInitializingTransfer, {player})\r\n      } else {\r\n        const mode = i18n[state.mode ?? IMode.HOMO]\r\n        return i18nSub(i18n.$playerRespondTo$modeTransfer, {player, mode})\r\n      }\r\n    }\r\n    return undefined\r\n  })()\r\n  const damage = useMemo(() => `${computeDamage(state)}`, [state])\r\n  const hint = (() => {\r\n    if(state.started) {\r\n      if(state.winner !== null) {\r\n        return i18n.gameOver\r\n      }\r\n      if(state.duel) {\r\n        return i18n.duelHint\r\n      }\r\n      if(state.ignited) {\r\n        return i18n.ignitedHint\r\n      }\r\n    }\r\n    return undefined\r\n  })()\r\n  return (\r\n    !state.started\r\n      ? <div\r\n        style={{ backgroundColor: 'green', position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, color: 'white' }}\r\n      />\r\n      : <div\r\n        style={{\r\n          backgroundColor: 'green',\r\n          position: 'fixed',\r\n          top: 0,\r\n          left: 0,\r\n          right: 0,\r\n          bottom: 0,\r\n          color: 'white',\r\n          boxShadow: state.duel ? 'inset 0 0 100px #ff9d9d' : undefined,\r\n          transition: 'box-shadow 0.3s ease-in-out'\r\n        }}>\r\n      <div style={{display: 'flex', justifyContent: 'space-around', margin: 'auto'}}>\r\n        {\r\n          new Array(state.players.length).fill(0).map((_, k) => mp(k + (myPlayerId ?? 0))).filter(id => id !== (myPlayerId ?? 0)).map(id => (\r\n            <div style={{border: `solid ${state.turn === id ? 'red' : 'transparent'} 2px`, padding: '16px 32px'}}>\r\n              <div>\r\n                {state.players[id]}\r\n              </div>\r\n              <div>\r\n                hp: {state.playerHp[id]}\r\n              </div>\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n        {/*{myPlayerId === undefined && <Name offset={0}/>}*/}\r\n        {prevCardPayload !== null &&\r\n        <div style={{ position: 'absolute', ...center }}>\r\n          <div style={{ transform: 'translate(-50%,-100%)', textAlign: 'center' }}>\r\n            {hint && <h3>{hint}</h3>}\r\n            <h1>{status}</h1>\r\n            {state.winner !== undefined && state.winner !== null && <div>\r\n              <Button variant=\"contained\" color='primary' onClick={again}>{i18n.again}</Button>\r\n            </div>}\r\n            <h3>{i18nSub(i18n.current$damage, {damage})}</h3>\r\n            <div style={{ display: 'flex', justifyContent: 'center', maxWidth: 'calc(100vw - 32px)', flexWrap: 'wrap', marginRight: 'auto', marginLeft: 'auto', marginBottom: '70px' }}>\r\n              {prevCardPayload.map(card => <div style={{ padding: '8px', maxHeight: '70px' }}><Card card={card} disabled/></div>)}\r\n            </div>\r\n          </div>\r\n        </div>}\r\n        {showAnimateCard && state.lastAction !== null && <div style={{\r\n          display: 'flex',\r\n          position: 'absolute',\r\n          left: '50vw',\r\n          top: startAnimateCard ? '50vh' : state.lastAction.playerId === myPlayerId ? '100vh' : '-100%',\r\n          transition: ['top', 'bottom', 'left', 'right'].map(s => `${s} 0.2s ease-in-out`).join(',')\r\n        }}>\r\n          <div style={{ transform: 'translate(-50%,-50%)', display: 'flex' }}>\r\n            {state.lastAction.cards.map(card => <div style={{ padding: '8px' }}><Card card={card} disabled/></div>)}\r\n          </div>\r\n        </div>}\r\n        <h3 style={{ position: 'absolute', bottom: 0, right: '20px' }}>{i18n.drawDeck}: {state.drawDeck.length}</h3>\r\n        <DamageTableToggleButton/>\r\n      </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport { DamageTable } from '../DamageTable'\n\nexport const howToPlay = (\n  <div>\n    <h1>Magile</h1>\n    <h2>Story</h2>\n    <p>\n      In a magical kingdom, there were some wizards. They always research a weapon called \"Mage\", a very powerful magic.\n    </p>\n    <p>\n      One day they met some engineers who were fans of ancient technologies. The engineers mixed ancient technologies\n      with modern magic, and created a new weapon called \"Missile\", challenged the cute wizards.\n    </p>\n    <p>\n      A battle between Mages and Missiles starts now!\n    </p>\n    <h2>Cards</h2>\n    <h4>Basic cards:</h4>\n    <ul>\n      <li>Mages*45: Earth, Water, Fire, Wind, Thunder each *9</li>\n      <li>Missile*45: Earth, Water, Fire, Wind, Thunder each *9</li>\n    </ul>\n    <h4>Function cards:</h4>\n    <ul>\n      <li>Magiles*6: Light, Dark each *3</li>\n      <li>Ignite*6: Homo, Hetero each *3</li>\n      <li>Angel Guard*6</li>\n    </ul>\n    <h2>How To Play</h2>\n    <ol>\n      <li>Choose first player randomly to initiate a transfer</li>\n      <li>Initiate transfer: choose one missile or mage and decide whether is it a homo transfer or hetero transfer</li>\n      <li>\n        <div>Next player respond to the transfer</div>\n        <ul>\n          <li>if it is a homo transfer, you can either\n            <ul>\n              <li>play 1/3 mage/missile of same color</li>\n              <li>or play a homo ignite</li>\n            </ul>\n          </li>\n          <li>if it is a hetero transfer, you can either\n            <ul>\n              <li>play 1/3 mage/missle/magile of color that were not played\n                yet, and same type as the first card(mage/missile), where magile is both a mage and a missile\n              </li>\n              <li>or play a hetero ignite</li>\n            </ul>\n          </li>\n          <li>If someone played an ignite at this transfer, you can only respond with same ignite or angel guard, each additional ignite +1 damage (that is first ignite dont have damage)</li>\n          <li>respond with an angel guard</li>\n          <li>give up respond and take damage</li>\n        </ul>\n      </li>\n      <li>After playing card, draw cards until number of cards = hp</li>\n      <li>\n        If cannot respond will be damaged. The amount refer to the damage table. Discard until number of cards = hp.\n        Same player initiate a new transfer\n      </li>\n      <li>If anyone hp {'<='} 3, game will enter duel mode. During duel mode all damage +1 and function card stop working (cannot respond with magile/ignite/angel guard). Effective to all players</li>\n      <li>If anyone hp {'<='} 0, game end and he is the only loser, the rest win</li>\n    </ol>\n    <h2>Damage Table</h2>\n    <DamageTable/>\n    <p>After playing first ignite in the transfer, each additional ignite damage+1; during duel damage+1.</p>\n  </div>\n)\n","import { gamenetI18n } from 'gamenet-material'\r\nimport React from 'react'\r\nimport { ICard, ICardColor, ICardType, IMode } from '../types'\r\nimport { howToPlay } from './howToPlay.en'\r\n\r\nexport const en = {\r\n  ...gamenetI18n.en,\r\n  gameName: 'Magile',\r\n  howToPlay: 'How To Play',\r\n  howToPlayContent: howToPlay,\r\n  [IMode.HOMO]: 'Homo',\r\n  [IMode.HETERO]: 'Hetero',\r\n  [ICardType.MAGE]: 'Mage',\r\n  [ICardType.MISSILE]: 'Missile',\r\n  [ICardType.MAGILE]: 'Magile',\r\n  [ICardType.IGNITE]: 'Ignite',\r\n  [ICardType.ANGEL_GUARD]: 'Angel Guard',\r\n  [ICardColor.NONE]: 'None',\r\n  [ICardColor.EARTH]: 'Earth',\r\n  [ICardColor.WATER]: 'Water',\r\n  [ICardColor.FIRE]: 'Fire',\r\n  [ICardColor.WIND]: 'Wind',\r\n  [ICardColor.THUNDER]: 'Thunder',\r\n  [ICardColor.LIGHT]: 'Light',\r\n  [ICardColor.DARK]: 'Dark',\r\n  [ICard.EARTH_MAGE]: 'Earth Mage',\r\n  [ICard.WATER_MAGE]: 'Water Mage',\r\n  [ICard.FIRE_MAGE]: 'Fire Mage',\r\n  [ICard.WIND_MAGE]: 'Wind Mage',\r\n  [ICard.THUNDER_MAGE]: 'Thunder Mage',\r\n  [ICard.EARTH_MISSILE]: 'Earth Missile',\r\n  [ICard.WATER_MISSILE]: 'Water Missile',\r\n  [ICard.FIRE_MISSILE]: 'Fire Missile',\r\n  [ICard.WIND_MISSILE]: 'Wind Missile',\r\n  [ICard.THUNDER_MISSILE]: 'Thunder Missile',\r\n  [ICard.LIGHT_MAGILE]: 'Light Magile',\r\n  [ICard.DARK_MAGILE]: 'Dark Magile',\r\n  [ICard.HOMO_IGNITE]: 'Homo Ignite',\r\n  [ICard.HETERO_IGNITE]: 'Hetero Ignite',\r\n  [ICard.ANGEL_GUARD]: 'Angel Guard',\r\n  gameOver: 'Game Over',\r\n  duelHint: 'DUEL! NO Function card and each hit will deduct 1 more hp!',\r\n  igniteHint: 'IGNITED! Respond only with same ignited or angel guard!',\r\n  loserIs$player: 'Loser is {{player}}',\r\n  $playerDiscardCardTil$cardCount: '{{player}} discard card til {{cardCount}}',\r\n  $playerInitializingTransfer: '{{player}} initializing transfer',\r\n  $playerRespondTo$modeTransfer: '{{player}} responding to {{mode}} transfer.',\r\n  current$damage: 'Current damage: {{damage}}',\r\n  again: 'Again',\r\n  drawDeck: 'Draw Deck',\r\n  notYourTurn: 'Not Your Turn',\r\n  takeHit: 'Take Hit',\r\n  areYouSureYouWantToTakeHit: 'Are you sure you want to take hit?',\r\n  respond: 'Respond',\r\n  initializeHomoTransfer: 'Initialize Homo Transfer',\r\n  initializeHeteroTransfer: 'Initialize Hetero Transfer',\r\n  trash: 'Trash',\r\n  cannotDraw$playerAlreadyHas$countCards: `cannot draw, {{player}} already has {{count}} cards`,\r\n  $playerDoesNotOwnCard$card: '{{player}} doesnt own card {{card}}',\r\n  playerCardMoreThanHp: 'Player has card more than his hp, please discard',\r\n  cannotMixIgniteAngelWithMagiles: 'cannot mix ignite or angel card with mage, missiles and magiles',\r\n  cannotPlayFunctionDuringDuel: 'cannot play function card during duel',\r\n  canPlayOnly1Or3Cards: 'you can only play 1 card or 3 cards',\r\n  specifyHomoOrHeteroAtFirstTransfer: 'please specify homo transfer or hetero transfer as the first to transfer',\r\n  canOnlyDoHeteroWhenNextIs1hp: 'can only do hetero transfer when next player is 1 hp',\r\n  canOnlyPlay1CardWhenAtFirstTransfer: 'please play one card as the first to transfer',\r\n  canOnlyPlayNonFunctionWhenAtFirstTransfer: 'cannot play function type as the first to transfer',\r\n  canOnlyPlay$colorInThisHomoTransfer: 'cannot play color other than {{color}} in this homo transfer',\r\n  $colorsPlayedAnd$colorsCanPlayInThisHetero$typeTransfer: '{{colorsPlayed}} {{type}} played. You may play {{colorsCanPlay}} {{type2}} in this hetero transfer',\r\n  youMayPlay$typeOnly: 'You may play {{type}} only',\r\n  youMayPlay$typeOrMagileOnly: 'You may play {{type}} or Magile only',\r\n  cannotPlayHomoIgniteDuringHeteroTransfer: 'Cannot Play Homo Ignite during Hetero transfer',\r\n  cannotPlayHeteroIgniteDuringHomoTransfer: 'Cannot Play Hetero Ignite during Homo transfer',\r\n  invalidMove: 'invalidMove',\r\n  shouldDiscard$countCards: 'should discard {{count}} cards',\r\n  mode: 'mode',\r\n  count: 'count',\r\n  damage: 'damage',\r\n  damageTableHint: 'After playing first ignite in the transfer, each additional ignite damage+1; during duel damage+1.',\r\n  damageTable: 'Damage Table',\r\n  close: 'close'\r\n}\r\n","import React from 'react'\nimport { DamageTable } from '../DamageTable'\n\nexport const howToPlay = (\n  <div>\n    <h1>魔法飛彈大作戰</h1>\n    <h2>故事</h2>\n    <p>\n      在某個魔法王國裡，居住著一群「魔導師」，\n      她們成天研究一種稱為「魔彈」的法術，是種非常強大的法術。\n    </p>\n    <p>\n      但有天她們遇上了崇尚古文明的「機械師」，機械師將古代科技融合至現代魔法中，\n      創造出了一種名為「飛彈」的武器，向這群可愛的魔導師們發起了挑戰。\n    </p>\n    <p>\n      魔彈與飛彈的比拚，就在此拉開序幕!\n    </p>\n    <h2>所有卡牌</h2>\n    <h4>基礎牌:</h4>\n    <ul>\n      <li>魔彈卡45張：地、水、火、風、雷五系魔彈各9張</li>\n      <li>飛彈卡45張：地、水、火、風、雷五系飛彈各9張</li>\n    </ul>\n    <h4>功能牌:</h4>\n    <ul>\n      <li>魔法飛彈卡6張：光系魔法飛彈卡3張、暗系魔法飛彈卡3張</li>\n      <li>引爆卡6張：同系引爆卡3張、異系引爆卡3張</li>\n      <li>庇護卡6張：天使的庇護卡6張</li>\n    </ul>\n    <h2>玩法</h2>\n    <ol>\n      <li>隨機一個玩家發動首輪傳遞</li>\n      <li>發動傳遞: 由該玩家打出1張魔彈或是飛彈，並且聲明一種傳遞方式(同系/異系)。</li>\n      <li>\n        <div>下個玩家響應傳遞</div>\n        <ul>\n          <li>如果是同系傳遞，可以\n            <ul>\n              <li>打出一或三張同系卡(魔彈飛彈都可以)</li>\n              <li>或打出同系引爆</li>\n            </ul>\n          </li>\n          <li>如果是異系傳遞，可以\n            <ul>\n              <li>打出一或三張未打出過的異系卡，如果發起者打出的是魔彈，只能打出魔彈，飛彈亦然。魔法飛彈是魔彈亦是飛彈。\n              </li>\n              <li>或打出異系引爆</li>\n            </ul>\n          </li>\n          <li>如果今輪有人打出引爆，你只能用同一種引爆或天使的庇護作響應。每張再加的引爆+1傷害(即第一張引爆沒有傷害)</li>\n          <li>以天使的庇護作響應</li>\n          <li>以生命值硬接</li>\n        </ul>\n      </li>\n      <li>每次打牌後，抽牌直至手牌數與血量一樣</li>\n      <li>\n        如果沒能作出響應，則只能用生命值硬接。傷害請見傷害表。棄牌至手牌數與血量一致，然後同一玩家發動下一輪傳遞\n      </li>\n      <li>如果有人血量低於或等於3，遊戲進入大決戰。大決戰期間所有傷害+1，所有功能牌失效 (所有人不能打出魔法飛彈、引爆和庇護)</li>\n      <li>如果有人血量低於或等於0，遊戲結束，該玩家成為唯一輪家，其餘人獲勝</li>\n    </ol>\n    <h2>傷害表</h2>\n    <DamageTable/>\n    <p>\n      打出一張引爆卡後，其後每張引爆傷害+1。大決戰其間傷害+1\n    </p>\n  </div>\n)\n","import { en } from './en'\r\nimport { zh } from './zh'\r\n\r\nexport const i18ns = {\r\n  en,\r\n  zh\r\n}\r\n","import { gamenetI18n } from 'gamenet-material'\r\nimport React from 'react'\r\nimport { ICard, ICardColor, ICardType, IMode } from '../types'\r\nimport { howToPlay } from './howToPlay.zh'\r\n\r\nexport const zh = {\r\n  ...gamenetI18n.zh,\r\n  gameName: '魔法飛彈大作戰',\r\n  howToPlay: '玩法',\r\n  howToPlayContent: howToPlay,\r\n  [IMode.HOMO]: '同系',\r\n  [IMode.HETERO]: '異系',\r\n  [ICardType.MAGE]: '魔彈',\r\n  [ICardType.MISSILE]: '飛彈',\r\n  [ICardType.MAGILE]: '魔法飛彈',\r\n  [ICardType.IGNITE]: '引爆',\r\n  [ICardType.ANGEL_GUARD]: '天使的庇護',\r\n  [ICardColor.NONE]: '無屬性',\r\n  [ICardColor.EARTH]: '地系',\r\n  [ICardColor.WATER]: '水系',\r\n  [ICardColor.FIRE]: '火系',\r\n  [ICardColor.WIND]: '風系',\r\n  [ICardColor.THUNDER]: '雷系',\r\n  [ICardColor.LIGHT]: '光系',\r\n  [ICardColor.DARK]: '暗系',\r\n  [ICard.EARTH_MAGE]: '地系魔彈',\r\n  [ICard.WATER_MAGE]: '水系魔彈',\r\n  [ICard.FIRE_MAGE]: '火系魔彈',\r\n  [ICard.WIND_MAGE]: '風系魔彈',\r\n  [ICard.THUNDER_MAGE]: '雷系魔彈',\r\n  [ICard.EARTH_MISSILE]: '地系飛彈',\r\n  [ICard.WATER_MISSILE]: '水系飛彈',\r\n  [ICard.FIRE_MISSILE]: '火系飛彈',\r\n  [ICard.WIND_MISSILE]: '風系飛彈',\r\n  [ICard.THUNDER_MISSILE]: '雷系飛彈',\r\n  [ICard.LIGHT_MAGILE]: '光系魔法飛彈',\r\n  [ICard.DARK_MAGILE]: '暗系魔法飛彈',\r\n  [ICard.HOMO_IGNITE]: '同系引爆',\r\n  [ICard.HETERO_IGNITE]: '異系引爆',\r\n  [ICard.ANGEL_GUARD]: '天使的庇護',\r\n  gameOver: '遊戲結束',\r\n  duelHint: '大決戰! 功能卡失效，每次傷害+1!',\r\n  igniteHint: '引爆! 只可以用同一種引爆或天使的庇護作響應!',\r\n  loserIs$player: '輸家是{{player}}',\r\n  $playerDiscardCardTil$cardCount: '{{player}}棄牌至{{cardCount}}張',\r\n  $playerInitializingTransfer: '{{player}}開始傳遞',\r\n  $playerRespondTo$modeTransfer: '{{player}}響應{{mode}}傳遞',\r\n  current$damage: '目前累積傷害: {{damage}}',\r\n  again: '再玩一次',\r\n  drawDeck: '抽牌區',\r\n  notYourTurn: '不是你的回合哦~',\r\n  takeHit: '用生命值硬接',\r\n  areYouSureYouWantToTakeHit: '你確定要用生命值硬接?',\r\n  respond: '響應',\r\n  initializeHomoTransfer: '發動同系傳遞',\r\n  initializeHeteroTransfer: '發動異系傳遞',\r\n  trash: '棄卡',\r\n  cannotDraw$playerAlreadyHas$countCards: `不能抽卡, {{player}}已經有{{count}}張卡`,\r\n  $playerDoesNotOwnCard$card: '{{player}}沒有{{card}}',\r\n  playerCardMoreThanHp: '玩家有多於他血量的卡，請棄卡',\r\n  cannotMixIgniteAngelWithMagiles: '引爆和天使卡不能與其他卡混用',\r\n  cannotPlayFunctionDuringDuel: '大決戰期間不能用功能卡',\r\n  canPlayOnly1Or3Cards: '你只能打出一張或三張卡',\r\n  specifyHomoOrHeteroAtFirstTransfer: '發動傳遞時請指明同系或異系傳遞',\r\n  canOnlyDoHeteroWhenNextIs1hp: '當下家只有1血時只能發動異系傳遞',\r\n  canOnlyPlay1CardWhenAtFirstTransfer: '發動傳遞時只能打出一張卡',\r\n  canOnlyPlayNonFunctionWhenAtFirstTransfer: '發動傳遞時不能打出功能卡',\r\n  canOnlyPlay$colorInThisHomoTransfer: '此同系傳遞只能打出{{color}}',\r\n  $colorsPlayedAnd$colorsCanPlayInThisHetero$typeTransfer: '{{colorsPlayed}}{{type}}已經有人打出。這場異系傳遞你可以打出{{colorsCanPlay}}{{type2}}',\r\n  youMayPlay$typeOnly: '你只能打出{{type}}',\r\n  youMayPlay$typeOrMagileOnly: '你只能打出{{type}}或者魔法飛彈',\r\n  cannotPlayHomoIgniteDuringHeteroTransfer: '異系傳遞不能打出同系引爆',\r\n  cannotPlayHeteroIgniteDuringHomoTransfer: '同系傳遞不能打出異系引爆',\r\n  invalidMove: '不允許的行動',\r\n  shouldDiscard$countCards: '請棄{{count}}張卡',\r\n  mode: '傳遞模式',\r\n  count: '數量',\r\n  damage: '傷害',\r\n  damageTableHint: '打出一張引爆卡後，其後每張引爆傷害+1。大決戰其間傷害+1',\r\n  damageTable: '傷害表',\r\n  close: '關閉'\r\n}\r\n","import React, { FunctionComponent } from 'react'\nimport { usePoker99, withGameNetwork } from './withGameNetwork'\nimport { GamePagesSlider, Home, LanguageButton, Room, useGamenetI18n, withGamenetI18n } from 'gamenet-material'\nimport { Game } from './Game'\nimport { GameRenderer } from './components/GameRenderer'\nimport { i18ns } from './i18ns'\nimport { DialogContent } from '@material-ui/core'\nimport { DamageTable } from './DamageTable'\n\nconst App: FunctionComponent = withGamenetI18n({ i18ns })(withGameNetwork(() => {\n  const network = usePoker99()\n  const { i18n } = useGamenetI18n()\n  return (\n    <GamePagesSlider gameAppState={network.gameAppState} fullPage={[false, false, true]} GameRenderer={<GameRenderer/>}>\n      <Home {...network} gameName={i18n.gameName}>\n        <DialogContent>\n          {i18n.howToPlayContent}\n        </DialogContent>\n      </Home>\n      <Room {...network} />\n      <Game/>\n      <div style={{ position: 'fixed', top: 0, right: 0, zIndex: 100 }}>\n        <LanguageButton/>\n      </div>\n    </GamePagesSlider>\n  )\n}))\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}