{"version":3,"sources":["../node_modules/peerjs/dist sync","GameState.ts","GameAction.ts","types.ts","constants.ts","utils.ts","GameReducer.ts","aiAction.ts","withGameNetwork.tsx","assets/angel_guard.png","assets/dark_magile.png","assets/earth_mage.png","assets/earth_missile.png","assets/fire_mage.png","assets/fire_missile.png","assets/hetero_ignite.png","assets/homo_ignite.png","assets/light_magile.png","assets/thunder_mage.png","assets/thunder_missile.png","assets/water_mage.png","assets/water_missile.png","assets/wind_mage.png","assets/wind_missile.png","assets/index.ts","components/Card.tsx","components/Deck.tsx","Game.tsx","DamageTable.tsx","DamageTableToggleButton.tsx","components/GameRenderer.tsx","i18ns/howToPlay.en.tsx","i18ns/en.tsx","i18ns/howToPlay.zh.tsx","i18ns/zh.tsx","i18ns/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":[],"mappings":"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","file":"static/js/main.40854d98.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 191;","// Poker99State.ts\n\nimport { GenericBoardGameState } from 'gamenet'\nimport { IDeck, IMode } from './types'\nimport { PlayCardPayload } from './GameAction'\n\nexport class GameState extends GenericBoardGameState {\n  [key: string]: unknown | undefined\n\n  maxPlayer = 8\n  minPlayer = 2\n  turn = 0\n  direction = 1\n  points = 0\n  drawDeck: IDeck = []\n  stage: IDeck = []\n  mode: IMode | null = null\n  trashDeck: IDeck = []\n  playerDeck: IDeck[] = []\n  playerHp: number[] = []\n  logs: string[] = []\n  lastAction: PlayCardPayload & { playerId: number } | null = null\n  ignited = false\n  duel = false\n}\n","// GameAction.ts\n\nimport { GameActionTypes, GenericBoardGameAction } from 'gamenet'\nimport { ICard, IDeck, IMode } from './types'\nimport { NetworkAction } from 'smnet'\n\nexport enum GameActionType {\n  PLAY_CARD,\n  END,\n  DISCARD_CARD,\n  TAKE_HIT,\n  REORDER\n}\n\nexport interface PlayCardPayload {\n  cards: ICard[]\n  mode?: IMode\n}\n\nexport type GameAction = (({\n  type: GameActionType.DISCARD_CARD\n  payload: PlayCardPayload\n} | {\n  type: GameActionType.PLAY_CARD\n  payload: PlayCardPayload\n} | {\n  type: GameActionType.END\n} | {\n  type: GameActionType.TAKE_HIT\n}  | {\n  type: GameActionType.REORDER\n  payload: {cards: IDeck}\n} | {\n  type: GameActionTypes\n  payload: never\n}) & NetworkAction) | GenericBoardGameAction\n","import { GameState } from './GameState'\nimport { PlayCardPayload } from './GameAction'\n\nexport enum ICard {\n  EARTH_MAGE = 'earth_mage',\n  WATER_MAGE = 'water_mage',\n  FIRE_MAGE = 'fire_mage',\n  WIND_MAGE = 'wind_mage',\n  THUNDER_MAGE = 'thunder_mage',\n  EARTH_MISSILE = 'earth_missile',\n  WATER_MISSILE = 'water_missile',\n  FIRE_MISSILE = 'fire_missile',\n  WIND_MISSILE = 'wind_missile',\n  THUNDER_MISSILE = 'thunder_missile',\n  LIGHT_MAGILE = 'light_magile',\n  DARK_MAGILE = 'dark_magile',\n  HOMO_IGNITE = 'homo_ignite',\n  HETERO_IGNITE = 'hetero_ignite',\n  ANGEL_GUARD = 'angel_guard'\n}\n\nexport enum IMode {\n  HOMO='homo',\n  HETERO='hetero'\n}\n\nexport type IDeck = ICard[]\n\nexport type IStateMapper = (prevState: GameState) => GameState\n\nexport type IsCard = (card: ICard) => boolean\n\nexport type IPlayCard = (payload: PlayCardPayload, playerId: number) => IStateMapper\n\nexport enum ICardType {\n  MAGE='mage',\n  MISSILE='missile',\n  MAGILE='magile',\n  IGNITE='ignite',\n  ANGEL_GUARD='angel_guard'\n}\n\nexport enum ICardColor {\n  NONE= 'none',\n  EARTH= 'earth',\n  WATER= 'water',\n  FIRE= 'fire',\n  WIND= 'wind',\n  THUNDER= 'thunder',\n  LIGHT= 'light',\n  DARK= 'dark'\n}\n\nexport const allColors: ICardColor[] = [\n  ICardColor.EARTH,\n  ICardColor.WATER,\n  ICardColor.FIRE,\n  ICardColor.WIND,\n  ICardColor.THUNDER,\n  ICardColor.LIGHT,\n  ICardColor.DARK,\n]\n","import { ICard } from './types'\n\nexport const cardCount = {\n  [ICard.EARTH_MAGE]: 9,\n  [ICard.WATER_MAGE]: 9,\n  [ICard.FIRE_MAGE]: 9,\n  [ICard.WIND_MAGE]: 9,\n  [ICard.THUNDER_MAGE]: 9,\n  [ICard.EARTH_MISSILE]: 9,\n  [ICard.WATER_MISSILE]: 9,\n  [ICard.FIRE_MISSILE]: 9,\n  [ICard.WIND_MISSILE]: 9,\n  [ICard.THUNDER_MISSILE]: 9,\n  [ICard.LIGHT_MAGILE]: 3,\n  [ICard.DARK_MAGILE]: 3,\n  [ICard.HOMO_IGNITE]: 3,\n  [ICard.HETERO_IGNITE]: 3,\n  [ICard.ANGEL_GUARD]: 6\n}\n","import { ICard, ICardColor, ICardType, IMode } from './types'\nimport { GameState } from './GameState'\nimport { i18nSub } from 'gamenet-material'\n\nexport const basicDamage = (count: number, mode: IMode | null): number => {\n  switch (mode) {\n    case IMode.HOMO:\n      switch (count) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n          return 1\n        case 5:\n        case 6:\n        case 7:\n          return 2\n        default:\n          return 3\n      }\n    case IMode.HETERO:\n      switch (count) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n          return 1\n        case 5:\n        case 6:\n          return 2\n        default:\n          return 3\n      }\n    default:\n      return 0\n  }\n}\n\nexport const computeDamage = (state: GameState) => {\n  const igniteCount = state.stage.filter(card => getCardType(card) === ICardType.IGNITE).length\n  const basic = basicDamage(state.stage.filter(card => getCardColor(card) !== ICardColor.NONE).length, state.mode)\n  return basic + Math.max(igniteCount - 1, 0) + (state.duel ? 1 : 0)\n}\n\nexport const getCardType = (card: ICard): ICardType => {\n  switch (card) {\n    case ICard.EARTH_MAGE:\n    case ICard.WATER_MAGE:\n    case ICard.FIRE_MAGE:\n    case ICard.WIND_MAGE:\n    case ICard.THUNDER_MAGE:\n      return ICardType.MAGE\n    case ICard.EARTH_MISSILE:\n    case ICard.WATER_MISSILE:\n    case ICard.FIRE_MISSILE:\n    case ICard.WIND_MISSILE:\n    case ICard.THUNDER_MISSILE:\n      return ICardType.MISSILE\n    case ICard.LIGHT_MAGILE:\n    case ICard.DARK_MAGILE:\n      return ICardType.MAGILE\n    case ICard.HETERO_IGNITE:\n    case ICard.HOMO_IGNITE:\n      return ICardType.IGNITE\n    case ICard.ANGEL_GUARD:\n      return ICardType.ANGEL_GUARD\n  }\n}\n\nexport const areCardsOfTypeOrMagile = (cards: ICard[], type: ICardType): boolean => {\n  return cards.reduce<boolean>((prev, curr) => {\n    const cardType = getCardType(curr)\n    return prev && (cardType === type || cardType === ICardType.MAGILE)\n  }, true)\n}\n\nexport const getCardColor = (card: ICard): ICardColor => {\n  switch (card) {\n    case ICard.EARTH_MAGE:\n    case ICard.EARTH_MISSILE:\n      return ICardColor.EARTH\n    case ICard.WATER_MAGE:\n    case ICard.WATER_MISSILE:\n      return ICardColor.WATER\n    case ICard.FIRE_MAGE:\n    case ICard.FIRE_MISSILE:\n      return ICardColor.FIRE\n    case ICard.WIND_MAGE:\n    case ICard.WIND_MISSILE:\n      return ICardColor.WIND\n    case ICard.THUNDER_MAGE:\n    case ICard.THUNDER_MISSILE:\n      return ICardColor.THUNDER\n    case ICard.LIGHT_MAGILE:\n      return ICardColor.LIGHT\n    case ICard.DARK_MAGILE:\n      return ICardColor.DARK\n    default:\n      return ICardColor.NONE\n  }\n}\n\nexport const isActionCard = (card: ICard) => {\n  return ![ICardType.MISSILE, ICardType.MAGE].includes(getCardType(card))\n}\n\nexport const areCardsOfColor = (cards: ICard[], color: ICardColor): boolean => {\n  return cards.reduce<boolean>((prev, curr) => {\n    return prev && getCardColor(curr) === color\n  }, true)\n}\n\nexport const areCardsOfDifferentColor = (cards: ICard[]): boolean => {\n  const seenColor = new Set()\n  const filteredCards = cards.filter((card) => getCardColor(card) !== ICardColor.NONE)\n  filteredCards.forEach((card) => {\n    seenColor.add(getCardColor(card))\n  })\n  return seenColor.size === filteredCards.length\n}\n\nexport const hasCardColorNone = (cards: ICard[]): boolean => {\n  return !!cards.find((card) => getCardColor(card) === ICardColor.NONE)\n}\n\nexport const canPlayCard = (state: GameState, card: ICard): boolean => {\n  const { mode, duel, ignited } = state\n  if (duel) {\n    if ([ICardType.MAGILE, ICardType.IGNITE, ICardType.ANGEL_GUARD].includes(getCardType(card))) {\n      return false\n    }\n  }\n  if (state.stage.length === 0) {\n    return !isActionCard(card)\n  }\n  if (card === ICard.ANGEL_GUARD) {\n    return true\n  }\n  if (ignited) {\n    if (![ICardType.IGNITE, ICardType.ANGEL_GUARD].includes(getCardType(card))) {\n      return false\n    }\n  }\n  if (mode === IMode.HOMO) {\n    return card === ICard.HOMO_IGNITE || getCardColor(card) === getCardColor(state.stage[0])\n  }\n  if (mode === IMode.HETERO) {\n    return card === ICard.HETERO_IGNITE || (areCardsOfTypeOrMagile([card], getCardType(state.stage[0])) && areCardsOfDifferentColor([...state.stage, card]))\n  }\n  console.warn('canPlayCard EDGECASE!!!', state, card)\n  return false\n}\n\nexport const randInt = (max: number) => {\n  return Math.floor(Math.random() * max)\n}\n\nexport const buildError = (messageKey: string, values?: Record<string, string>, variables?: Record<string, string | string[]>): Error => {\n  return new Error(JSON.stringify({ messageKey, values: values ?? {}, variables }))\n}\n\nexport const decodeError = (error: Error, i18n: Record<string, unknown>): string => {\n  const { messageKey, values, variables } = JSON.parse(error.message)\n  Object.entries((variables ?? {}) as Record<string, string | string[]>).forEach(([varName, i18nKey]) => {\n    if (typeof i18nKey === 'string') {\n      values[varName] = i18n[i18nKey]\n    } else {\n      values[varName] = i18nKey.map(key => i18n[key]).join(', ')\n    }\n  })\n  return i18nSub(i18n[messageKey] as string, { ...values })\n}\n\nexport const arraySameContent = <T>(a: T[], b: T[]): boolean => {\n  if(a === b) return true\n  if(a.length !== b.length) return false\n  return a.reduce<boolean>((flag, element) => flag && a.filter(e => e === element).length === b.filter(e => e === element).length, true)\n}\n\nexport const reorder = <T>(list: T[], startIndex: number, endIndex: number): T[] => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nexport const reorderInPlace = <T>(list: T[], startIndex: number, endIndex: number): void => {\n  const result = reorder(list, startIndex, endIndex)\n  for(let i = 0; i < result.length; i++) {\n    list[i] = result[i]\n  }\n};\n\nexport const checkAbleToRespond = (state: GameState): boolean => {\n  const { ignited, duel, turn, mode } = state\n  if(!state.started) {\n    return false\n  }\n  const hand = state.playerDeck[turn]\n  if (!duel && !!hand.find(card => card === ICard.ANGEL_GUARD)) {\n    return true\n  }\n  if (mode === IMode.HETERO) {\n    if (!duel && !!hand.find(card => card === ICard.HETERO_IGNITE)) {\n      return true\n    }\n    if (ignited) {\n      return hand.includes(ICard.HETERO_IGNITE)\n    }\n    return hand\n      .filter(card => getCardColor(card) !== ICardColor.NONE)\n      .filter(card => duel ? getCardType(card) !== ICardType.MAGILE : true)\n      .filter(card => areCardsOfTypeOrMagile([card], getCardType(state.stage[0])))\n      .filter(card => !state.stage.map(card => getCardColor(card)).includes(getCardColor(card))).length > 0\n  } else {\n    if (!duel && !!hand.find(card => card === ICard.HOMO_IGNITE)) {\n      return true\n    }\n    if (ignited) {\n      return hand.includes(ICard.HOMO_IGNITE)\n    }\n    return hand\n      .filter(card => getCardColor(card) === getCardColor(state.stage[0]))\n      .length > 0\n  }\n}\n","import { NetworkReducer } from 'smnet'\nimport { GameState } from './GameState'\nimport { GameAction, GameActionType, PlayCardPayload } from './GameAction'\nimport { allColors, ICard, ICardColor, ICardType, IDeck, IMode, IPlayCard, IStateMapper } from './types'\nimport { compose, GameActionTypes, shuffle } from 'gamenet'\nimport { cardCount } from './constants'\nimport {\n  areCardsOfColor,\n  areCardsOfDifferentColor,\n  areCardsOfTypeOrMagile, arraySameContent,\n  buildError,\n  computeDamage,\n  getCardColor,\n  getCardType,\n  hasCardColorNone,\n  isActionCard\n} from './utils'\n\nconst getFullDeck = (): IDeck => {\n  return Object.entries(cardCount).flatMap(([card, count]) => Array(count).fill(card))\n}\n\nconst withDrawCard: (playerId: number) => IStateMapper = playerId => state => {\n  if (state.playerDeck[playerId].length >= state.playerHp[playerId]) {\n    throw buildError('cannotDraw$playerAlreadyHas$countCards', {\n      player: state.players[playerId],\n      count: `${state.playerHp[playerId]}`\n    })\n  }\n  const card = state.drawDeck[0]\n  if (card === undefined) {\n    return withDrawCard(playerId)({ ...state, drawDeck: shuffle(state.trashDeck), trashDeck: [] })\n  } else {\n    const hand = [...state.playerDeck[playerId], card]\n    const playerDeck = [...state.playerDeck]\n    playerDeck[playerId] = hand\n    if (hand.length < state.playerHp[playerId]) {\n      return withDrawCard(playerId)({ ...state, playerDeck, drawDeck: state.drawDeck.slice(1) })\n    } else {\n      return { ...state, playerDeck, drawDeck: state.drawDeck.slice(1) }\n    }\n  }\n}\n\nconst withEnsureDuelNotFunctionCard: (playerId: number) => IStateMapper = playerId => state => {\n  if (state.duel) {\n    const hand = state.playerDeck[playerId]\n    if (hand.filter(isActionCard).length === hand.length)\n      return compose(\n        withEnsureDuelNotFunctionCard(playerId),\n        withDrawCard(playerId),\n        withDiscardCard({ cards: hand }, playerId)\n      )(state)\n  }\n  return state\n}\n\nconst withInitGame: IStateMapper = (prevState: GameState) => {\n  prevState = {\n    ...prevState,\n    turn: 0,\n    direction: 1,\n    points: 0,\n    drawDeck: [],\n    stage: [],\n    mode: null,\n    trashDeck: [],\n    playerDeck: [],\n    playerHp: [],\n    logs: [],\n    lastAction: null,\n    ignited: false,\n    duel: false,\n    winner: null\n  }\n  const fullDeck = getFullDeck()\n  prevState.drawDeck = shuffle(fullDeck)\n  for (let id = 0; id < prevState.players.length; id++) {\n    prevState.playerDeck[id] = []\n    prevState.playerHp[id] = 7\n    prevState = withDrawCard(id)(prevState)\n  }\n  return { ...prevState }\n}\n\nconst withDiscardCard: IPlayCard = ({ cards }, playerId) => state => {\n  const trashDeck = [...state.trashDeck, ...cards]\n  const hand = [...state.playerDeck[playerId]]\n  cards.forEach((card) => {\n    const index = hand.indexOf(card)\n    if (index === -1) {\n      throw buildError('$playerDoesNotOwnCard$card', { player: state.players[playerId] }, { card })\n    }\n    hand.splice(index, 1)\n  })\n  const playerDeck = [...state.playerDeck]\n  playerDeck[playerId] = hand\n  return { ...state, trashDeck, playerDeck }\n}\n\nconst withPutToPlayed: IPlayCard = ({ cards }) => (state) => {\n  return { ...state, stage: [...state.stage, ...cards] }\n}\n\nconst withCardNumberValidation: IPlayCard = (_, playerId) => (state) => {\n  if (state.playerDeck[playerId].length > state.playerHp[playerId]) {\n    throw buildError('playerCardMoreThanHp')\n  }\n  return state\n}\n\nconst withCardTypeValidation: IPlayCard = ({ cards }, playerId) => state => {\n  if (cards.length === 3) {\n    if (cards.map(card => getCardColor(card)).includes(ICardColor.NONE)) {\n      throw buildError('cannotMixIgniteAngelWithMagiles')\n    }\n    if (state.duel) {\n      if (cards.map(card => getCardType(card)).includes(ICardType.MAGILE)) {\n        throw buildError('cannotPlayFunctionDuringDuel')\n      }\n    }\n  } else if (cards.length === 1) {\n    if (state.duel) {\n      const cardType = getCardType(cards[0])\n      if ([ICardType.MAGILE, ICardType.IGNITE, ICardType.ANGEL_GUARD].includes(cardType)) {\n        throw buildError('cannotPlayFunctionDuringDuel')\n      }\n    }\n  } else {\n    throw buildError('canPlayOnly1Or3Cards')\n  }\n  return state\n}\n\nconst withFirstPlayValidation: IPlayCard = ({ cards, mode }, playerId) => (state) => {\n  if (state.stage.length === 0) {\n    if (mode === null || mode === undefined) {\n      throw buildError('specifyHomoOrHeteroAtFirstTransfer')\n    }\n    if (mode === IMode.HOMO && state.playerHp[(playerId + 1) % state.players.length] === 1) {\n      throw buildError('canOnlyDoHeteroWhenNextIs1hp')\n    }\n    if (cards.length !== 1) {\n      throw buildError('canOnlyPlay1CardWhenAtFirstTransfer')\n    }\n    if (getCardType(cards[0]) !== ICardType.MAGE && getCardType(cards[0]) !== ICardType.MISSILE) {\n      throw buildError('canOnlyPlayNonFunctionWhenAtFirstTransfer')\n    }\n    return { ...state, mode }\n  }\n  return state\n}\n\nconst withPlayHomo: IPlayCard = ({ cards }) => state => {\n  if (state.mode === IMode.HOMO && !state.ignited) {\n    if (state.stage.length === 0) {\n      return { ...state }\n    }\n    const cardColor = getCardColor(cards[0])\n    if (cardColor !== ICardColor.NONE) {\n      if (!areCardsOfColor(cards, getCardColor(state.stage[0]))) {\n        throw buildError('canOnlyPlay$colorInThisHomoTransfer', {}, { color: cardColor })\n      }\n      return { ...state }\n    }\n  }\n  return state\n}\n\nconst withPlayHetero: IPlayCard = ({ cards }) => state => {\n  if (state.mode === IMode.HETERO && !state.ignited) {\n    if (state.stage.length === 0) {\n      return { ...state }\n    }\n    if (!hasCardColorNone(cards)) {\n      const type = getCardType(state.stage[0])\n      if (!areCardsOfDifferentColor([...state.stage, ...cards])) {\n        const stageColors = state.stage.map(card => getCardColor(card))\n        const colorsPlayed = cards.map(card => getCardColor(card)).filter(color => stageColors.includes(color))\n        const colorsCanPlay = allColors.filter(color => !stageColors.includes(color))\n        throw buildError('$colorsPlayedAnd$colorsCanPlayInThisHetero$typeTransfer', {}, {\n          type,\n          type2: type,\n          colorsPlayed,\n          colorsCanPlay\n        })\n      } else {\n        if (!areCardsOfTypeOrMagile(cards, type)) {\n          if (state.duel) {\n            throw buildError('youMayPlay$typeOnly', {}, { type })\n          } else {\n            throw buildError('youMayPlay$typeOrMagileOnly', {}, { type })\n          }\n        } else {\n          return { ...state }\n        }\n      }\n    }\n  }\n  return state\n}\n\nconst withPlayIgnite: IPlayCard = ({ cards }) => state => {\n  if (cards.length === 1) {\n    const card = cards[0]\n    if (card === ICard.HETERO_IGNITE) {\n      if (state.mode === IMode.HETERO) {\n        return { ...state, ignited: true }\n      } else {\n        throw buildError('cannotPlayHeteroIgniteDuringHomoTransfer')\n      }\n    }\n    if (card === ICard.HOMO_IGNITE) {\n      if (state.mode === IMode.HOMO) {\n        return { ...state, ignited: true }\n      } else {\n        throw buildError('cannotPlayHomoIgniteDuringHeteroTransfer')\n      }\n    }\n  }\n  return state\n}\n\nconst withPlayAngleGuard: IPlayCard = ({ cards }) => state => {\n  if (cards.length === 1) {\n    if (cards[0] === ICard.ANGEL_GUARD) {\n      return { ...state }\n    }\n  }\n  return state\n}\n\nconst withStateChangedValidation = (prevState: GameState): IPlayCard => () => state => {\n  if (prevState === state) {\n    throw buildError('invalidMove')\n  }\n  return state\n}\n\nexport const withIncrementTurn: IStateMapper = prevState => {\n  const nextPlayerId = (prevState.turn + prevState.players.length + prevState.direction) % prevState.players.length\n  return { ...prevState, turn: nextPlayerId }\n}\n\nconst withPlayCard: (playerId: number, payload: PlayCardPayload) => IStateMapper = (playerId, payload) => prevState => {\n  if (prevState.turn !== playerId) {\n    throw buildError('notYourTurn')\n  }\n  const nextState = compose(\n    // withCheckWin,\n    // withCheckHit,\n    withIncrementTurn,\n    withEnsureDuelNotFunctionCard(playerId),\n    withDrawCard(playerId),\n    ...[\n      withPutToPlayed,\n      withDiscardCard,\n      withStateChangedValidation(prevState),\n      withPlayAngleGuard,\n      withPlayIgnite,\n      withPlayHetero,\n      withPlayHomo,\n      withCardTypeValidation,\n      withFirstPlayValidation,\n      withCardNumberValidation\n    ].map(playCard => playCard(payload, playerId))\n  )(prevState)\n  return { ...nextState, lastAction: { ...payload, playerId } }\n}\n\nexport const withCheckWin: IStateMapper = state => {\n  const playerIdLose = state.playerHp.findIndex(hp => hp <= 0)\n  if (playerIdLose !== -1) {\n    return { ...state, winner: playerIdLose }\n  }\n  return state\n}\n\n// export const withCheckHit: IStateMapper = prevState => {\n//   if (ableToResponse(prevState)) {\n//     return prevState\n//   } else {\n//     return withHit(prevState)\n//   }\n// }\n\nconst withHit = (state: GameState): GameState => {\n  if (state.mode !== null) {\n    const { turn } = state\n    const hit = computeDamage(state)\n    const playerHp = [...state.playerHp]\n    playerHp[turn] -= hit\n    return {\n      ...state,\n      playerHp\n    }\n  }\n  return state\n}\n\nexport const withLog: (log: string) => IStateMapper = log => prevState => {\n  return { ...prevState, logs: [...prevState.logs, log] }\n}\n\nconst withCheckDiscardToHp: IPlayCard = (payload, playerId) => state => {\n  if (state.playerDeck[playerId].length - payload.cards.length !== state.playerHp[playerId]) {\n    const count = `${state.playerDeck[playerId].length - state.playerHp[playerId]}`\n    throw buildError('shouldDiscard$countCards', { count })\n  }\n  return state\n}\n\nconst withClearStage: IStateMapper = state => {\n  return {\n    ...state,\n    stage: [],\n    trashDeck: [...state.stage],\n    lastAction: null,\n    ignited: false,\n    duel: state.duel || state.playerHp[state.turn] <= 3,\n    mode: null\n  }\n}\n\nconst reorder = (cards: IDeck, playerId: number) => (state: GameState): GameState => {\n  if (!arraySameContent(cards, state.playerDeck[playerId])) {\n    throw new Error('Cards not consistent')\n  }\n  const playerDeck = [...state.playerDeck]\n  playerDeck[playerId] = cards\n  return { ...state, playerDeck }\n}\n\nexport const GameReducer: NetworkReducer<GameState, GameAction> = (prevState, action) => {\n  const peerId = action.peerId\n  if (peerId === undefined) {\n    throw new Error('Expect peerId in action')\n  }\n  const playerId = (): number => {\n    const id = prevState.nameDict[prevState.members[peerId]]\n    if (id === undefined) {\n      throw new Error('game not started')\n    }\n    return id\n  }\n  switch (action.type) {\n    case GameActionTypes.START:\n      return withInitGame(prevState)\n    case GameActionType.PLAY_CARD:\n      return withPlayCard(playerId(), action.payload)(JSON.parse(JSON.stringify(prevState)))\n    case GameActionType.DISCARD_CARD:\n      return compose(withEnsureDuelNotFunctionCard(playerId()), withClearStage, ...[withDiscardCard, withCheckDiscardToHp].map(step => step(action.payload, playerId())))(JSON.parse(JSON.stringify(prevState)))\n    case GameActionType.TAKE_HIT:\n      return withCheckWin(withHit(prevState))\n    case GameActionType.END:\n      return { ...prevState, started: false, ready: {} }\n    case GameActionType.REORDER:\n      return reorder(action.payload.cards, playerId())(prevState)\n  }\n  return prevState\n}\n","import { GameState } from './GameState'\nimport { GameAction, GameActionType } from './GameAction'\nimport { getCardColor, getCardType, isActionCard, randInt } from './utils'\nimport { allColors, ICard, ICardColor, ICardType, IDeck, IMode } from './types'\n\nconst countByColor = (hand: IDeck, excludeMagile: boolean): Record<ICardColor, number> => {\n  return hand\n    .map(card => getCardColor(card))\n    .filter(color => color !== ICardColor.NONE)\n    .filter(color => !excludeMagile || ![ICardColor.LIGHT, ICardColor.DARK].includes(color))\n    .reduce<Record<ICardColor, number>>(((previousValue, currentValue) => ({\n      ...previousValue,\n      [currentValue]: (previousValue[currentValue] ?? 0) + 1\n    })), {} as Record<ICardColor, number>)\n}\n\nconst countByTypeUniqueColor = (hand: IDeck, excludeMagile: boolean): Record<ICardType, number> => {\n  return hand\n    .filter(card => getCardColor(card) !== ICardColor.NONE)\n    .filter((card, k, cards) => cards.indexOf(card) === k)\n    .reduce<Record<ICardType, number>>(((record, card) => {\n      const type: ICardType = getCardType(card)\n      if(type === ICardType.MAGILE && excludeMagile) {\n        return record\n      }\n      if (type === ICardType.MAGILE && !excludeMagile) {\n        return {\n          [ICardType.MISSILE]: (record[ICardType.MISSILE] ?? 0) + 1,\n          [ICardType.MAGE]: (record[ICardType.MAGE] ?? 0) + 1\n        } as Record<ICardType, number>\n      }\n      return {\n        ...record,\n        [type]: (record[type] ?? 0) + 1\n      }\n    }), {} as Record<ICardType, number>)\n}\n\nconst sortDict = <T extends string | number> (dict: Record<T, number>): Array<[T, number]> => {\n  return Object.entries<number>(dict).sort((a, b) => (b[1] - a[1])) as Array<[T, number]>\n}\n\nconst buildPlayCardAction = (cards: ICard[], mode?: IMode): GameAction => {\n  return {\n    type: GameActionType.PLAY_CARD,\n    payload: {\n      cards,\n      mode\n    }\n  }\n}\n\nconst aiDiscard = (state: GameState, turn: number): GameAction => {\n  const hand: ICard[] = [...state.playerDeck[turn]]\n  const amountToDiscard = hand.length - state.playerHp[turn]\n  const discards: ICard[] = []\n  if (state.duel) {\n    while (discards.length < amountToDiscard && hand.find(isActionCard)) {\n      discards.push(hand.splice(hand.findIndex(isActionCard), 1)[0])\n    }\n  }\n  while (discards.length < amountToDiscard) {\n    discards.push(hand.splice(randInt(hand.length), 1)[0])\n  }\n  return {\n    type: GameActionType.DISCARD_CARD,\n    payload: {\n      cards: discards\n    }\n  }\n}\n\nconst aiFirstCard = (state: GameState, turn: number): GameAction => {\n  const hand: ICard[] = [...state.playerDeck[turn]]\n  const byColor: Array<[ICardColor, number]> = sortDict(countByColor(hand, true))\n  const byType: Array<[ICardType, number]> = sortDict(countByTypeUniqueColor(hand, state.duel))\n  const nextPlayerHp = state.playerHp[(turn + 1) % state.playerHp.length]\n  const magileCount = hand.filter(card => getCardType(card) === ICardType.MAGILE).length\n  const mode = state.playerHp[turn] !== 1 && nextPlayerHp !== 1 && !(byColor[0][1] + 1 <= byType[0][1] && magileCount < byType[0][1]) ? IMode.HOMO : IMode.HETERO\n  if (mode === IMode.HOMO) {\n    return buildPlayCardAction([hand.find((card) => getCardColor(card) === byColor[0][0]) as ICard], mode)\n  } else {\n    return buildPlayCardAction([hand.find((card) => getCardType(card) === byType[0][0]) as ICard], mode)\n  }\n}\n\nconst aiPlayCard = (state: GameState, playerId: number): GameAction => {\n  const hand = state.playerDeck[playerId]\n  const { mode, ignited, duel } = state\n  if (mode === IMode.HOMO) {\n    if(!ignited) {\n      const stageColor = getCardColor(state.stage[0])\n      const cards = hand.filter(card => getCardColor(card) === stageColor)\n      if (cards.length > 3) {\n        return buildPlayCardAction(cards.slice(0, 3))\n      }\n      if (cards.length > 0) {\n        return buildPlayCardAction([cards[0]])\n      }\n    }\n    if(!duel) {\n      const homoIgnite = hand.find(card => card === ICard.HOMO_IGNITE)\n      if(homoIgnite) {\n        return buildPlayCardAction([homoIgnite])\n      }\n      const angelGuard = hand.find(card => card === ICard.ANGEL_GUARD)\n      if(angelGuard) {\n        return buildPlayCardAction([angelGuard])\n      }\n    }\n  } else {\n    if(!ignited) {\n      const stageColors = state.stage.map(card => getCardColor(card))\n      const stageType = getCardType(state.stage[0])\n      const playableColors = new Set(allColors.filter(color => !stageColors.includes(color)))\n      const cards = hand.filter(card => {\n        const cardColor = getCardColor(card)\n        if(getCardType(card) === stageType && playableColors.has(cardColor)) {\n          playableColors.delete(cardColor)\n          return true\n        } else {\n          return false\n        }\n      })\n      if (cards.length > 3) {\n        return buildPlayCardAction(cards.slice(0, 3))\n      }\n      if (cards.length > 0) {\n        return buildPlayCardAction([cards[0]])\n      }\n    }\n    if(!duel) {\n      const heteroIgnite = hand.find(card => card === ICard.HETERO_IGNITE)\n      if(heteroIgnite) {\n        return buildPlayCardAction([heteroIgnite])\n      }\n      const angelGuard = hand.find(card => card === ICard.ANGEL_GUARD)\n      if(angelGuard) {\n        return buildPlayCardAction([angelGuard])\n      }\n    }\n  }\n  console.warn('AI PLAY CARD REACH EDGE CASE, TAKE HIT', state, playerId)\n  return {\n    type: GameActionType.TAKE_HIT\n  }\n}\n\nexport const aiAction = (state: GameState, turn: number): GameAction => {\n  if (state.playerDeck[turn].length > state.playerHp[turn]) {\n    return aiDiscard(state, turn)\n  }\n  if (state.stage.length === 0) {\n    return aiFirstCard(state, turn)\n  }\n  return aiPlayCard(state, turn)\n}\n","import React, { createContext, FunctionComponent, useContext, useEffect } from 'react'\nimport { BoardGameContextInterface, useBoardGameNetwork } from 'gamenet'\nimport { GameState } from './GameState'\nimport { GameReducer } from './GameReducer'\nimport { GameAction } from './GameAction'\nimport { aiAction } from './aiAction'\n\nconst Poker99Context = createContext<BoardGameContextInterface<GameState, GameAction> | null>(null)\n\nexport const withGameNetwork = (Component: FunctionComponent): FunctionComponent => {\n  const WithGameNetwork: FunctionComponent = props => {\n    const network = useBoardGameNetwork(GameReducer, new GameState(), undefined, 'magile')\n    const {myAis, state,dispatchAs} = network\n    useEffect(() => {\n      if (aiAction !== undefined && myAis.includes(state.players[state.turn]) && state.started && state.winner === null) {\n        const cb = (): void => {\n          const action = aiAction(state, state.turn)\n          // action.peerId = Object.keys(state.members).filter(peerId => state.members[peerId] === state.players[state.turn])[0]\n          dispatchAs(state.turn, action).catch(console.error)\n        }\n        const n = window.setTimeout(cb, 1000)\n        return () => {\n          window.clearTimeout(n)\n        }\n      }\n    }, [dispatchAs, myAis, state])\n    return (\n      <Poker99Context.Provider value={network}>\n        <Component {...props} />\n    </Poker99Context.Provider>\n  )\n  }\n  WithGameNetwork.displayName = 'WithGameNetwork'\n  return WithGameNetwork\n}\n\nexport const usePoker99 = (): BoardGameContextInterface<GameState, GameAction> => {\n  const network: BoardGameContextInterface<GameState, GameAction> | null = useContext(Poker99Context)\n  if (network === null) {\n    throw new Error('please wrap it using withGameNetwork before calling this hook')\n  }\n  return network\n}\n","export default __webpack_public_path__ + \"static/media/angel_guard.16ea5f11.png\";","export default __webpack_public_path__ + \"static/media/dark_magile.1e723600.png\";","export default __webpack_public_path__ + \"static/media/earth_mage.e84ed39c.png\";","export default __webpack_public_path__ + \"static/media/earth_missile.c93568e4.png\";","export default __webpack_public_path__ + \"static/media/fire_mage.0e5240db.png\";","export default __webpack_public_path__ + \"static/media/fire_missile.6d251f43.png\";","export default __webpack_public_path__ + \"static/media/hetero_ignite.4942ab4f.png\";","export default __webpack_public_path__ + \"static/media/homo_ignite.0dedd4a2.png\";","export default __webpack_public_path__ + \"static/media/light_magile.787bb1b9.png\";","export default __webpack_public_path__ + \"static/media/thunder_mage.fea8f838.png\";","export default __webpack_public_path__ + \"static/media/thunder_missile.bb1203a2.png\";","export default __webpack_public_path__ + \"static/media/water_mage.c01f4c8a.png\";","export default __webpack_public_path__ + \"static/media/water_missile.fb44c368.png\";","export default __webpack_public_path__ + \"static/media/wind_mage.64b5492a.png\";","export default __webpack_public_path__ + \"static/media/wind_missile.c08191d4.png\";","import angel_guard from './angel_guard.png'\nimport dark_magile from './dark_magile.png'\nimport earth_mage from './earth_mage.png'\nimport earth_missile from './earth_missile.png'\nimport fire_mage from './fire_mage.png'\nimport fire_missile from './fire_missile.png'\nimport hetero_ignite from './hetero_ignite.png'\nimport homo_ignite from './homo_ignite.png'\nimport light_magile from './light_magile.png'\nimport thunder_mage from './thunder_mage.png'\nimport thunder_missile from './thunder_missile.png'\nimport water_mage from './water_mage.png'\nimport water_missile from './water_missile.png'\nimport wind_mage from './wind_mage.png'\nimport wind_missile from './wind_missile.png'\n\nexport const cardImages = {\n  angel_guard,\n  dark_magile,\n  earth_mage,\n  earth_missile,\n  fire_mage,\n  fire_missile,\n  hetero_ignite,\n  homo_ignite,\n  light_magile,\n  thunder_mage,\n  thunder_missile,\n  water_mage,\n  water_missile,\n  wind_mage,\n  wind_missile\n}\n","import React, { FunctionComponent } from 'react'\nimport { ICard } from '../types'\nimport { makeStyles, Paper } from '@material-ui/core'\nimport { cardImages } from '../assets'\nimport { CheckCircleOutline } from 'mdi-material-ui'\nimport { green, red } from '@material-ui/core/colors'\nimport { CancelOutlined } from '@material-ui/icons'\nimport { useGamenetI18n } from 'gamenet-material'\n\nconst useStyle = makeStyles(() => ({\n  root: {\n    padding: '16px',\n    width: '110px',\n    height: '160px',\n    borderRadius: '8px',\n    cursor: 'pointer',\n    userSelect: 'none',\n    transition: 'transform 0.1s ease-in-out',\n    transformOrigin: 'center',\n    '&:hover': {\n      // transform: 'translateY(-50%)'\n    }\n  }\n}))\n\nexport const Card: FunctionComponent<{\n  card: ICard, onClick?: () => void, disabled?: boolean, style?: Record<string, unknown>, selected?: boolean, isDelete?: boolean\n}> = (\n  {\n    style,\n    card,\n    onClick,\n    disabled,\n    selected,\n    isDelete\n  }) => {\n  const classes = useStyle()\n  const {i18n} = useGamenetI18n()\n\n  return (\n    <Paper\n      elevation={4}\n      style={{\n        pointerEvents: disabled ? 'none' : 'auto',\n        backgroundImage: `url(${cardImages[card]})`,\n        backgroundSize: 'cover',\n        position: 'relative',\n        textAlign: 'left',\n        ...style\n      }}\n      className={classes.root} onClick={!disabled ? onClick : undefined}>\n      <h2 style={{ fontFamily: 'Big Shoulders Inline Text, inherit', margin: 0, color: 'white', textShadow: '5px 3px 8px black' }}>\n        {i18n[card]}\n      </h2>\n      {selected && <div style={{position: 'absolute', top: 0, right: 0}}>\n        {isDelete ? <CancelOutlined style={{ color: red[500] }} fontSize='large'/> : <CheckCircleOutline style={{ color: green[500] }} fontSize='large'/>}\n      </div>}\n    </Paper>\n  )\n}\n","import React, { FunctionComponent, ReactNode, useEffect, useReducer, useState } from 'react'\nimport { ICard, IDeck, IMode } from '../types'\nimport { Card } from './Card'\nimport { Button } from '@material-ui/core'\nimport { Delete, Flag, PlayArrow, Visibility } from '@material-ui/icons'\nimport { PlayCardPayload } from '../GameAction'\nimport { Equal, NotEqual } from 'mdi-material-ui'\nimport { useGamenetI18n } from 'gamenet-material'\nimport { DragDropContext, Draggable, Droppable, DropResult } from 'react-beautiful-dnd'\nimport { reorderInPlace } from '../utils'\n\nconst DURATION = 0.3\n\nconst PlaceHolder: FunctionComponent<{ maxWidth: string, style?: Record<string, unknown> }> = ({ maxWidth, style }) => {\n  const [width, setWidth] = useState(maxWidth)\n  useEffect(() => {\n    setTimeout(() => {\n      setWidth('0')\n    }, 1)\n  }, [])\n  return (\n    <div style={{\n      maxWidth: width,\n      minWidth: width,\n      transition: `min-width ${DURATION}s ease-in-out`,\n      position: 'relative',\n      ...style\n    }}/>\n  )\n}\n\nexport enum ChooseCardFor {\n  FIRST_PLAY,\n  RESPOND_PLAY,\n  DISCARD\n}\n\nexport const Deck: FunctionComponent<{\n  cards: ICard[], hide: boolean, reveal: () => void, onCardsChoose: (payload: PlayCardPayload) => Promise<void>, chooseCardFor: ChooseCardFor, takeHit: () => Promise<void>, myTurn?: boolean, onReorder: (cards: IDeck) => Promise<void>, ableToRespond: boolean\n}> = ({ cards, hide, reveal, onCardsChoose, chooseCardFor, takeHit, myTurn, onReorder, ableToRespond }) => {\n  const [playedIndices, setPlayedIndices] = useState<number[]>([])\n  const [hovering, setHovering] = useState<number | null>(null)\n  const [playGetCardAnimation, setPlayGetCardAnimation] = useState(false)\n  const [discardingAnimation, setDiscardingAnimation] = useState(false)\n  const { i18n } = useGamenetI18n()\n  const [selected, dispatchSelected] = useReducer<(prev: boolean[], action: { type: string, payload?: number | boolean[] }) => boolean[]>((prev, {\n    type,\n    payload\n  }) => {\n    switch (type) {\n      case 'add':\n        if (payload !== undefined && !Array.isArray(payload)) {\n          prev[payload] = true\n        }\n        return [...prev]\n      case 'delete':\n        if (payload !== undefined && !Array.isArray(payload)) {\n          prev[payload] = false\n        }\n        return [...prev]\n      case 'clear':\n        return []\n      case 'override':\n        if (Array.isArray(payload)) {\n          return [...payload]\n        }\n        return prev\n      default:\n        return prev\n    }\n  }, [])\n  const handleCardClick = async (card: ICard, index: number) => {\n    if (selected[index]) {\n      dispatchSelected({ type: 'delete', payload: index })\n    } else {\n      dispatchSelected({ type: 'add', payload: index })\n    }\n  }\n  const handlePlayCards = (param: unknown) => {\n    const mode = param === IMode.HOMO || param === IMode.HETERO ? param : undefined\n    const laterSetDiscardingAnimation = chooseCardFor === ChooseCardFor.DISCARD\n    onCardsChoose({ cards: cards.filter((_, k) => selected[k]), mode })\n      .then(() => {\n        setDiscardingAnimation(laterSetDiscardingAnimation)\n        setHovering(null)\n        setPlayedIndices(selected.map((b, k: number) => [b, k]).filter(([b]) => b).map(([_, k]) => k as number))\n        dispatchSelected({ type: 'clear' })\n        setTimeout(() => {\n          setPlayGetCardAnimation(true)\n        }, 1)\n        setTimeout(() => {\n          setPlayGetCardAnimation(false)\n          setPlayedIndices([])\n          setDiscardingAnimation(false)\n        }, 500)\n      })\n      .catch(e => {\n        console.error(e)\n      })\n  }\n  const getPlayedCards = () => {\n    const cardsToRender = []\n    let j = 0\n    for (let i = 0; i < cards.length; i++) {\n      if (playedIndices.includes(i)) {\n        cardsToRender.push(null)\n      } else {\n        cardsToRender.push(cards[j])\n        j++\n      }\n    }\n    return discardingAnimation ? [...cardsToRender, ...cards.slice(j)] : cardsToRender\n  }\n  const onDragEnd = (result: DropResult) => {\n    const from = result.source.index\n    const to = result.destination?.index\n    if (from !== undefined && to !== undefined) {\n      reorderInPlace(cards, from, to)\n      reorderInPlace(selected, from, to)\n      dispatchSelected({\n        type: 'override',\n        payload: selected\n      })\n      onReorder(cards).catch(console.error)\n    }\n  }\n  const withMaxWidth = (children: ReactNode, index: number, noPad = false) => (\n    <div\n      style={{\n        padding: noPad ? 0 : '8px',\n        maxWidth: `calc(100vw / ${cards.length + 2})`,\n        transition: `max-width ${DURATION / 3}s ease-in-out`\n      }}\n      onMouseEnter={() => setHovering(index)}\n      onTouchStart={() => setHovering(index)}\n      onMouseLeave={() => setHovering(null)}\n      onTouchEnd={() => setHovering(null)}>\n      {children}\n    </div>\n  )\n  return <div style={{\n    position: 'absolute',\n    bottom: hide ? '-200px' : '-100px',\n    left: 0,\n    right: 0,\n    zIndex: 1,\n    transition: `bottom 0.3s ease-in-out`,\n    pointerEvents: 'none'\n  }}>\n    <div style={{\n      textAlign: 'center',\n      transform: 'translateY(-80px)',\n      margin: 'auto',\n      display: 'block',\n      pointerEvents: 'all'\n    }}>\n      {myTurn ? <>\n        {hide && <Button variant='contained' onClick={reveal}>\n          <Visibility/>\n        </Button>}\n        {!hide && chooseCardFor === ChooseCardFor.RESPOND_PLAY && <>\n          <Button variant='contained'\n                  title={i18n.takeHit}\n                  color='secondary'\n                  onClick={() => (!ableToRespond || window.confirm(i18n.areYouSureYouWantToTakeHit)) && takeHit().catch(console.error)}\n          >\n            <Flag/>\n          </Button>\n          <Button style={{ marginLeft: '8px' }} variant='contained'\n                  title={i18n.respond}\n                  color='primary'\n                  onClick={handlePlayCards}\n          >\n            <PlayArrow/>\n          </Button>\n          {!ableToRespond && <div style={{marginLeft: '8px'}}>({i18n.notAbleToRespond})</div>}\n        </>}\n        {!hide && chooseCardFor === ChooseCardFor.FIRST_PLAY && <>\n          <Button variant='contained'\n                  title={i18n.initializeHomoTransfer}\n                  color='primary'\n                  onClick={() => handlePlayCards(IMode.HOMO)}\n          >\n            <Equal/>\n          </Button>\n          <Button style={{ marginLeft: '8px' }} variant='contained'\n                  title={i18n.initializeHeteroTransfer}\n                  color='primary'\n                  onClick={() => handlePlayCards(IMode.HETERO)}\n          >\n            <NotEqual/>\n          </Button>\n        </>}\n        {!hide && chooseCardFor === ChooseCardFor.DISCARD && <>\n          <Button variant='contained'\n                  color='secondary'\n                  title={i18n.trash}\n                  onClick={handlePlayCards}\n          >\n            <Delete/>\n          </Button>\n        </>}\n      </> : i18n.notYourTurn}\n    </div>\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId='droppable' direction='horizontal'>\n        {(provided, snapshot) => (\n          <div ref={provided.innerRef} {...provided.droppableProps}>\n            <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'nowrap' }}>\n              {\n                getPlayedCards().map((card, index) => (\n                  <Draggable index={index} draggableId={index.toString()}>\n                    {(provided, snapshot) => (\n                      <div ref={provided.innerRef}\n                           {...provided.draggableProps}\n                           {...provided.dragHandleProps}>{\n                        card === null\n                          ? <PlaceHolder key={index} maxWidth={`calc(100vw / ${cards.length + 2} + 16px)`}/>\n                          : withMaxWidth(<Card\n                            card={card}\n                            onClick={() => !snapshot.isDragging && handleCardClick(card, index)}\n                            disabled={hide}\n                            style={{ transform: !snapshot.isDragging && (hovering === index || selected[index]) ? 'translateY(-30%)' : undefined }}\n                            selected={selected[index]}\n                            isDelete={chooseCardFor === ChooseCardFor.DISCARD}\n                          />, index)\n\n                      }</div>)}\n                  </Draggable>))\n              }\n              {provided.placeholder}\n              {playedIndices.length > 0 && !discardingAnimation &&\n              <Draggable index={cards.length + 1} draggableId='incoming'>\n                {(provided, snapshot) => (\n                  <div ref={provided.innerRef}\n                       {...provided.draggableProps}\n                       {...provided.dragHandleProps}>\n                    <div style={{\n                      maxWidth: playGetCardAnimation ? `calc((100vw / ${cards.length + 2} + 16px) * ${playedIndices.length})` : '0',\n                      transition: `max-width ${DURATION}s ease-in-out`,\n                      display: 'flex',\n                      flexWrap: 'nowrap'\n                    }}>\n                      {\n                        cards.slice(cards.length - playedIndices.length).map((card, index) => (\n                          withMaxWidth(\n                            <Card\n                              card={card}\n                              onClick={() => handleCardClick(card, index)}\n                              disabled={hide}\n                              style={{ transform: !playGetCardAnimation ? 'translateX(100vw)' : undefined }}\n                              selected={selected[index]}\n                            />\n                            , index + cards.length, false\n                          )\n                        ))\n                      }\n                    </div>\n                  </div>\n                )}\n              </Draggable>\n              }\n            </div>\n          </div>\n\n        )}\n      </Droppable>\n\n    </DragDropContext>\n  </div>\n}\n","import React, { FunctionComponent, useEffect, useMemo, useState } from 'react'\nimport { usePoker99 } from './withGameNetwork'\nimport { GameAction, GameActionType, PlayCardPayload } from './GameAction'\nimport { ChooseCardFor, Deck } from './components/Deck'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core'\nimport { checkAbleToRespond, decodeError } from './utils'\nimport { useGamenetI18n } from 'gamenet-material'\nimport { IDeck } from './types'\n\nexport const Game: FunctionComponent = () => {\n  const {\n    state,\n    dispatch,\n    dispatchAs,\n    myPlayerId,\n    myLocals,\n    hideDeck,\n    setHideDeck,\n    error,\n    setError,\n    renderedDeckId\n  } = usePoker99()\n  const [throttledRenderedId, setTrottledRenderedId] = useState(renderedDeckId)\n  const {i18n} = useGamenetI18n()\n  const handleError = (e: Error): void => {\n    console.error('HANDLE ERROR')\n    try {\n      setError(decodeError(e, i18n))\n    } catch {\n      setError(e.message)\n    }\n  }\n  const myTurn = state.turn === myPlayerId || myLocals.includes(state.players[state.turn])\n  const dispatchHelper = async (action: GameAction) => {\n    try{\n      if (state.turn === myPlayerId) {\n        await dispatch(action).then(() => setError(''))\n      } else if (myLocals.includes(state.players[state.turn])) {\n        await dispatchAs(state.turn, action).then(() => setError(''))\n      } else {\n        throw new Error('Not my turn')\n      }\n    } catch (e) {\n      handleError(e)\n      throw e\n    }\n  }\n  const playCard = async (payload: PlayCardPayload) => {\n    const action: GameAction = {\n      type: GameActionType.PLAY_CARD,\n      payload\n    }\n    await dispatchHelper(action).then(() => {\n      if (myLocals.length > 0) {\n        setHideDeck(true)\n      }\n    })\n  }\n  const discardCard = async (payload: PlayCardPayload) => {\n    const action: GameAction = {\n      type: GameActionType.DISCARD_CARD,\n      payload\n    }\n    await dispatchHelper(action)\n  }\n  const takeHit = async () => {\n    const action: GameAction = {\n      type: GameActionType.TAKE_HIT,\n    }\n    await dispatchHelper(action)\n  }\n  useEffect(() => {\n    setTimeout(() => {\n      setTrottledRenderedId(renderedDeckId)\n    }, 500)\n  }, [renderedDeckId])\n  useEffect(() => {\n    setTrottledRenderedId(myPlayerId)\n  }, [myPlayerId])\n  const ableToRespond = useMemo(() => checkAbleToRespond(state), [state])\n  let chooseCardFor = ChooseCardFor.RESPOND_PLAY\n  if(state.stage.length === 0) {\n    chooseCardFor = ChooseCardFor.FIRST_PLAY\n  }\n  if(state.started && throttledRenderedId !== undefined && throttledRenderedId !== null && state.playerDeck[throttledRenderedId].length > state.playerHp[throttledRenderedId]) {\n    chooseCardFor = ChooseCardFor.DISCARD\n  }\n  const handleCardChoose = async (payload: PlayCardPayload) => {\n    if(chooseCardFor === ChooseCardFor.DISCARD) {\n      await discardCard(payload)\n    } else {\n      await playCard(payload)\n    }\n  }\n  const onReorder = async (cards: IDeck): Promise<void> => {\n    await dispatch({\n      type: GameActionType.REORDER,\n      payload: {\n        cards\n      }\n    }).catch(handleError)\n  }\n  return (\n    <div style={{ pointerEvents: 'all', color: 'white' }}>\n      {state.started && myPlayerId !== undefined &&\n      <Deck\n        cards={state.playerDeck[throttledRenderedId ?? myPlayerId]}\n        onCardsChoose={handleCardChoose}\n        chooseCardFor={chooseCardFor}\n        hide={hideDeck}\n        reveal={() => setHideDeck(false)}\n        takeHit={takeHit}\n        myTurn={myTurn}\n        onReorder={onReorder}\n        ableToRespond={ableToRespond}\n      />}\n      <div style={{ maxHeight: '50%' }}>\n        {state.logs.slice().reverse().map((s, k) => <div key={k}>{s}</div>)}\n      </div>\n      <Dialog open={error !== ''} onClose={() => setError('')} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle>Error</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {error}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setError('')} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n","import React, { FunctionComponent } from 'react'\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core'\nimport { useGamenetI18n } from 'gamenet-material'\n\nexport const DamageTable: FunctionComponent = () => {\n  const { i18n } = useGamenetI18n()\n  return (\n    <TableContainer component={Paper}>\n      <Table style={{ width: '100%' }} size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>{i18n.transferMode}</TableCell>\n            <TableCell>{i18n.mmmCount}</TableCell>\n            <TableCell>{i18n.damage}</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <TableCell rowSpan={3}>{i18n.homo}</TableCell>\n            <TableCell>1 - 4</TableCell>\n            <TableCell>1</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>5 - 7</TableCell>\n            <TableCell>2</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>8+</TableCell>\n            <TableCell>3</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell rowSpan={3}>{i18n.hetero}</TableCell>\n            <TableCell>1 - 4</TableCell>\n            <TableCell>1</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>5 - 6</TableCell>\n            <TableCell>2</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>7</TableCell>\n            <TableCell>3</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n","import { FunctionComponent, useState } from 'react'\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  IconButton\n} from '@material-ui/core'\nimport { Information } from 'mdi-material-ui'\nimport React from 'react'\nimport { useGamenetI18n } from 'gamenet-material'\nimport { DamageTable } from './DamageTable'\n\n\nexport const DamageTableToggleButton: FunctionComponent = () => {\n  const [open, setOpen] = useState(false)\n  const { i18n } = useGamenetI18n()\n  return (\n    <div style={{ position: 'fixed', left: 0, bottom: 0 }}>\n      <IconButton onClick={() => setOpen(true)}>\n        <Information/>\n      </IconButton>\n      <Dialog open={open} onClose={() => setOpen(false)} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle>{i18n.damageTable}</DialogTitle>\n        <DialogContent>\n          <DamageTable/>\n          <DialogContentText>\n            {i18n.damageTableHint}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpen(false)} color=\"primary\">\n            {i18n.close}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n","import React, { FunctionComponent, useEffect, useMemo, useState } from 'react'\nimport { usePoker99 } from '../withGameNetwork'\nimport { GameActionType } from '../GameAction'\nimport { Card } from './Card'\nimport { IDeck, IMode } from '../types'\nimport { computeDamage } from '../utils'\nimport { Button } from '@material-ui/core'\nimport { i18nSub, useGamenetI18n } from 'gamenet-material'\nimport { DamageTableToggleButton } from '../DamageTableToggleButton'\n\nexport const GameRenderer: FunctionComponent = () => {\n  const { state, myPlayerId, dispatch } = usePoker99()\n  const [prevCardPayload, setPrevCardPayload] = useState<null | IDeck>(null)\n  const [startAnimateCard, setStartAnimateCard] = useState(false)\n  const [showAnimateCard, setShowAnimateCard] = useState(false)\n  const { i18n } = useGamenetI18n()\n  useEffect(() => {\n    setShowAnimateCard(true)\n    setTimeout(() => {\n      setStartAnimateCard(true)\n    }, 1)\n    setTimeout(() => {\n      setPrevCardPayload(state.stage)\n      setStartAnimateCard(false)\n      setShowAnimateCard(false)\n    }, 300)\n  }, [state.lastAction, state.stage])\n  const mp = (id: number): number => (id + state.playerHp.length) % state.playerHp.length\n  const center = {\n    top: '50vh',\n    left: '50vw'\n  }\n  const again = async (): Promise<void> => {\n    await dispatch({\n      type: GameActionType.END\n    }).catch(console.error)\n  }\n  const status = (() => {\n    if (state.started) {\n      if (state.winner !== null) {\n        const player = state.players[state.winner]\n        return i18nSub(i18n.loserIs$player, { player })\n      }\n      const player = state.players[state.turn]\n      if (state.playerDeck[state.turn].length > state.playerHp[state.turn]) {\n        return i18nSub(i18n.$playerDiscardCardTil$cardCount, { player, cardCount: `${state.playerHp[state.turn]}` })\n      }\n      if (state.stage.length === 0) {\n        return i18nSub(i18n.$playerInitializingTransfer, { player })\n      } else {\n        const mode = i18n[state.mode ?? IMode.HOMO]\n        return i18nSub(i18n.$playerRespondTo$modeTransfer, { player, mode })\n      }\n    }\n    return undefined\n  })()\n  const damage = useMemo(() => `${computeDamage(state)}`, [state])\n  const hint = (() => {\n    if (state.started) {\n      if (state.playerDeck[state.turn].length > state.playerHp[state.turn]) {\n        return i18nSub(i18n.hit$playerWith$damage, { player: state.players[state.turn], damage })\n      }\n      if (state.winner !== null) {\n        return i18n.gameOver\n      }\n      if (state.duel) {\n        return i18n.duelHint\n      }\n      if (state.ignited) {\n        return i18n.ignitedHint\n      }\n    }\n    return undefined\n  })()\n  return (\n    !state.started\n      ? <div\n        style={{ backgroundColor: 'green', position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, color: 'white' }}\n      />\n      : <div\n        style={{\n          backgroundColor: 'green',\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          color: 'white',\n          boxShadow: state.duel ? 'inset 0 0 100px #ff9d9d' : undefined,\n          transition: 'box-shadow 0.3s ease-in-out'\n        }}>\n        <div style={{ display: 'flex', justifyContent: 'space-around', margin: 'auto' }}>\n          {\n            new Array(state.players.length).fill(0).map((_, k) => mp(k + (myPlayerId ?? 0))).filter(id => id !== (myPlayerId ?? 0)).map(id => (\n              <div style={{ border: `solid ${state.turn === id ? 'red' : 'transparent'} 2px`, padding: '16px 32px' }}>\n                <div>\n                  {state.players[id]}\n                </div>\n                <div>\n                  hp: {state.playerHp[id]}\n                </div>\n              </div>\n            ))\n          }\n        </div>\n        {/*{myPlayerId === undefined && <Name offset={0}/>}*/}\n        {prevCardPayload !== null &&\n        <div style={{ position: 'absolute', ...center }}>\n          <div style={{ transform: 'translate(-50%,-100%)', textAlign: 'center' }}>\n            {hint && <h3>{hint}</h3>}\n            <h1>{status}</h1>\n            {state.winner !== undefined && state.winner !== null && <div>\n              <Button variant=\"contained\" color='primary' onClick={again}>{i18n.again}</Button>\n            </div>}\n            <h3>{state.mode && `${i18n[state.mode]}, `}{i18nSub(i18n.current$damage, { damage })}</h3>\n            <div style={{\n              display: 'flex',\n              justifyContent: 'center',\n              maxWidth: 'calc(100vw - 32px)',\n              flexWrap: 'wrap',\n              marginRight: 'auto',\n              marginLeft: 'auto',\n              marginBottom: '70px'\n            }}>\n              {prevCardPayload.map(card => <div style={{ padding: '8px', maxHeight: '70px' }}><Card card={card} disabled/>\n              </div>)}\n            </div>\n          </div>\n        </div>}\n        {showAnimateCard && state.lastAction !== null && <div style={{\n          display: 'flex',\n          position: 'absolute',\n          left: '50vw',\n          top: startAnimateCard ? '50vh' : state.lastAction.playerId === myPlayerId ? '100vh' : '-100%',\n          transition: ['top', 'bottom', 'left', 'right'].map(s => `${s} 0.2s ease-in-out`).join(',')\n        }}>\n          <div style={{ transform: 'translate(-50%,-50%)', display: 'flex' }}>\n            {state.lastAction.cards.map(card => <div style={{ padding: '8px' }}><Card card={card} disabled/></div>)}\n          </div>\n        </div>}\n        <h3 style={{\n          position: 'absolute',\n          bottom: 0,\n          right: '20px',\n          textAlign: 'right',\n          border: `solid ${state.turn === (myPlayerId ?? 0) ? 'red' : 'transparent'} 2px`,\n          padding: '16px 32px'\n        }}>\n          <div>\n            {i18n.name}: {state.players[myPlayerId ?? 0]}\n          </div>\n          <div>\n            hp: {state.playerHp[myPlayerId ?? 0]}\n          </div>\n          <div>\n            {i18n.drawDeck}: {state.drawDeck.length}\n          </div>\n        </h3>\n        <DamageTableToggleButton/>\n      </div>\n  )\n}\n","import React from 'react'\nimport { DamageTable } from '../DamageTable'\n\nexport const howToPlay = (\n  <div>\n    <h1>Magile</h1>\n    <h2>Story</h2>\n    <p>\n      In a magical kingdom, there were some wizards. They always research a weapon called \"Mage\", a very powerful magic.\n    </p>\n    <p>\n      One day they met some engineers who were fans of ancient technologies. The engineers mixed ancient technologies\n      with modern magic, and created a new weapon called \"Missile\", challenged the cute wizards.\n    </p>\n    <p>\n      A battle between Mages and Missiles starts now!\n    </p>\n    <h2>Cards</h2>\n    <h4>Basic cards:</h4>\n    <ul>\n      <li>Mages*45: Earth, Water, Fire, Wind, Thunder each *9</li>\n      <li>Missile*45: Earth, Water, Fire, Wind, Thunder each *9</li>\n    </ul>\n    <h4>Function cards:</h4>\n    <ul>\n      <li>Magiles*6: Light, Dark each *3</li>\n      <li>Ignite*6: Homo, Hetero each *3</li>\n      <li>Angel Guard*6</li>\n    </ul>\n    <h2>How To Play</h2>\n    <ol>\n      <li>Choose first player randomly to initiate a transfer</li>\n      <li>Initiate transfer: choose one missile or mage and decide whether is it a homo transfer or hetero transfer</li>\n      <li>\n        <div>Next player respond to the transfer</div>\n        <ul>\n          <li>if it is a homo transfer, you can either\n            <ul>\n              <li>play 1/3 mage/missile of same color</li>\n              <li>or play a homo ignite</li>\n            </ul>\n          </li>\n          <li>if it is a hetero transfer, you can either\n            <ul>\n              <li>play 1/3 mage/missle/magile of color that were not played\n                yet, and same type as the first card(mage/missile), where magile is both a mage and a missile\n              </li>\n              <li>or play a hetero ignite</li>\n            </ul>\n          </li>\n          <li>If someone played an ignite at this transfer, you can only respond with same ignite or angel guard, each additional ignite +1 damage (that is first ignite dont have damage)</li>\n          <li>respond with an angel guard</li>\n          <li>give up respond and take damage</li>\n        </ul>\n      </li>\n      <li>After playing card, draw cards until number of cards = hp</li>\n      <li>\n        If cannot respond will be damaged. The amount refer to the damage table. Discard until number of cards = hp.\n        Same player initiate a new transfer\n      </li>\n      <li>If anyone hp {'<='} 3, game will enter duel mode. During duel mode all damage +1 and function card stop working (cannot respond with magile/ignite/angel guard). Effective to all players</li>\n      <li>If anyone hp {'<='} 0, game end and he is the only loser, the rest win</li>\n    </ol>\n    <h2>Damage Table</h2>\n    <DamageTable/>\n    <p>After playing first ignite in the transfer, each additional ignite damage+1; during duel damage+1.</p>\n  </div>\n)\n","import { gamenetI18n } from 'gamenet-material'\nimport { ICard, ICardColor, ICardType, IMode } from '../types'\nimport { howToPlay } from './howToPlay.en'\n\nexport const en = {\n  ...gamenetI18n.en,\n  gameName: 'Magile',\n  howToPlay: 'How To Play',\n  howToPlayContent: howToPlay,\n  [IMode.HOMO]: 'Homo Transfer',\n  [IMode.HETERO]: 'Hetero Transfer',\n  [ICardType.MAGE]: 'Mage',\n  [ICardType.MISSILE]: 'Missile',\n  [ICardType.MAGILE]: 'Magile',\n  [ICardType.IGNITE]: 'Ignite',\n  [ICardType.ANGEL_GUARD]: 'Angel Guard',\n  [ICardColor.NONE]: 'None',\n  [ICardColor.EARTH]: 'Earth',\n  [ICardColor.WATER]: 'Water',\n  [ICardColor.FIRE]: 'Fire',\n  [ICardColor.WIND]: 'Wind',\n  [ICardColor.THUNDER]: 'Thunder',\n  [ICardColor.LIGHT]: 'Light',\n  [ICardColor.DARK]: 'Dark',\n  [ICard.EARTH_MAGE]: 'Earth Mage',\n  [ICard.WATER_MAGE]: 'Water Mage',\n  [ICard.FIRE_MAGE]: 'Fire Mage',\n  [ICard.WIND_MAGE]: 'Wind Mage',\n  [ICard.THUNDER_MAGE]: 'Thunder Mage',\n  [ICard.EARTH_MISSILE]: 'Earth Missile',\n  [ICard.WATER_MISSILE]: 'Water Missile',\n  [ICard.FIRE_MISSILE]: 'Fire Missile',\n  [ICard.WIND_MISSILE]: 'Wind Missile',\n  [ICard.THUNDER_MISSILE]: 'Thunder Missile',\n  [ICard.LIGHT_MAGILE]: 'Light Magile',\n  [ICard.DARK_MAGILE]: 'Dark Magile',\n  [ICard.HOMO_IGNITE]: 'Homo Ignite',\n  [ICard.HETERO_IGNITE]: 'Hetero Ignite',\n  [ICard.ANGEL_GUARD]: 'Angel Guard',\n  gameOver: 'Game Over',\n  duelHint: 'DUEL! NO Function card and each hit will deduct 1 more hp!',\n  igniteHint: 'IGNITED! Respond only with same ignited or angel guard!',\n  loserIs$player: 'Loser is {{player}}',\n  $playerDiscardCardTil$cardCount: '{{player}} discard card til {{cardCount}}',\n  $playerInitializingTransfer: '{{player}} initializing transfer',\n  $playerRespondTo$modeTransfer: '{{player}} responding to {{mode}}.',\n  current$damage: 'Current damage: {{damage}}',\n  again: 'Again',\n  drawDeck: 'Draw Deck',\n  notYourTurn: 'Not Your Turn',\n  takeHit: 'Take Hit',\n  areYouSureYouWantToTakeHit: 'Are you sure you want to take hit?',\n  respond: 'Respond',\n  initializeHomoTransfer: 'Initialize Homo Transfer',\n  initializeHeteroTransfer: 'Initialize Hetero Transfer',\n  trash: 'Trash',\n  cannotDraw$playerAlreadyHas$countCards: `cannot draw, {{player}} already has {{count}} cards`,\n  $playerDoesNotOwnCard$card: '{{player}} doesnt own card {{card}}',\n  playerCardMoreThanHp: 'Player has card more than his hp, please discard',\n  cannotMixIgniteAngelWithMagiles: 'cannot mix ignite or angel card with mage, missiles and magiles',\n  cannotPlayFunctionDuringDuel: 'cannot play function card during duel',\n  canPlayOnly1Or3Cards: 'you can only play 1 card or 3 cards',\n  specifyHomoOrHeteroAtFirstTransfer: 'please specify homo transfer or hetero transfer as the first to transfer',\n  canOnlyDoHeteroWhenNextIs1hp: 'can only do hetero transfer when next player is 1 hp',\n  canOnlyPlay1CardWhenAtFirstTransfer: 'please play one card as the first to transfer',\n  canOnlyPlayNonFunctionWhenAtFirstTransfer: 'cannot play function type as the first to transfer',\n  canOnlyPlay$colorInThisHomoTransfer: 'cannot play color other than {{color}} in this homo transfer',\n  $colorsPlayedAnd$colorsCanPlayInThisHetero$typeTransfer: '{{colorsPlayed}} {{type}} played. You may play {{colorsCanPlay}} {{type2}} in this hetero transfer',\n  youMayPlay$typeOnly: 'You may play {{type}} only',\n  youMayPlay$typeOrMagileOnly: 'You may play {{type}} or Magile only',\n  cannotPlayHomoIgniteDuringHeteroTransfer: 'Cannot Play Homo Ignite during Hetero transfer',\n  cannotPlayHeteroIgniteDuringHomoTransfer: 'Cannot Play Hetero Ignite during Homo transfer',\n  invalidMove: 'invalidMove',\n  shouldDiscard$countCards: 'should discard {{count}} cards',\n  transferMode: 'Transfer Mode',\n  mmmCount: 'Mage/Missile/Magile count on stage',\n  damage: 'Damage',\n  damageTableHint: 'After playing first ignite in the transfer, each additional ignite damage+1; during duel damage+1.',\n  damageTable: 'Damage Table',\n  close: 'close',\n  notAbleToRespond: 'Not able to respond',\n  hit$playerWith$damage: 'Hit {{player}} causing {{damage}} damage'\n}\n","import React from 'react'\nimport { DamageTable } from '../DamageTable'\n\nexport const howToPlay = (\n  <div>\n    <h1>魔法飛彈大作戰</h1>\n    <h2>故事</h2>\n    <p>\n      在某個魔法王國裡，居住著一群「魔導師」，\n      她們成天研究一種稱為「魔彈」的法術，是種非常強大的法術。\n    </p>\n    <p>\n      但有天她們遇上了崇尚古文明的「機械師」，機械師將古代科技融合至現代魔法中，\n      創造出了一種名為「飛彈」的武器，向這群可愛的魔導師們發起了挑戰。\n    </p>\n    <p>\n      魔彈與飛彈的比拚，就在此拉開序幕!\n    </p>\n    <h2>所有卡牌</h2>\n    <h4>基礎牌:</h4>\n    <ul>\n      <li>魔彈卡45張：地、水、火、風、雷五系魔彈各9張</li>\n      <li>飛彈卡45張：地、水、火、風、雷五系飛彈各9張</li>\n    </ul>\n    <h4>功能牌:</h4>\n    <ul>\n      <li>魔法飛彈卡6張：光系魔法飛彈卡3張、暗系魔法飛彈卡3張</li>\n      <li>引爆卡6張：同系引爆卡3張、異系引爆卡3張</li>\n      <li>庇護卡6張：天使的庇護卡6張</li>\n    </ul>\n    <h2>玩法</h2>\n    <ol>\n      <li>隨機一個玩家發動首輪傳遞</li>\n      <li>發動傳遞: 由該玩家打出1張魔彈或是飛彈，並且聲明一種傳遞方式(同系/異系)。</li>\n      <li>\n        <div>下個玩家響應傳遞</div>\n        <ul>\n          <li>如果是同系傳遞，可以\n            <ul>\n              <li>打出一或三張同系卡(魔彈飛彈都可以)</li>\n              <li>或打出同系引爆</li>\n            </ul>\n          </li>\n          <li>如果是異系傳遞，可以\n            <ul>\n              <li>打出一或三張未打出過的異系卡，如果發起者打出的是魔彈，只能打出魔彈，飛彈亦然。魔法飛彈是魔彈亦是飛彈。\n              </li>\n              <li>或打出異系引爆</li>\n            </ul>\n          </li>\n          <li>如果今輪有人打出引爆，你只能用同一種引爆或天使的庇護作響應。每張再加的引爆+1傷害(即第一張引爆沒有傷害)</li>\n          <li>以天使的庇護作響應</li>\n          <li>以生命值硬接</li>\n        </ul>\n      </li>\n      <li>每次打牌後，抽牌直至手牌數與血量一樣</li>\n      <li>\n        如果沒能作出響應，則只能用生命值硬接。傷害請見傷害表。棄牌至手牌數與血量一致，然後同一玩家發動下一輪傳遞\n      </li>\n      <li>如果有人血量低於或等於3，遊戲進入大決戰。大決戰期間所有傷害+1，所有功能牌失效 (所有人不能打出魔法飛彈、引爆和庇護)</li>\n      <li>如果有人血量低於或等於0，遊戲結束，該玩家成為唯一輪家，其餘人獲勝</li>\n    </ol>\n    <h2>傷害表</h2>\n    <DamageTable/>\n    <p>\n      打出一張引爆卡後，其後每張引爆傷害+1。大決戰其間傷害+1\n    </p>\n  </div>\n)\n","import { gamenetI18n } from 'gamenet-material'\nimport { ICard, ICardColor, ICardType, IMode } from '../types'\nimport { howToPlay } from './howToPlay.zh'\n\nexport const zh = {\n  ...gamenetI18n.zh,\n  gameName: '魔法飛彈大作戰',\n  howToPlay: '玩法',\n  howToPlayContent: howToPlay,\n  [IMode.HOMO]: '同系傳遞',\n  [IMode.HETERO]: '異系傳遞',\n  [ICardType.MAGE]: '魔彈',\n  [ICardType.MISSILE]: '飛彈',\n  [ICardType.MAGILE]: '魔法飛彈',\n  [ICardType.IGNITE]: '引爆',\n  [ICardType.ANGEL_GUARD]: '天使的庇護',\n  [ICardColor.NONE]: '無屬性',\n  [ICardColor.EARTH]: '地系',\n  [ICardColor.WATER]: '水系',\n  [ICardColor.FIRE]: '火系',\n  [ICardColor.WIND]: '風系',\n  [ICardColor.THUNDER]: '雷系',\n  [ICardColor.LIGHT]: '光系',\n  [ICardColor.DARK]: '暗系',\n  [ICard.EARTH_MAGE]: '地系魔彈',\n  [ICard.WATER_MAGE]: '水系魔彈',\n  [ICard.FIRE_MAGE]: '火系魔彈',\n  [ICard.WIND_MAGE]: '風系魔彈',\n  [ICard.THUNDER_MAGE]: '雷系魔彈',\n  [ICard.EARTH_MISSILE]: '地系飛彈',\n  [ICard.WATER_MISSILE]: '水系飛彈',\n  [ICard.FIRE_MISSILE]: '火系飛彈',\n  [ICard.WIND_MISSILE]: '風系飛彈',\n  [ICard.THUNDER_MISSILE]: '雷系飛彈',\n  [ICard.LIGHT_MAGILE]: '光系魔法飛彈',\n  [ICard.DARK_MAGILE]: '暗系魔法飛彈',\n  [ICard.HOMO_IGNITE]: '同系引爆',\n  [ICard.HETERO_IGNITE]: '異系引爆',\n  [ICard.ANGEL_GUARD]: '天使的庇護',\n  gameOver: '遊戲結束',\n  duelHint: '大決戰! 功能卡失效，每次傷害+1!',\n  igniteHint: '引爆! 只可以用同一種引爆或天使的庇護作響應!',\n  loserIs$player: '輸家是{{player}}',\n  $playerDiscardCardTil$cardCount: '{{player}}棄牌至{{cardCount}}張',\n  $playerInitializingTransfer: '{{player}}開始傳遞',\n  $playerRespondTo$modeTransfer: '{{player}}響應{{mode}}',\n  current$damage: '目前累積傷害: {{damage}}',\n  again: '再玩一次',\n  drawDeck: '抽牌區',\n  notYourTurn: '不是你的回合哦~',\n  takeHit: '用生命值硬接',\n  areYouSureYouWantToTakeHit: '你確定要用生命值硬接?',\n  respond: '響應',\n  initializeHomoTransfer: '發動同系傳遞',\n  initializeHeteroTransfer: '發動異系傳遞',\n  trash: '棄卡',\n  cannotDraw$playerAlreadyHas$countCards: `不能抽卡, {{player}}已經有{{count}}張卡`,\n  $playerDoesNotOwnCard$card: '{{player}}沒有{{card}}',\n  playerCardMoreThanHp: '玩家有多於他血量的卡，請棄卡',\n  cannotMixIgniteAngelWithMagiles: '引爆和天使卡不能與其他卡混用',\n  cannotPlayFunctionDuringDuel: '大決戰期間不能用功能卡',\n  canPlayOnly1Or3Cards: '你只能打出一張或三張卡',\n  specifyHomoOrHeteroAtFirstTransfer: '發動傳遞時請指明同系或異系傳遞',\n  canOnlyDoHeteroWhenNextIs1hp: '當下家只有1血時只能發動異系傳遞',\n  canOnlyPlay1CardWhenAtFirstTransfer: '發動傳遞時只能打出一張卡',\n  canOnlyPlayNonFunctionWhenAtFirstTransfer: '發動傳遞時不能打出功能卡',\n  canOnlyPlay$colorInThisHomoTransfer: '此同系傳遞只能打出{{color}}',\n  $colorsPlayedAnd$colorsCanPlayInThisHetero$typeTransfer: '{{colorsPlayed}}{{type}}已經有人打出。這場異系傳遞你可以打出{{colorsCanPlay}}{{type2}}',\n  youMayPlay$typeOnly: '你只能打出{{type}}',\n  youMayPlay$typeOrMagileOnly: '你只能打出{{type}}或者魔法飛彈',\n  cannotPlayHomoIgniteDuringHeteroTransfer: '異系傳遞不能打出同系引爆',\n  cannotPlayHeteroIgniteDuringHomoTransfer: '同系傳遞不能打出異系引爆',\n  invalidMove: '不允許的行動',\n  shouldDiscard$countCards: '請棄{{count}}張卡',\n  transferMode: '傳遞模式',\n  mmmCount: '場上魔彈/飛彈/魔法飛彈數量',\n  damage: '傷害',\n  damageTableHint: '打出一張引爆卡後，其後每張引爆傷害+1。大決戰其間傷害+1',\n  damageTable: '傷害表',\n  close: '關閉',\n  notAbleToRespond: '沒有可以響應的卡',\n  hit$playerWith$damage: '命中{{player}}並造成{{damage}}點傷害'\n}\n","import { en } from './en'\nimport { zh } from './zh'\n\nexport const i18ns = {\n  en,\n  zh\n}\n","import React, { FunctionComponent } from 'react'\nimport { usePoker99, withGameNetwork } from './withGameNetwork'\nimport { GamePagesSlider, Home, LanguageButton, Room, useGamenetI18n, withGamenetI18n } from 'gamenet-material'\nimport { Game } from './Game'\nimport { GameRenderer } from './components/GameRenderer'\nimport { i18ns } from './i18ns'\nimport { DialogContent } from '@material-ui/core'\nimport { withLobby } from 'gamenet'\n\nconst App: FunctionComponent = withLobby(withGamenetI18n({ i18ns })(withGameNetwork(() => {\n  const network = usePoker99()\n  const { i18n } = useGamenetI18n()\n  return (\n    <GamePagesSlider gameAppState={network.gameAppState} fullPage={[false, false, true]} GameRenderer={<GameRenderer/>}>\n      <Home {...network} gameName={i18n.gameName}>\n        <DialogContent>\n          {i18n.howToPlayContent}\n        </DialogContent>\n      </Home>\n      <Room {...network} />\n      <Game/>\n      <div style={{ position: 'fixed', top: 0, right: 0, zIndex: 100 }}>\n        <LanguageButton/>\n      </div>\n    </GamePagesSlider>\n  )\n})))\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}